
Ex10_Lab3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002e94  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  08002fa0  08002fa0  00012fa0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002fc0  08002fc0  00020090  2**0
                  CONTENTS
  4 .ARM          00000000  08002fc0  08002fc0  00020090  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002fc0  08002fc0  00020090  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002fc0  08002fc0  00012fc0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002fc4  08002fc4  00012fc4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000090  20000000  08002fc8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000e4  20000090  08003058  00020090  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000174  08003058  00020174  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 12 .debug_info   00008a9b  00000000  00000000  000200b9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000019c3  00000000  00000000  00028b54  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a68  00000000  00000000  0002a518  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000980  00000000  00000000  0002af80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016863  00000000  00000000  0002b900  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000b090  00000000  00000000  00042163  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000823a2  00000000  00000000  0004d1f3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000cf595  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000029b0  00000000  00000000  000cf5e8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000090 	.word	0x20000090
 8000128:	00000000 	.word	0x00000000
 800012c:	08002f88 	.word	0x08002f88

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000094 	.word	0x20000094
 8000148:	08002f88 	.word	0x08002f88

0800014c <display7SEG>:
 *
 *  Created on: Nov 4, 2022
 *      Author: DELL
 */
#include "7Seg_Led.h"
void display7SEG(GPIO_TypeDef**GPIO_Port,uint16_t*GPIO_Pin,int num){
 800014c:	b580      	push	{r7, lr}
 800014e:	b084      	sub	sp, #16
 8000150:	af00      	add	r7, sp, #0
 8000152:	60f8      	str	r0, [r7, #12]
 8000154:	60b9      	str	r1, [r7, #8]
 8000156:	607a      	str	r2, [r7, #4]
	if(num==0){
 8000158:	687b      	ldr	r3, [r7, #4]
 800015a:	2b00      	cmp	r3, #0
 800015c:	d143      	bne.n	80001e6 <display7SEG+0x9a>
		HAL_GPIO_WritePin(GPIO_Port[0],GPIO_Pin[0],0);
 800015e:	68fb      	ldr	r3, [r7, #12]
 8000160:	6818      	ldr	r0, [r3, #0]
 8000162:	68bb      	ldr	r3, [r7, #8]
 8000164:	881b      	ldrh	r3, [r3, #0]
 8000166:	2200      	movs	r2, #0
 8000168:	4619      	mov	r1, r3
 800016a:	f001 fee4 	bl	8001f36 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIO_Port[1],GPIO_Pin[1],0);
 800016e:	68fb      	ldr	r3, [r7, #12]
 8000170:	3304      	adds	r3, #4
 8000172:	6818      	ldr	r0, [r3, #0]
 8000174:	68bb      	ldr	r3, [r7, #8]
 8000176:	3302      	adds	r3, #2
 8000178:	881b      	ldrh	r3, [r3, #0]
 800017a:	2200      	movs	r2, #0
 800017c:	4619      	mov	r1, r3
 800017e:	f001 feda 	bl	8001f36 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIO_Port[2],GPIO_Pin[2],0);
 8000182:	68fb      	ldr	r3, [r7, #12]
 8000184:	3308      	adds	r3, #8
 8000186:	6818      	ldr	r0, [r3, #0]
 8000188:	68bb      	ldr	r3, [r7, #8]
 800018a:	3304      	adds	r3, #4
 800018c:	881b      	ldrh	r3, [r3, #0]
 800018e:	2200      	movs	r2, #0
 8000190:	4619      	mov	r1, r3
 8000192:	f001 fed0 	bl	8001f36 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIO_Port[3],GPIO_Pin[3],0);
 8000196:	68fb      	ldr	r3, [r7, #12]
 8000198:	330c      	adds	r3, #12
 800019a:	6818      	ldr	r0, [r3, #0]
 800019c:	68bb      	ldr	r3, [r7, #8]
 800019e:	3306      	adds	r3, #6
 80001a0:	881b      	ldrh	r3, [r3, #0]
 80001a2:	2200      	movs	r2, #0
 80001a4:	4619      	mov	r1, r3
 80001a6:	f001 fec6 	bl	8001f36 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIO_Port[4],GPIO_Pin[4],0);
 80001aa:	68fb      	ldr	r3, [r7, #12]
 80001ac:	3310      	adds	r3, #16
 80001ae:	6818      	ldr	r0, [r3, #0]
 80001b0:	68bb      	ldr	r3, [r7, #8]
 80001b2:	3308      	adds	r3, #8
 80001b4:	881b      	ldrh	r3, [r3, #0]
 80001b6:	2200      	movs	r2, #0
 80001b8:	4619      	mov	r1, r3
 80001ba:	f001 febc 	bl	8001f36 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIO_Port[5],GPIO_Pin[5],0);
 80001be:	68fb      	ldr	r3, [r7, #12]
 80001c0:	3314      	adds	r3, #20
 80001c2:	6818      	ldr	r0, [r3, #0]
 80001c4:	68bb      	ldr	r3, [r7, #8]
 80001c6:	330a      	adds	r3, #10
 80001c8:	881b      	ldrh	r3, [r3, #0]
 80001ca:	2200      	movs	r2, #0
 80001cc:	4619      	mov	r1, r3
 80001ce:	f001 feb2 	bl	8001f36 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIO_Port[6],GPIO_Pin[6],1);
 80001d2:	68fb      	ldr	r3, [r7, #12]
 80001d4:	3318      	adds	r3, #24
 80001d6:	6818      	ldr	r0, [r3, #0]
 80001d8:	68bb      	ldr	r3, [r7, #8]
 80001da:	330c      	adds	r3, #12
 80001dc:	881b      	ldrh	r3, [r3, #0]
 80001de:	2201      	movs	r2, #1
 80001e0:	4619      	mov	r1, r3
 80001e2:	f001 fea8 	bl	8001f36 <HAL_GPIO_WritePin>
	}
	if(num==1){
 80001e6:	687b      	ldr	r3, [r7, #4]
 80001e8:	2b01      	cmp	r3, #1
 80001ea:	d143      	bne.n	8000274 <display7SEG+0x128>
		HAL_GPIO_WritePin(GPIO_Port[0],GPIO_Pin[0],1);
 80001ec:	68fb      	ldr	r3, [r7, #12]
 80001ee:	6818      	ldr	r0, [r3, #0]
 80001f0:	68bb      	ldr	r3, [r7, #8]
 80001f2:	881b      	ldrh	r3, [r3, #0]
 80001f4:	2201      	movs	r2, #1
 80001f6:	4619      	mov	r1, r3
 80001f8:	f001 fe9d 	bl	8001f36 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIO_Port[1],GPIO_Pin[1],0);
 80001fc:	68fb      	ldr	r3, [r7, #12]
 80001fe:	3304      	adds	r3, #4
 8000200:	6818      	ldr	r0, [r3, #0]
 8000202:	68bb      	ldr	r3, [r7, #8]
 8000204:	3302      	adds	r3, #2
 8000206:	881b      	ldrh	r3, [r3, #0]
 8000208:	2200      	movs	r2, #0
 800020a:	4619      	mov	r1, r3
 800020c:	f001 fe93 	bl	8001f36 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIO_Port[2],GPIO_Pin[2],0);
 8000210:	68fb      	ldr	r3, [r7, #12]
 8000212:	3308      	adds	r3, #8
 8000214:	6818      	ldr	r0, [r3, #0]
 8000216:	68bb      	ldr	r3, [r7, #8]
 8000218:	3304      	adds	r3, #4
 800021a:	881b      	ldrh	r3, [r3, #0]
 800021c:	2200      	movs	r2, #0
 800021e:	4619      	mov	r1, r3
 8000220:	f001 fe89 	bl	8001f36 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIO_Port[3],GPIO_Pin[3],1);
 8000224:	68fb      	ldr	r3, [r7, #12]
 8000226:	330c      	adds	r3, #12
 8000228:	6818      	ldr	r0, [r3, #0]
 800022a:	68bb      	ldr	r3, [r7, #8]
 800022c:	3306      	adds	r3, #6
 800022e:	881b      	ldrh	r3, [r3, #0]
 8000230:	2201      	movs	r2, #1
 8000232:	4619      	mov	r1, r3
 8000234:	f001 fe7f 	bl	8001f36 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIO_Port[4],GPIO_Pin[4],1);
 8000238:	68fb      	ldr	r3, [r7, #12]
 800023a:	3310      	adds	r3, #16
 800023c:	6818      	ldr	r0, [r3, #0]
 800023e:	68bb      	ldr	r3, [r7, #8]
 8000240:	3308      	adds	r3, #8
 8000242:	881b      	ldrh	r3, [r3, #0]
 8000244:	2201      	movs	r2, #1
 8000246:	4619      	mov	r1, r3
 8000248:	f001 fe75 	bl	8001f36 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIO_Port[5],GPIO_Pin[5],1);
 800024c:	68fb      	ldr	r3, [r7, #12]
 800024e:	3314      	adds	r3, #20
 8000250:	6818      	ldr	r0, [r3, #0]
 8000252:	68bb      	ldr	r3, [r7, #8]
 8000254:	330a      	adds	r3, #10
 8000256:	881b      	ldrh	r3, [r3, #0]
 8000258:	2201      	movs	r2, #1
 800025a:	4619      	mov	r1, r3
 800025c:	f001 fe6b 	bl	8001f36 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIO_Port[6],GPIO_Pin[6],1);
 8000260:	68fb      	ldr	r3, [r7, #12]
 8000262:	3318      	adds	r3, #24
 8000264:	6818      	ldr	r0, [r3, #0]
 8000266:	68bb      	ldr	r3, [r7, #8]
 8000268:	330c      	adds	r3, #12
 800026a:	881b      	ldrh	r3, [r3, #0]
 800026c:	2201      	movs	r2, #1
 800026e:	4619      	mov	r1, r3
 8000270:	f001 fe61 	bl	8001f36 <HAL_GPIO_WritePin>
	}
	if(num==2){
 8000274:	687b      	ldr	r3, [r7, #4]
 8000276:	2b02      	cmp	r3, #2
 8000278:	d143      	bne.n	8000302 <display7SEG+0x1b6>
		HAL_GPIO_WritePin(GPIO_Port[0],GPIO_Pin[0],0);
 800027a:	68fb      	ldr	r3, [r7, #12]
 800027c:	6818      	ldr	r0, [r3, #0]
 800027e:	68bb      	ldr	r3, [r7, #8]
 8000280:	881b      	ldrh	r3, [r3, #0]
 8000282:	2200      	movs	r2, #0
 8000284:	4619      	mov	r1, r3
 8000286:	f001 fe56 	bl	8001f36 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIO_Port[1],GPIO_Pin[1],0);
 800028a:	68fb      	ldr	r3, [r7, #12]
 800028c:	3304      	adds	r3, #4
 800028e:	6818      	ldr	r0, [r3, #0]
 8000290:	68bb      	ldr	r3, [r7, #8]
 8000292:	3302      	adds	r3, #2
 8000294:	881b      	ldrh	r3, [r3, #0]
 8000296:	2200      	movs	r2, #0
 8000298:	4619      	mov	r1, r3
 800029a:	f001 fe4c 	bl	8001f36 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIO_Port[2],GPIO_Pin[2],1);
 800029e:	68fb      	ldr	r3, [r7, #12]
 80002a0:	3308      	adds	r3, #8
 80002a2:	6818      	ldr	r0, [r3, #0]
 80002a4:	68bb      	ldr	r3, [r7, #8]
 80002a6:	3304      	adds	r3, #4
 80002a8:	881b      	ldrh	r3, [r3, #0]
 80002aa:	2201      	movs	r2, #1
 80002ac:	4619      	mov	r1, r3
 80002ae:	f001 fe42 	bl	8001f36 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIO_Port[3],GPIO_Pin[3],0);
 80002b2:	68fb      	ldr	r3, [r7, #12]
 80002b4:	330c      	adds	r3, #12
 80002b6:	6818      	ldr	r0, [r3, #0]
 80002b8:	68bb      	ldr	r3, [r7, #8]
 80002ba:	3306      	adds	r3, #6
 80002bc:	881b      	ldrh	r3, [r3, #0]
 80002be:	2200      	movs	r2, #0
 80002c0:	4619      	mov	r1, r3
 80002c2:	f001 fe38 	bl	8001f36 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIO_Port[4],GPIO_Pin[4],0);
 80002c6:	68fb      	ldr	r3, [r7, #12]
 80002c8:	3310      	adds	r3, #16
 80002ca:	6818      	ldr	r0, [r3, #0]
 80002cc:	68bb      	ldr	r3, [r7, #8]
 80002ce:	3308      	adds	r3, #8
 80002d0:	881b      	ldrh	r3, [r3, #0]
 80002d2:	2200      	movs	r2, #0
 80002d4:	4619      	mov	r1, r3
 80002d6:	f001 fe2e 	bl	8001f36 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIO_Port[5],GPIO_Pin[5],1);
 80002da:	68fb      	ldr	r3, [r7, #12]
 80002dc:	3314      	adds	r3, #20
 80002de:	6818      	ldr	r0, [r3, #0]
 80002e0:	68bb      	ldr	r3, [r7, #8]
 80002e2:	330a      	adds	r3, #10
 80002e4:	881b      	ldrh	r3, [r3, #0]
 80002e6:	2201      	movs	r2, #1
 80002e8:	4619      	mov	r1, r3
 80002ea:	f001 fe24 	bl	8001f36 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIO_Port[6],GPIO_Pin[6],0);
 80002ee:	68fb      	ldr	r3, [r7, #12]
 80002f0:	3318      	adds	r3, #24
 80002f2:	6818      	ldr	r0, [r3, #0]
 80002f4:	68bb      	ldr	r3, [r7, #8]
 80002f6:	330c      	adds	r3, #12
 80002f8:	881b      	ldrh	r3, [r3, #0]
 80002fa:	2200      	movs	r2, #0
 80002fc:	4619      	mov	r1, r3
 80002fe:	f001 fe1a 	bl	8001f36 <HAL_GPIO_WritePin>
	}
	if(num==3){
 8000302:	687b      	ldr	r3, [r7, #4]
 8000304:	2b03      	cmp	r3, #3
 8000306:	d143      	bne.n	8000390 <display7SEG+0x244>
		HAL_GPIO_WritePin(GPIO_Port[0],GPIO_Pin[0],0);
 8000308:	68fb      	ldr	r3, [r7, #12]
 800030a:	6818      	ldr	r0, [r3, #0]
 800030c:	68bb      	ldr	r3, [r7, #8]
 800030e:	881b      	ldrh	r3, [r3, #0]
 8000310:	2200      	movs	r2, #0
 8000312:	4619      	mov	r1, r3
 8000314:	f001 fe0f 	bl	8001f36 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIO_Port[1],GPIO_Pin[1],0);
 8000318:	68fb      	ldr	r3, [r7, #12]
 800031a:	3304      	adds	r3, #4
 800031c:	6818      	ldr	r0, [r3, #0]
 800031e:	68bb      	ldr	r3, [r7, #8]
 8000320:	3302      	adds	r3, #2
 8000322:	881b      	ldrh	r3, [r3, #0]
 8000324:	2200      	movs	r2, #0
 8000326:	4619      	mov	r1, r3
 8000328:	f001 fe05 	bl	8001f36 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIO_Port[2],GPIO_Pin[2],0);
 800032c:	68fb      	ldr	r3, [r7, #12]
 800032e:	3308      	adds	r3, #8
 8000330:	6818      	ldr	r0, [r3, #0]
 8000332:	68bb      	ldr	r3, [r7, #8]
 8000334:	3304      	adds	r3, #4
 8000336:	881b      	ldrh	r3, [r3, #0]
 8000338:	2200      	movs	r2, #0
 800033a:	4619      	mov	r1, r3
 800033c:	f001 fdfb 	bl	8001f36 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIO_Port[3],GPIO_Pin[3],0);
 8000340:	68fb      	ldr	r3, [r7, #12]
 8000342:	330c      	adds	r3, #12
 8000344:	6818      	ldr	r0, [r3, #0]
 8000346:	68bb      	ldr	r3, [r7, #8]
 8000348:	3306      	adds	r3, #6
 800034a:	881b      	ldrh	r3, [r3, #0]
 800034c:	2200      	movs	r2, #0
 800034e:	4619      	mov	r1, r3
 8000350:	f001 fdf1 	bl	8001f36 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIO_Port[4],GPIO_Pin[4],1);
 8000354:	68fb      	ldr	r3, [r7, #12]
 8000356:	3310      	adds	r3, #16
 8000358:	6818      	ldr	r0, [r3, #0]
 800035a:	68bb      	ldr	r3, [r7, #8]
 800035c:	3308      	adds	r3, #8
 800035e:	881b      	ldrh	r3, [r3, #0]
 8000360:	2201      	movs	r2, #1
 8000362:	4619      	mov	r1, r3
 8000364:	f001 fde7 	bl	8001f36 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIO_Port[5],GPIO_Pin[5],1);
 8000368:	68fb      	ldr	r3, [r7, #12]
 800036a:	3314      	adds	r3, #20
 800036c:	6818      	ldr	r0, [r3, #0]
 800036e:	68bb      	ldr	r3, [r7, #8]
 8000370:	330a      	adds	r3, #10
 8000372:	881b      	ldrh	r3, [r3, #0]
 8000374:	2201      	movs	r2, #1
 8000376:	4619      	mov	r1, r3
 8000378:	f001 fddd 	bl	8001f36 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIO_Port[6],GPIO_Pin[6],0);
 800037c:	68fb      	ldr	r3, [r7, #12]
 800037e:	3318      	adds	r3, #24
 8000380:	6818      	ldr	r0, [r3, #0]
 8000382:	68bb      	ldr	r3, [r7, #8]
 8000384:	330c      	adds	r3, #12
 8000386:	881b      	ldrh	r3, [r3, #0]
 8000388:	2200      	movs	r2, #0
 800038a:	4619      	mov	r1, r3
 800038c:	f001 fdd3 	bl	8001f36 <HAL_GPIO_WritePin>
	}
	if(num==4){
 8000390:	687b      	ldr	r3, [r7, #4]
 8000392:	2b04      	cmp	r3, #4
 8000394:	d143      	bne.n	800041e <display7SEG+0x2d2>
		HAL_GPIO_WritePin(GPIO_Port[0],GPIO_Pin[0],1);
 8000396:	68fb      	ldr	r3, [r7, #12]
 8000398:	6818      	ldr	r0, [r3, #0]
 800039a:	68bb      	ldr	r3, [r7, #8]
 800039c:	881b      	ldrh	r3, [r3, #0]
 800039e:	2201      	movs	r2, #1
 80003a0:	4619      	mov	r1, r3
 80003a2:	f001 fdc8 	bl	8001f36 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIO_Port[1],GPIO_Pin[1],0);
 80003a6:	68fb      	ldr	r3, [r7, #12]
 80003a8:	3304      	adds	r3, #4
 80003aa:	6818      	ldr	r0, [r3, #0]
 80003ac:	68bb      	ldr	r3, [r7, #8]
 80003ae:	3302      	adds	r3, #2
 80003b0:	881b      	ldrh	r3, [r3, #0]
 80003b2:	2200      	movs	r2, #0
 80003b4:	4619      	mov	r1, r3
 80003b6:	f001 fdbe 	bl	8001f36 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIO_Port[2],GPIO_Pin[2],0);
 80003ba:	68fb      	ldr	r3, [r7, #12]
 80003bc:	3308      	adds	r3, #8
 80003be:	6818      	ldr	r0, [r3, #0]
 80003c0:	68bb      	ldr	r3, [r7, #8]
 80003c2:	3304      	adds	r3, #4
 80003c4:	881b      	ldrh	r3, [r3, #0]
 80003c6:	2200      	movs	r2, #0
 80003c8:	4619      	mov	r1, r3
 80003ca:	f001 fdb4 	bl	8001f36 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIO_Port[3],GPIO_Pin[3],1);
 80003ce:	68fb      	ldr	r3, [r7, #12]
 80003d0:	330c      	adds	r3, #12
 80003d2:	6818      	ldr	r0, [r3, #0]
 80003d4:	68bb      	ldr	r3, [r7, #8]
 80003d6:	3306      	adds	r3, #6
 80003d8:	881b      	ldrh	r3, [r3, #0]
 80003da:	2201      	movs	r2, #1
 80003dc:	4619      	mov	r1, r3
 80003de:	f001 fdaa 	bl	8001f36 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIO_Port[4],GPIO_Pin[4],1);
 80003e2:	68fb      	ldr	r3, [r7, #12]
 80003e4:	3310      	adds	r3, #16
 80003e6:	6818      	ldr	r0, [r3, #0]
 80003e8:	68bb      	ldr	r3, [r7, #8]
 80003ea:	3308      	adds	r3, #8
 80003ec:	881b      	ldrh	r3, [r3, #0]
 80003ee:	2201      	movs	r2, #1
 80003f0:	4619      	mov	r1, r3
 80003f2:	f001 fda0 	bl	8001f36 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIO_Port[5],GPIO_Pin[5],0);
 80003f6:	68fb      	ldr	r3, [r7, #12]
 80003f8:	3314      	adds	r3, #20
 80003fa:	6818      	ldr	r0, [r3, #0]
 80003fc:	68bb      	ldr	r3, [r7, #8]
 80003fe:	330a      	adds	r3, #10
 8000400:	881b      	ldrh	r3, [r3, #0]
 8000402:	2200      	movs	r2, #0
 8000404:	4619      	mov	r1, r3
 8000406:	f001 fd96 	bl	8001f36 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIO_Port[6],GPIO_Pin[6],0);
 800040a:	68fb      	ldr	r3, [r7, #12]
 800040c:	3318      	adds	r3, #24
 800040e:	6818      	ldr	r0, [r3, #0]
 8000410:	68bb      	ldr	r3, [r7, #8]
 8000412:	330c      	adds	r3, #12
 8000414:	881b      	ldrh	r3, [r3, #0]
 8000416:	2200      	movs	r2, #0
 8000418:	4619      	mov	r1, r3
 800041a:	f001 fd8c 	bl	8001f36 <HAL_GPIO_WritePin>
	}
	if(num==5){
 800041e:	687b      	ldr	r3, [r7, #4]
 8000420:	2b05      	cmp	r3, #5
 8000422:	d143      	bne.n	80004ac <display7SEG+0x360>
		HAL_GPIO_WritePin(GPIO_Port[0],GPIO_Pin[0],0);
 8000424:	68fb      	ldr	r3, [r7, #12]
 8000426:	6818      	ldr	r0, [r3, #0]
 8000428:	68bb      	ldr	r3, [r7, #8]
 800042a:	881b      	ldrh	r3, [r3, #0]
 800042c:	2200      	movs	r2, #0
 800042e:	4619      	mov	r1, r3
 8000430:	f001 fd81 	bl	8001f36 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIO_Port[1],GPIO_Pin[1],1);
 8000434:	68fb      	ldr	r3, [r7, #12]
 8000436:	3304      	adds	r3, #4
 8000438:	6818      	ldr	r0, [r3, #0]
 800043a:	68bb      	ldr	r3, [r7, #8]
 800043c:	3302      	adds	r3, #2
 800043e:	881b      	ldrh	r3, [r3, #0]
 8000440:	2201      	movs	r2, #1
 8000442:	4619      	mov	r1, r3
 8000444:	f001 fd77 	bl	8001f36 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIO_Port[2],GPIO_Pin[2],0);
 8000448:	68fb      	ldr	r3, [r7, #12]
 800044a:	3308      	adds	r3, #8
 800044c:	6818      	ldr	r0, [r3, #0]
 800044e:	68bb      	ldr	r3, [r7, #8]
 8000450:	3304      	adds	r3, #4
 8000452:	881b      	ldrh	r3, [r3, #0]
 8000454:	2200      	movs	r2, #0
 8000456:	4619      	mov	r1, r3
 8000458:	f001 fd6d 	bl	8001f36 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIO_Port[3],GPIO_Pin[3],0);
 800045c:	68fb      	ldr	r3, [r7, #12]
 800045e:	330c      	adds	r3, #12
 8000460:	6818      	ldr	r0, [r3, #0]
 8000462:	68bb      	ldr	r3, [r7, #8]
 8000464:	3306      	adds	r3, #6
 8000466:	881b      	ldrh	r3, [r3, #0]
 8000468:	2200      	movs	r2, #0
 800046a:	4619      	mov	r1, r3
 800046c:	f001 fd63 	bl	8001f36 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIO_Port[4],GPIO_Pin[4],1);
 8000470:	68fb      	ldr	r3, [r7, #12]
 8000472:	3310      	adds	r3, #16
 8000474:	6818      	ldr	r0, [r3, #0]
 8000476:	68bb      	ldr	r3, [r7, #8]
 8000478:	3308      	adds	r3, #8
 800047a:	881b      	ldrh	r3, [r3, #0]
 800047c:	2201      	movs	r2, #1
 800047e:	4619      	mov	r1, r3
 8000480:	f001 fd59 	bl	8001f36 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIO_Port[5],GPIO_Pin[5],0);
 8000484:	68fb      	ldr	r3, [r7, #12]
 8000486:	3314      	adds	r3, #20
 8000488:	6818      	ldr	r0, [r3, #0]
 800048a:	68bb      	ldr	r3, [r7, #8]
 800048c:	330a      	adds	r3, #10
 800048e:	881b      	ldrh	r3, [r3, #0]
 8000490:	2200      	movs	r2, #0
 8000492:	4619      	mov	r1, r3
 8000494:	f001 fd4f 	bl	8001f36 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIO_Port[6],GPIO_Pin[6],0);
 8000498:	68fb      	ldr	r3, [r7, #12]
 800049a:	3318      	adds	r3, #24
 800049c:	6818      	ldr	r0, [r3, #0]
 800049e:	68bb      	ldr	r3, [r7, #8]
 80004a0:	330c      	adds	r3, #12
 80004a2:	881b      	ldrh	r3, [r3, #0]
 80004a4:	2200      	movs	r2, #0
 80004a6:	4619      	mov	r1, r3
 80004a8:	f001 fd45 	bl	8001f36 <HAL_GPIO_WritePin>
	}
	if(num==6){
 80004ac:	687b      	ldr	r3, [r7, #4]
 80004ae:	2b06      	cmp	r3, #6
 80004b0:	d143      	bne.n	800053a <display7SEG+0x3ee>
		HAL_GPIO_WritePin(GPIO_Port[0],GPIO_Pin[0],0);
 80004b2:	68fb      	ldr	r3, [r7, #12]
 80004b4:	6818      	ldr	r0, [r3, #0]
 80004b6:	68bb      	ldr	r3, [r7, #8]
 80004b8:	881b      	ldrh	r3, [r3, #0]
 80004ba:	2200      	movs	r2, #0
 80004bc:	4619      	mov	r1, r3
 80004be:	f001 fd3a 	bl	8001f36 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIO_Port[1],GPIO_Pin[1],1);
 80004c2:	68fb      	ldr	r3, [r7, #12]
 80004c4:	3304      	adds	r3, #4
 80004c6:	6818      	ldr	r0, [r3, #0]
 80004c8:	68bb      	ldr	r3, [r7, #8]
 80004ca:	3302      	adds	r3, #2
 80004cc:	881b      	ldrh	r3, [r3, #0]
 80004ce:	2201      	movs	r2, #1
 80004d0:	4619      	mov	r1, r3
 80004d2:	f001 fd30 	bl	8001f36 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIO_Port[2],GPIO_Pin[2],0);
 80004d6:	68fb      	ldr	r3, [r7, #12]
 80004d8:	3308      	adds	r3, #8
 80004da:	6818      	ldr	r0, [r3, #0]
 80004dc:	68bb      	ldr	r3, [r7, #8]
 80004de:	3304      	adds	r3, #4
 80004e0:	881b      	ldrh	r3, [r3, #0]
 80004e2:	2200      	movs	r2, #0
 80004e4:	4619      	mov	r1, r3
 80004e6:	f001 fd26 	bl	8001f36 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIO_Port[3],GPIO_Pin[3],0);
 80004ea:	68fb      	ldr	r3, [r7, #12]
 80004ec:	330c      	adds	r3, #12
 80004ee:	6818      	ldr	r0, [r3, #0]
 80004f0:	68bb      	ldr	r3, [r7, #8]
 80004f2:	3306      	adds	r3, #6
 80004f4:	881b      	ldrh	r3, [r3, #0]
 80004f6:	2200      	movs	r2, #0
 80004f8:	4619      	mov	r1, r3
 80004fa:	f001 fd1c 	bl	8001f36 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIO_Port[4],GPIO_Pin[4],0);
 80004fe:	68fb      	ldr	r3, [r7, #12]
 8000500:	3310      	adds	r3, #16
 8000502:	6818      	ldr	r0, [r3, #0]
 8000504:	68bb      	ldr	r3, [r7, #8]
 8000506:	3308      	adds	r3, #8
 8000508:	881b      	ldrh	r3, [r3, #0]
 800050a:	2200      	movs	r2, #0
 800050c:	4619      	mov	r1, r3
 800050e:	f001 fd12 	bl	8001f36 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIO_Port[5],GPIO_Pin[5],0);
 8000512:	68fb      	ldr	r3, [r7, #12]
 8000514:	3314      	adds	r3, #20
 8000516:	6818      	ldr	r0, [r3, #0]
 8000518:	68bb      	ldr	r3, [r7, #8]
 800051a:	330a      	adds	r3, #10
 800051c:	881b      	ldrh	r3, [r3, #0]
 800051e:	2200      	movs	r2, #0
 8000520:	4619      	mov	r1, r3
 8000522:	f001 fd08 	bl	8001f36 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIO_Port[6],GPIO_Pin[6],0);
 8000526:	68fb      	ldr	r3, [r7, #12]
 8000528:	3318      	adds	r3, #24
 800052a:	6818      	ldr	r0, [r3, #0]
 800052c:	68bb      	ldr	r3, [r7, #8]
 800052e:	330c      	adds	r3, #12
 8000530:	881b      	ldrh	r3, [r3, #0]
 8000532:	2200      	movs	r2, #0
 8000534:	4619      	mov	r1, r3
 8000536:	f001 fcfe 	bl	8001f36 <HAL_GPIO_WritePin>
	}
	if(num==7){
 800053a:	687b      	ldr	r3, [r7, #4]
 800053c:	2b07      	cmp	r3, #7
 800053e:	d143      	bne.n	80005c8 <display7SEG+0x47c>
		HAL_GPIO_WritePin(GPIO_Port[0],GPIO_Pin[0],0);
 8000540:	68fb      	ldr	r3, [r7, #12]
 8000542:	6818      	ldr	r0, [r3, #0]
 8000544:	68bb      	ldr	r3, [r7, #8]
 8000546:	881b      	ldrh	r3, [r3, #0]
 8000548:	2200      	movs	r2, #0
 800054a:	4619      	mov	r1, r3
 800054c:	f001 fcf3 	bl	8001f36 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIO_Port[1],GPIO_Pin[1],0);
 8000550:	68fb      	ldr	r3, [r7, #12]
 8000552:	3304      	adds	r3, #4
 8000554:	6818      	ldr	r0, [r3, #0]
 8000556:	68bb      	ldr	r3, [r7, #8]
 8000558:	3302      	adds	r3, #2
 800055a:	881b      	ldrh	r3, [r3, #0]
 800055c:	2200      	movs	r2, #0
 800055e:	4619      	mov	r1, r3
 8000560:	f001 fce9 	bl	8001f36 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIO_Port[2],GPIO_Pin[2],0);
 8000564:	68fb      	ldr	r3, [r7, #12]
 8000566:	3308      	adds	r3, #8
 8000568:	6818      	ldr	r0, [r3, #0]
 800056a:	68bb      	ldr	r3, [r7, #8]
 800056c:	3304      	adds	r3, #4
 800056e:	881b      	ldrh	r3, [r3, #0]
 8000570:	2200      	movs	r2, #0
 8000572:	4619      	mov	r1, r3
 8000574:	f001 fcdf 	bl	8001f36 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIO_Port[3],GPIO_Pin[3],1);
 8000578:	68fb      	ldr	r3, [r7, #12]
 800057a:	330c      	adds	r3, #12
 800057c:	6818      	ldr	r0, [r3, #0]
 800057e:	68bb      	ldr	r3, [r7, #8]
 8000580:	3306      	adds	r3, #6
 8000582:	881b      	ldrh	r3, [r3, #0]
 8000584:	2201      	movs	r2, #1
 8000586:	4619      	mov	r1, r3
 8000588:	f001 fcd5 	bl	8001f36 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIO_Port[4],GPIO_Pin[4],1);
 800058c:	68fb      	ldr	r3, [r7, #12]
 800058e:	3310      	adds	r3, #16
 8000590:	6818      	ldr	r0, [r3, #0]
 8000592:	68bb      	ldr	r3, [r7, #8]
 8000594:	3308      	adds	r3, #8
 8000596:	881b      	ldrh	r3, [r3, #0]
 8000598:	2201      	movs	r2, #1
 800059a:	4619      	mov	r1, r3
 800059c:	f001 fccb 	bl	8001f36 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIO_Port[5],GPIO_Pin[5],1);
 80005a0:	68fb      	ldr	r3, [r7, #12]
 80005a2:	3314      	adds	r3, #20
 80005a4:	6818      	ldr	r0, [r3, #0]
 80005a6:	68bb      	ldr	r3, [r7, #8]
 80005a8:	330a      	adds	r3, #10
 80005aa:	881b      	ldrh	r3, [r3, #0]
 80005ac:	2201      	movs	r2, #1
 80005ae:	4619      	mov	r1, r3
 80005b0:	f001 fcc1 	bl	8001f36 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIO_Port[6],GPIO_Pin[6],1);
 80005b4:	68fb      	ldr	r3, [r7, #12]
 80005b6:	3318      	adds	r3, #24
 80005b8:	6818      	ldr	r0, [r3, #0]
 80005ba:	68bb      	ldr	r3, [r7, #8]
 80005bc:	330c      	adds	r3, #12
 80005be:	881b      	ldrh	r3, [r3, #0]
 80005c0:	2201      	movs	r2, #1
 80005c2:	4619      	mov	r1, r3
 80005c4:	f001 fcb7 	bl	8001f36 <HAL_GPIO_WritePin>
	}
	if(num==8){
 80005c8:	687b      	ldr	r3, [r7, #4]
 80005ca:	2b08      	cmp	r3, #8
 80005cc:	d143      	bne.n	8000656 <display7SEG+0x50a>
		HAL_GPIO_WritePin(GPIO_Port[0],GPIO_Pin[0],0);
 80005ce:	68fb      	ldr	r3, [r7, #12]
 80005d0:	6818      	ldr	r0, [r3, #0]
 80005d2:	68bb      	ldr	r3, [r7, #8]
 80005d4:	881b      	ldrh	r3, [r3, #0]
 80005d6:	2200      	movs	r2, #0
 80005d8:	4619      	mov	r1, r3
 80005da:	f001 fcac 	bl	8001f36 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIO_Port[1],GPIO_Pin[1],0);
 80005de:	68fb      	ldr	r3, [r7, #12]
 80005e0:	3304      	adds	r3, #4
 80005e2:	6818      	ldr	r0, [r3, #0]
 80005e4:	68bb      	ldr	r3, [r7, #8]
 80005e6:	3302      	adds	r3, #2
 80005e8:	881b      	ldrh	r3, [r3, #0]
 80005ea:	2200      	movs	r2, #0
 80005ec:	4619      	mov	r1, r3
 80005ee:	f001 fca2 	bl	8001f36 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIO_Port[2],GPIO_Pin[2],0);
 80005f2:	68fb      	ldr	r3, [r7, #12]
 80005f4:	3308      	adds	r3, #8
 80005f6:	6818      	ldr	r0, [r3, #0]
 80005f8:	68bb      	ldr	r3, [r7, #8]
 80005fa:	3304      	adds	r3, #4
 80005fc:	881b      	ldrh	r3, [r3, #0]
 80005fe:	2200      	movs	r2, #0
 8000600:	4619      	mov	r1, r3
 8000602:	f001 fc98 	bl	8001f36 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIO_Port[3],GPIO_Pin[3],0);
 8000606:	68fb      	ldr	r3, [r7, #12]
 8000608:	330c      	adds	r3, #12
 800060a:	6818      	ldr	r0, [r3, #0]
 800060c:	68bb      	ldr	r3, [r7, #8]
 800060e:	3306      	adds	r3, #6
 8000610:	881b      	ldrh	r3, [r3, #0]
 8000612:	2200      	movs	r2, #0
 8000614:	4619      	mov	r1, r3
 8000616:	f001 fc8e 	bl	8001f36 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIO_Port[4],GPIO_Pin[4],0);
 800061a:	68fb      	ldr	r3, [r7, #12]
 800061c:	3310      	adds	r3, #16
 800061e:	6818      	ldr	r0, [r3, #0]
 8000620:	68bb      	ldr	r3, [r7, #8]
 8000622:	3308      	adds	r3, #8
 8000624:	881b      	ldrh	r3, [r3, #0]
 8000626:	2200      	movs	r2, #0
 8000628:	4619      	mov	r1, r3
 800062a:	f001 fc84 	bl	8001f36 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIO_Port[5],GPIO_Pin[5],0);
 800062e:	68fb      	ldr	r3, [r7, #12]
 8000630:	3314      	adds	r3, #20
 8000632:	6818      	ldr	r0, [r3, #0]
 8000634:	68bb      	ldr	r3, [r7, #8]
 8000636:	330a      	adds	r3, #10
 8000638:	881b      	ldrh	r3, [r3, #0]
 800063a:	2200      	movs	r2, #0
 800063c:	4619      	mov	r1, r3
 800063e:	f001 fc7a 	bl	8001f36 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIO_Port[6],GPIO_Pin[6],0);
 8000642:	68fb      	ldr	r3, [r7, #12]
 8000644:	3318      	adds	r3, #24
 8000646:	6818      	ldr	r0, [r3, #0]
 8000648:	68bb      	ldr	r3, [r7, #8]
 800064a:	330c      	adds	r3, #12
 800064c:	881b      	ldrh	r3, [r3, #0]
 800064e:	2200      	movs	r2, #0
 8000650:	4619      	mov	r1, r3
 8000652:	f001 fc70 	bl	8001f36 <HAL_GPIO_WritePin>
	}
	if(num==9){
 8000656:	687b      	ldr	r3, [r7, #4]
 8000658:	2b09      	cmp	r3, #9
 800065a:	d143      	bne.n	80006e4 <display7SEG+0x598>
		HAL_GPIO_WritePin(GPIO_Port[0],GPIO_Pin[0],0);
 800065c:	68fb      	ldr	r3, [r7, #12]
 800065e:	6818      	ldr	r0, [r3, #0]
 8000660:	68bb      	ldr	r3, [r7, #8]
 8000662:	881b      	ldrh	r3, [r3, #0]
 8000664:	2200      	movs	r2, #0
 8000666:	4619      	mov	r1, r3
 8000668:	f001 fc65 	bl	8001f36 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIO_Port[1],GPIO_Pin[1],0);
 800066c:	68fb      	ldr	r3, [r7, #12]
 800066e:	3304      	adds	r3, #4
 8000670:	6818      	ldr	r0, [r3, #0]
 8000672:	68bb      	ldr	r3, [r7, #8]
 8000674:	3302      	adds	r3, #2
 8000676:	881b      	ldrh	r3, [r3, #0]
 8000678:	2200      	movs	r2, #0
 800067a:	4619      	mov	r1, r3
 800067c:	f001 fc5b 	bl	8001f36 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIO_Port[2],GPIO_Pin[2],0);
 8000680:	68fb      	ldr	r3, [r7, #12]
 8000682:	3308      	adds	r3, #8
 8000684:	6818      	ldr	r0, [r3, #0]
 8000686:	68bb      	ldr	r3, [r7, #8]
 8000688:	3304      	adds	r3, #4
 800068a:	881b      	ldrh	r3, [r3, #0]
 800068c:	2200      	movs	r2, #0
 800068e:	4619      	mov	r1, r3
 8000690:	f001 fc51 	bl	8001f36 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIO_Port[3],GPIO_Pin[3],0);
 8000694:	68fb      	ldr	r3, [r7, #12]
 8000696:	330c      	adds	r3, #12
 8000698:	6818      	ldr	r0, [r3, #0]
 800069a:	68bb      	ldr	r3, [r7, #8]
 800069c:	3306      	adds	r3, #6
 800069e:	881b      	ldrh	r3, [r3, #0]
 80006a0:	2200      	movs	r2, #0
 80006a2:	4619      	mov	r1, r3
 80006a4:	f001 fc47 	bl	8001f36 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIO_Port[4],GPIO_Pin[4],1);
 80006a8:	68fb      	ldr	r3, [r7, #12]
 80006aa:	3310      	adds	r3, #16
 80006ac:	6818      	ldr	r0, [r3, #0]
 80006ae:	68bb      	ldr	r3, [r7, #8]
 80006b0:	3308      	adds	r3, #8
 80006b2:	881b      	ldrh	r3, [r3, #0]
 80006b4:	2201      	movs	r2, #1
 80006b6:	4619      	mov	r1, r3
 80006b8:	f001 fc3d 	bl	8001f36 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIO_Port[5],GPIO_Pin[5],0);
 80006bc:	68fb      	ldr	r3, [r7, #12]
 80006be:	3314      	adds	r3, #20
 80006c0:	6818      	ldr	r0, [r3, #0]
 80006c2:	68bb      	ldr	r3, [r7, #8]
 80006c4:	330a      	adds	r3, #10
 80006c6:	881b      	ldrh	r3, [r3, #0]
 80006c8:	2200      	movs	r2, #0
 80006ca:	4619      	mov	r1, r3
 80006cc:	f001 fc33 	bl	8001f36 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIO_Port[6],GPIO_Pin[6],0);
 80006d0:	68fb      	ldr	r3, [r7, #12]
 80006d2:	3318      	adds	r3, #24
 80006d4:	6818      	ldr	r0, [r3, #0]
 80006d6:	68bb      	ldr	r3, [r7, #8]
 80006d8:	330c      	adds	r3, #12
 80006da:	881b      	ldrh	r3, [r3, #0]
 80006dc:	2200      	movs	r2, #0
 80006de:	4619      	mov	r1, r3
 80006e0:	f001 fc29 	bl	8001f36 <HAL_GPIO_WritePin>
	}
}
 80006e4:	bf00      	nop
 80006e6:	3710      	adds	r7, #16
 80006e8:	46bd      	mov	sp, r7
 80006ea:	bd80      	pop	{r7, pc}

080006ec <setTimer1>:
int counter4;
int timer4_flag;

int TIMER_CYCLE=10;

void setTimer1(int duration){
 80006ec:	b480      	push	{r7}
 80006ee:	b083      	sub	sp, #12
 80006f0:	af00      	add	r7, sp, #0
 80006f2:	6078      	str	r0, [r7, #4]
	counter1=duration/TIMER_CYCLE;
 80006f4:	4b07      	ldr	r3, [pc, #28]	; (8000714 <setTimer1+0x28>)
 80006f6:	681b      	ldr	r3, [r3, #0]
 80006f8:	687a      	ldr	r2, [r7, #4]
 80006fa:	fb92 f3f3 	sdiv	r3, r2, r3
 80006fe:	4a06      	ldr	r2, [pc, #24]	; (8000718 <setTimer1+0x2c>)
 8000700:	6013      	str	r3, [r2, #0]
	timer1_flag=0;
 8000702:	4b06      	ldr	r3, [pc, #24]	; (800071c <setTimer1+0x30>)
 8000704:	2200      	movs	r2, #0
 8000706:	601a      	str	r2, [r3, #0]
}
 8000708:	bf00      	nop
 800070a:	370c      	adds	r7, #12
 800070c:	46bd      	mov	sp, r7
 800070e:	bc80      	pop	{r7}
 8000710:	4770      	bx	lr
 8000712:	bf00      	nop
 8000714:	20000000 	.word	0x20000000
 8000718:	200000ac 	.word	0x200000ac
 800071c:	200000b0 	.word	0x200000b0

08000720 <setTimer2>:

void setTimer2(int duration){
 8000720:	b480      	push	{r7}
 8000722:	b083      	sub	sp, #12
 8000724:	af00      	add	r7, sp, #0
 8000726:	6078      	str	r0, [r7, #4]
	counter2=duration/TIMER_CYCLE;
 8000728:	4b07      	ldr	r3, [pc, #28]	; (8000748 <setTimer2+0x28>)
 800072a:	681b      	ldr	r3, [r3, #0]
 800072c:	687a      	ldr	r2, [r7, #4]
 800072e:	fb92 f3f3 	sdiv	r3, r2, r3
 8000732:	4a06      	ldr	r2, [pc, #24]	; (800074c <setTimer2+0x2c>)
 8000734:	6013      	str	r3, [r2, #0]
	timer2_flag=0;
 8000736:	4b06      	ldr	r3, [pc, #24]	; (8000750 <setTimer2+0x30>)
 8000738:	2200      	movs	r2, #0
 800073a:	601a      	str	r2, [r3, #0]
}
 800073c:	bf00      	nop
 800073e:	370c      	adds	r7, #12
 8000740:	46bd      	mov	sp, r7
 8000742:	bc80      	pop	{r7}
 8000744:	4770      	bx	lr
 8000746:	bf00      	nop
 8000748:	20000000 	.word	0x20000000
 800074c:	200000b4 	.word	0x200000b4
 8000750:	200000b8 	.word	0x200000b8

08000754 <setTimer3>:

void setTimer3(int duration){
 8000754:	b480      	push	{r7}
 8000756:	b083      	sub	sp, #12
 8000758:	af00      	add	r7, sp, #0
 800075a:	6078      	str	r0, [r7, #4]
	counter3=duration/TIMER_CYCLE;
 800075c:	4b07      	ldr	r3, [pc, #28]	; (800077c <setTimer3+0x28>)
 800075e:	681b      	ldr	r3, [r3, #0]
 8000760:	687a      	ldr	r2, [r7, #4]
 8000762:	fb92 f3f3 	sdiv	r3, r2, r3
 8000766:	4a06      	ldr	r2, [pc, #24]	; (8000780 <setTimer3+0x2c>)
 8000768:	6013      	str	r3, [r2, #0]
	timer3_flag=0;
 800076a:	4b06      	ldr	r3, [pc, #24]	; (8000784 <setTimer3+0x30>)
 800076c:	2200      	movs	r2, #0
 800076e:	601a      	str	r2, [r3, #0]
}
 8000770:	bf00      	nop
 8000772:	370c      	adds	r7, #12
 8000774:	46bd      	mov	sp, r7
 8000776:	bc80      	pop	{r7}
 8000778:	4770      	bx	lr
 800077a:	bf00      	nop
 800077c:	20000000 	.word	0x20000000
 8000780:	200000bc 	.word	0x200000bc
 8000784:	200000c0 	.word	0x200000c0

08000788 <setTimer4>:

void setTimer4(int duration){
 8000788:	b480      	push	{r7}
 800078a:	b083      	sub	sp, #12
 800078c:	af00      	add	r7, sp, #0
 800078e:	6078      	str	r0, [r7, #4]
	counter4=duration/TIMER_CYCLE;
 8000790:	4b07      	ldr	r3, [pc, #28]	; (80007b0 <setTimer4+0x28>)
 8000792:	681b      	ldr	r3, [r3, #0]
 8000794:	687a      	ldr	r2, [r7, #4]
 8000796:	fb92 f3f3 	sdiv	r3, r2, r3
 800079a:	4a06      	ldr	r2, [pc, #24]	; (80007b4 <setTimer4+0x2c>)
 800079c:	6013      	str	r3, [r2, #0]
	timer4_flag=0;
 800079e:	4b06      	ldr	r3, [pc, #24]	; (80007b8 <setTimer4+0x30>)
 80007a0:	2200      	movs	r2, #0
 80007a2:	601a      	str	r2, [r3, #0]
}
 80007a4:	bf00      	nop
 80007a6:	370c      	adds	r7, #12
 80007a8:	46bd      	mov	sp, r7
 80007aa:	bc80      	pop	{r7}
 80007ac:	4770      	bx	lr
 80007ae:	bf00      	nop
 80007b0:	20000000 	.word	0x20000000
 80007b4:	200000c4 	.word	0x200000c4
 80007b8:	200000c8 	.word	0x200000c8

080007bc <TimerRun>:

void TimerRun(){
 80007bc:	b480      	push	{r7}
 80007be:	af00      	add	r7, sp, #0
	if(counter1>0){
 80007c0:	4b21      	ldr	r3, [pc, #132]	; (8000848 <TimerRun+0x8c>)
 80007c2:	681b      	ldr	r3, [r3, #0]
 80007c4:	2b00      	cmp	r3, #0
 80007c6:	dd0b      	ble.n	80007e0 <TimerRun+0x24>
		counter1--;
 80007c8:	4b1f      	ldr	r3, [pc, #124]	; (8000848 <TimerRun+0x8c>)
 80007ca:	681b      	ldr	r3, [r3, #0]
 80007cc:	3b01      	subs	r3, #1
 80007ce:	4a1e      	ldr	r2, [pc, #120]	; (8000848 <TimerRun+0x8c>)
 80007d0:	6013      	str	r3, [r2, #0]
		if(counter1<=0){
 80007d2:	4b1d      	ldr	r3, [pc, #116]	; (8000848 <TimerRun+0x8c>)
 80007d4:	681b      	ldr	r3, [r3, #0]
 80007d6:	2b00      	cmp	r3, #0
 80007d8:	dc02      	bgt.n	80007e0 <TimerRun+0x24>
			timer1_flag=1;
 80007da:	4b1c      	ldr	r3, [pc, #112]	; (800084c <TimerRun+0x90>)
 80007dc:	2201      	movs	r2, #1
 80007de:	601a      	str	r2, [r3, #0]
		}
	}

	if(counter2>0){
 80007e0:	4b1b      	ldr	r3, [pc, #108]	; (8000850 <TimerRun+0x94>)
 80007e2:	681b      	ldr	r3, [r3, #0]
 80007e4:	2b00      	cmp	r3, #0
 80007e6:	dd0b      	ble.n	8000800 <TimerRun+0x44>
		counter2--;
 80007e8:	4b19      	ldr	r3, [pc, #100]	; (8000850 <TimerRun+0x94>)
 80007ea:	681b      	ldr	r3, [r3, #0]
 80007ec:	3b01      	subs	r3, #1
 80007ee:	4a18      	ldr	r2, [pc, #96]	; (8000850 <TimerRun+0x94>)
 80007f0:	6013      	str	r3, [r2, #0]
		if(counter2<=0){
 80007f2:	4b17      	ldr	r3, [pc, #92]	; (8000850 <TimerRun+0x94>)
 80007f4:	681b      	ldr	r3, [r3, #0]
 80007f6:	2b00      	cmp	r3, #0
 80007f8:	dc02      	bgt.n	8000800 <TimerRun+0x44>
			timer2_flag=1;
 80007fa:	4b16      	ldr	r3, [pc, #88]	; (8000854 <TimerRun+0x98>)
 80007fc:	2201      	movs	r2, #1
 80007fe:	601a      	str	r2, [r3, #0]
		}
	}

	if(counter3>0){
 8000800:	4b15      	ldr	r3, [pc, #84]	; (8000858 <TimerRun+0x9c>)
 8000802:	681b      	ldr	r3, [r3, #0]
 8000804:	2b00      	cmp	r3, #0
 8000806:	dd0b      	ble.n	8000820 <TimerRun+0x64>
		counter3--;
 8000808:	4b13      	ldr	r3, [pc, #76]	; (8000858 <TimerRun+0x9c>)
 800080a:	681b      	ldr	r3, [r3, #0]
 800080c:	3b01      	subs	r3, #1
 800080e:	4a12      	ldr	r2, [pc, #72]	; (8000858 <TimerRun+0x9c>)
 8000810:	6013      	str	r3, [r2, #0]
		if(counter3<=0){
 8000812:	4b11      	ldr	r3, [pc, #68]	; (8000858 <TimerRun+0x9c>)
 8000814:	681b      	ldr	r3, [r3, #0]
 8000816:	2b00      	cmp	r3, #0
 8000818:	dc02      	bgt.n	8000820 <TimerRun+0x64>
			timer3_flag=1;
 800081a:	4b10      	ldr	r3, [pc, #64]	; (800085c <TimerRun+0xa0>)
 800081c:	2201      	movs	r2, #1
 800081e:	601a      	str	r2, [r3, #0]
		}
	}

	if(counter4>0){
 8000820:	4b0f      	ldr	r3, [pc, #60]	; (8000860 <TimerRun+0xa4>)
 8000822:	681b      	ldr	r3, [r3, #0]
 8000824:	2b00      	cmp	r3, #0
 8000826:	dd0b      	ble.n	8000840 <TimerRun+0x84>
		counter4--;
 8000828:	4b0d      	ldr	r3, [pc, #52]	; (8000860 <TimerRun+0xa4>)
 800082a:	681b      	ldr	r3, [r3, #0]
 800082c:	3b01      	subs	r3, #1
 800082e:	4a0c      	ldr	r2, [pc, #48]	; (8000860 <TimerRun+0xa4>)
 8000830:	6013      	str	r3, [r2, #0]
		if(counter4<=0){
 8000832:	4b0b      	ldr	r3, [pc, #44]	; (8000860 <TimerRun+0xa4>)
 8000834:	681b      	ldr	r3, [r3, #0]
 8000836:	2b00      	cmp	r3, #0
 8000838:	dc02      	bgt.n	8000840 <TimerRun+0x84>
			timer4_flag=1;
 800083a:	4b0a      	ldr	r3, [pc, #40]	; (8000864 <TimerRun+0xa8>)
 800083c:	2201      	movs	r2, #1
 800083e:	601a      	str	r2, [r3, #0]
		}
	}
}
 8000840:	bf00      	nop
 8000842:	46bd      	mov	sp, r7
 8000844:	bc80      	pop	{r7}
 8000846:	4770      	bx	lr
 8000848:	200000ac 	.word	0x200000ac
 800084c:	200000b0 	.word	0x200000b0
 8000850:	200000b4 	.word	0x200000b4
 8000854:	200000b8 	.word	0x200000b8
 8000858:	200000bc 	.word	0x200000bc
 800085c:	200000c0 	.word	0x200000c0
 8000860:	200000c4 	.word	0x200000c4
 8000864:	200000c8 	.word	0x200000c8

08000868 <button1_reading>:
/* 	BUTTON1 PARAMETER START */
int debounceButton1Buffer2=NORMAL_STATE;
int debounceButton1Buffer1=NORMAL_STATE;
int button1Buffer=NORMAL_STATE;
/* 	BUTTON1 PARAMETER END */
void button1_reading(){
 8000868:	b580      	push	{r7, lr}
 800086a:	af00      	add	r7, sp, #0
	debounceButton1Buffer2 =debounceButton1Buffer1;
 800086c:	4b0c      	ldr	r3, [pc, #48]	; (80008a0 <button1_reading+0x38>)
 800086e:	681b      	ldr	r3, [r3, #0]
 8000870:	4a0c      	ldr	r2, [pc, #48]	; (80008a4 <button1_reading+0x3c>)
 8000872:	6013      	str	r3, [r2, #0]
	debounceButton1Buffer1 = HAL_GPIO_ReadPin(Button1_GPIO_Port, Button1_Pin);
 8000874:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000878:	480b      	ldr	r0, [pc, #44]	; (80008a8 <button1_reading+0x40>)
 800087a:	f001 fb45 	bl	8001f08 <HAL_GPIO_ReadPin>
 800087e:	4603      	mov	r3, r0
 8000880:	461a      	mov	r2, r3
 8000882:	4b07      	ldr	r3, [pc, #28]	; (80008a0 <button1_reading+0x38>)
 8000884:	601a      	str	r2, [r3, #0]
	if(debounceButton1Buffer1 == debounceButton1Buffer2)
 8000886:	4b06      	ldr	r3, [pc, #24]	; (80008a0 <button1_reading+0x38>)
 8000888:	681a      	ldr	r2, [r3, #0]
 800088a:	4b06      	ldr	r3, [pc, #24]	; (80008a4 <button1_reading+0x3c>)
 800088c:	681b      	ldr	r3, [r3, #0]
 800088e:	429a      	cmp	r2, r3
 8000890:	d103      	bne.n	800089a <button1_reading+0x32>
		button1Buffer = debounceButton1Buffer1;
 8000892:	4b03      	ldr	r3, [pc, #12]	; (80008a0 <button1_reading+0x38>)
 8000894:	681b      	ldr	r3, [r3, #0]
 8000896:	4a05      	ldr	r2, [pc, #20]	; (80008ac <button1_reading+0x44>)
 8000898:	6013      	str	r3, [r2, #0]
}
 800089a:	bf00      	nop
 800089c:	bd80      	pop	{r7, pc}
 800089e:	bf00      	nop
 80008a0:	20000008 	.word	0x20000008
 80008a4:	20000004 	.word	0x20000004
 80008a8:	40010800 	.word	0x40010800
 80008ac:	2000000c 	.word	0x2000000c

080008b0 <button2_reading>:
int debounceButton2Buffer1=NORMAL_STATE;
int button2Buffer=NORMAL_STATE;
int counterForButton2Press1s=1000;
int flagForButton2Press1s=0;
/* 	BUTTON2 PARAMETER END */
void button2_reading(){
 80008b0:	b580      	push	{r7, lr}
 80008b2:	af00      	add	r7, sp, #0
	debounceButton2Buffer2 =debounceButton2Buffer1;
 80008b4:	4b1a      	ldr	r3, [pc, #104]	; (8000920 <button2_reading+0x70>)
 80008b6:	681b      	ldr	r3, [r3, #0]
 80008b8:	4a1a      	ldr	r2, [pc, #104]	; (8000924 <button2_reading+0x74>)
 80008ba:	6013      	str	r3, [r2, #0]
	debounceButton2Buffer1 = HAL_GPIO_ReadPin(Button2_GPIO_Port, Button2_Pin);
 80008bc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80008c0:	4819      	ldr	r0, [pc, #100]	; (8000928 <button2_reading+0x78>)
 80008c2:	f001 fb21 	bl	8001f08 <HAL_GPIO_ReadPin>
 80008c6:	4603      	mov	r3, r0
 80008c8:	461a      	mov	r2, r3
 80008ca:	4b15      	ldr	r3, [pc, #84]	; (8000920 <button2_reading+0x70>)
 80008cc:	601a      	str	r2, [r3, #0]
	if(debounceButton2Buffer1 == debounceButton2Buffer2)
 80008ce:	4b14      	ldr	r3, [pc, #80]	; (8000920 <button2_reading+0x70>)
 80008d0:	681a      	ldr	r2, [r3, #0]
 80008d2:	4b14      	ldr	r3, [pc, #80]	; (8000924 <button2_reading+0x74>)
 80008d4:	681b      	ldr	r3, [r3, #0]
 80008d6:	429a      	cmp	r2, r3
 80008d8:	d103      	bne.n	80008e2 <button2_reading+0x32>
		button2Buffer = debounceButton2Buffer1;
 80008da:	4b11      	ldr	r3, [pc, #68]	; (8000920 <button2_reading+0x70>)
 80008dc:	681b      	ldr	r3, [r3, #0]
 80008de:	4a13      	ldr	r2, [pc, #76]	; (800092c <button2_reading+0x7c>)
 80008e0:	6013      	str	r3, [r2, #0]

	if(button2Buffer == PRESSED_STATE){
 80008e2:	4b12      	ldr	r3, [pc, #72]	; (800092c <button2_reading+0x7c>)
 80008e4:	681b      	ldr	r3, [r3, #0]
 80008e6:	2b00      	cmp	r3, #0
 80008e8:	d10d      	bne.n	8000906 <button2_reading+0x56>
	//if a button is pressed, we start counting
		if(counterForButton2Press1s >0){
 80008ea:	4b11      	ldr	r3, [pc, #68]	; (8000930 <button2_reading+0x80>)
 80008ec:	681b      	ldr	r3, [r3, #0]
 80008ee:	2b00      	cmp	r3, #0
 80008f0:	dd05      	ble.n	80008fe <button2_reading+0x4e>
			counterForButton2Press1s=counterForButton2Press1s-TIMER_CYCLE;
 80008f2:	4b0f      	ldr	r3, [pc, #60]	; (8000930 <button2_reading+0x80>)
 80008f4:	681b      	ldr	r3, [r3, #0]
 80008f6:	3b0a      	subs	r3, #10
 80008f8:	4a0d      	ldr	r2, [pc, #52]	; (8000930 <button2_reading+0x80>)
 80008fa:	6013      	str	r3, [r2, #0]
		}
	}else if(button2Buffer == NORMAL_STATE){
		counterForButton2Press1s = 1000;
		flagForButton2Press1s = 0;
	}
}
 80008fc:	e00e      	b.n	800091c <button2_reading+0x6c>
			flagForButton2Press1s = 1;
 80008fe:	4b0d      	ldr	r3, [pc, #52]	; (8000934 <button2_reading+0x84>)
 8000900:	2201      	movs	r2, #1
 8000902:	601a      	str	r2, [r3, #0]
}
 8000904:	e00a      	b.n	800091c <button2_reading+0x6c>
	}else if(button2Buffer == NORMAL_STATE){
 8000906:	4b09      	ldr	r3, [pc, #36]	; (800092c <button2_reading+0x7c>)
 8000908:	681b      	ldr	r3, [r3, #0]
 800090a:	2b01      	cmp	r3, #1
 800090c:	d106      	bne.n	800091c <button2_reading+0x6c>
		counterForButton2Press1s = 1000;
 800090e:	4b08      	ldr	r3, [pc, #32]	; (8000930 <button2_reading+0x80>)
 8000910:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000914:	601a      	str	r2, [r3, #0]
		flagForButton2Press1s = 0;
 8000916:	4b07      	ldr	r3, [pc, #28]	; (8000934 <button2_reading+0x84>)
 8000918:	2200      	movs	r2, #0
 800091a:	601a      	str	r2, [r3, #0]
}
 800091c:	bf00      	nop
 800091e:	bd80      	pop	{r7, pc}
 8000920:	20000014 	.word	0x20000014
 8000924:	20000010 	.word	0x20000010
 8000928:	40010800 	.word	0x40010800
 800092c:	20000018 	.word	0x20000018
 8000930:	2000001c 	.word	0x2000001c
 8000934:	200000cc 	.word	0x200000cc

08000938 <button3_reading>:
/* 	BUTTON3 PARAMETER START */
int debounceButton3Buffer2=NORMAL_STATE;
int debounceButton3Buffer1=NORMAL_STATE;
int button3Buffer=NORMAL_STATE;
/* 	BUTTON3 PARAMETER END */
void button3_reading(){
 8000938:	b580      	push	{r7, lr}
 800093a:	af00      	add	r7, sp, #0
	debounceButton3Buffer2 =debounceButton3Buffer1;
 800093c:	4b0c      	ldr	r3, [pc, #48]	; (8000970 <button3_reading+0x38>)
 800093e:	681b      	ldr	r3, [r3, #0]
 8000940:	4a0c      	ldr	r2, [pc, #48]	; (8000974 <button3_reading+0x3c>)
 8000942:	6013      	str	r3, [r2, #0]
	debounceButton3Buffer1 = HAL_GPIO_ReadPin(Button3_GPIO_Port, Button3_Pin);
 8000944:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000948:	480b      	ldr	r0, [pc, #44]	; (8000978 <button3_reading+0x40>)
 800094a:	f001 fadd 	bl	8001f08 <HAL_GPIO_ReadPin>
 800094e:	4603      	mov	r3, r0
 8000950:	461a      	mov	r2, r3
 8000952:	4b07      	ldr	r3, [pc, #28]	; (8000970 <button3_reading+0x38>)
 8000954:	601a      	str	r2, [r3, #0]
	if(debounceButton3Buffer1 == debounceButton3Buffer2)
 8000956:	4b06      	ldr	r3, [pc, #24]	; (8000970 <button3_reading+0x38>)
 8000958:	681a      	ldr	r2, [r3, #0]
 800095a:	4b06      	ldr	r3, [pc, #24]	; (8000974 <button3_reading+0x3c>)
 800095c:	681b      	ldr	r3, [r3, #0]
 800095e:	429a      	cmp	r2, r3
 8000960:	d103      	bne.n	800096a <button3_reading+0x32>
		button3Buffer = debounceButton3Buffer1;
 8000962:	4b03      	ldr	r3, [pc, #12]	; (8000970 <button3_reading+0x38>)
 8000964:	681b      	ldr	r3, [r3, #0]
 8000966:	4a05      	ldr	r2, [pc, #20]	; (800097c <button3_reading+0x44>)
 8000968:	6013      	str	r3, [r2, #0]
}
 800096a:	bf00      	nop
 800096c:	bd80      	pop	{r7, pc}
 800096e:	bf00      	nop
 8000970:	20000024 	.word	0x20000024
 8000974:	20000020 	.word	0x20000020
 8000978:	40010800 	.word	0x40010800
 800097c:	20000028 	.word	0x20000028

08000980 <button1_pressed>:

int button1_pressed(){
 8000980:	b480      	push	{r7}
 8000982:	af00      	add	r7, sp, #0
	return (button1Buffer == PRESSED_STATE);
 8000984:	4b05      	ldr	r3, [pc, #20]	; (800099c <button1_pressed+0x1c>)
 8000986:	681b      	ldr	r3, [r3, #0]
 8000988:	2b00      	cmp	r3, #0
 800098a:	bf0c      	ite	eq
 800098c:	2301      	moveq	r3, #1
 800098e:	2300      	movne	r3, #0
 8000990:	b2db      	uxtb	r3, r3
}
 8000992:	4618      	mov	r0, r3
 8000994:	46bd      	mov	sp, r7
 8000996:	bc80      	pop	{r7}
 8000998:	4770      	bx	lr
 800099a:	bf00      	nop
 800099c:	2000000c 	.word	0x2000000c

080009a0 <button2_pressed>:

int button2_pressed(){
 80009a0:	b480      	push	{r7}
 80009a2:	af00      	add	r7, sp, #0
	return (button2Buffer == PRESSED_STATE);
 80009a4:	4b05      	ldr	r3, [pc, #20]	; (80009bc <button2_pressed+0x1c>)
 80009a6:	681b      	ldr	r3, [r3, #0]
 80009a8:	2b00      	cmp	r3, #0
 80009aa:	bf0c      	ite	eq
 80009ac:	2301      	moveq	r3, #1
 80009ae:	2300      	movne	r3, #0
 80009b0:	b2db      	uxtb	r3, r3
}
 80009b2:	4618      	mov	r0, r3
 80009b4:	46bd      	mov	sp, r7
 80009b6:	bc80      	pop	{r7}
 80009b8:	4770      	bx	lr
 80009ba:	bf00      	nop
 80009bc:	20000018 	.word	0x20000018

080009c0 <button2_pressed_1s>:
int button2_pressed_1s(){
 80009c0:	b480      	push	{r7}
 80009c2:	af00      	add	r7, sp, #0
	return (flagForButton2Press1s == 1);
 80009c4:	4b05      	ldr	r3, [pc, #20]	; (80009dc <button2_pressed_1s+0x1c>)
 80009c6:	681b      	ldr	r3, [r3, #0]
 80009c8:	2b01      	cmp	r3, #1
 80009ca:	bf0c      	ite	eq
 80009cc:	2301      	moveq	r3, #1
 80009ce:	2300      	movne	r3, #0
 80009d0:	b2db      	uxtb	r3, r3
}
 80009d2:	4618      	mov	r0, r3
 80009d4:	46bd      	mov	sp, r7
 80009d6:	bc80      	pop	{r7}
 80009d8:	4770      	bx	lr
 80009da:	bf00      	nop
 80009dc:	200000cc 	.word	0x200000cc

080009e0 <button3_pressed>:

int button3_pressed(){
 80009e0:	b480      	push	{r7}
 80009e2:	af00      	add	r7, sp, #0
	return (button3Buffer == PRESSED_STATE);
 80009e4:	4b05      	ldr	r3, [pc, #20]	; (80009fc <button3_pressed+0x1c>)
 80009e6:	681b      	ldr	r3, [r3, #0]
 80009e8:	2b00      	cmp	r3, #0
 80009ea:	bf0c      	ite	eq
 80009ec:	2301      	moveq	r3, #1
 80009ee:	2300      	movne	r3, #0
 80009f0:	b2db      	uxtb	r3, r3
}
 80009f2:	4618      	mov	r0, r3
 80009f4:	46bd      	mov	sp, r7
 80009f6:	bc80      	pop	{r7}
 80009f8:	4770      	bx	lr
 80009fa:	bf00      	nop
 80009fc:	20000028 	.word	0x20000028

08000a00 <fsm_for_input_processing>:
/* 7SEG LED2s PARAMETERS START */
	GPIO_TypeDef*GPIO_Port_LED7SEG2[]={a2_GPIO_Port,b2_GPIO_Port,c2_GPIO_Port,d2_GPIO_Port,
				  e2_GPIO_Port, f2_GPIO_Port,g2_GPIO_Port};
	uint16_t GPIO_Pin_LED7SEG2[]={a2_Pin, b2_Pin, c2_Pin, d2_Pin, e2_Pin, f2_Pin, g2_Pin};
/* 7SEG LED2s PARAMETERS END */
void fsm_for_input_processing(){
 8000a00:	b580      	push	{r7, lr}
 8000a02:	af00      	add	r7, sp, #0
	switch(state){
 8000a04:	4ba7      	ldr	r3, [pc, #668]	; (8000ca4 <fsm_for_input_processing+0x2a4>)
 8000a06:	781b      	ldrb	r3, [r3, #0]
 8000a08:	2b07      	cmp	r3, #7
 8000a0a:	f200 82fb 	bhi.w	8001004 <fsm_for_input_processing+0x604>
 8000a0e:	a201      	add	r2, pc, #4	; (adr r2, 8000a14 <fsm_for_input_processing+0x14>)
 8000a10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000a14:	08000a35 	.word	0x08000a35
 8000a18:	08000ad3 	.word	0x08000ad3
 8000a1c:	08000b85 	.word	0x08000b85
 8000a20:	08000c3b 	.word	0x08000c3b
 8000a24:	08000d3f 	.word	0x08000d3f
 8000a28:	08000dfb 	.word	0x08000dfb
 8000a2c:	08000ecd 	.word	0x08000ecd
 8000a30:	08000fa5 	.word	0x08000fa5
	case INIT:
		/* INIT PORT OUTPUT START */
		turnOffSingleLed();
 8000a34:	f000 fd58 	bl	80014e8 <turnOffSingleLed>
		HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, 0);
 8000a38:	2200      	movs	r2, #0
 8000a3a:	2102      	movs	r1, #2
 8000a3c:	489a      	ldr	r0, [pc, #616]	; (8000ca8 <fsm_for_input_processing+0x2a8>)
 8000a3e:	f001 fa7a 	bl	8001f36 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, 0);
 8000a42:	2200      	movs	r2, #0
 8000a44:	2104      	movs	r1, #4
 8000a46:	4898      	ldr	r0, [pc, #608]	; (8000ca8 <fsm_for_input_processing+0x2a8>)
 8000a48:	f001 fa75 	bl	8001f36 <HAL_GPIO_WritePin>
		/* INIT PORT OUTPUT END */

		/* INITIALIZE TEMPORARY DURATION START */
		red_temp_dur=RED_DURATION;
 8000a4c:	4b97      	ldr	r3, [pc, #604]	; (8000cac <fsm_for_input_processing+0x2ac>)
 8000a4e:	681b      	ldr	r3, [r3, #0]
 8000a50:	4a97      	ldr	r2, [pc, #604]	; (8000cb0 <fsm_for_input_processing+0x2b0>)
 8000a52:	6013      	str	r3, [r2, #0]
		yellow_temp_dur=YELLOW_DURATION;
 8000a54:	4b97      	ldr	r3, [pc, #604]	; (8000cb4 <fsm_for_input_processing+0x2b4>)
 8000a56:	681b      	ldr	r3, [r3, #0]
 8000a58:	4a97      	ldr	r2, [pc, #604]	; (8000cb8 <fsm_for_input_processing+0x2b8>)
 8000a5a:	6013      	str	r3, [r2, #0]
		green_temp_dur=GREEN_DURATION;
 8000a5c:	4b97      	ldr	r3, [pc, #604]	; (8000cbc <fsm_for_input_processing+0x2bc>)
 8000a5e:	681b      	ldr	r3, [r3, #0]
 8000a60:	4a97      	ldr	r2, [pc, #604]	; (8000cc0 <fsm_for_input_processing+0x2c0>)
 8000a62:	6013      	str	r3, [r2, #0]
		/* INITIALIZE TEMPORARY DURATION END */

		/* INITIALIZE COUNT START */
		leds_way1_count[0]=RED_DURATION;
 8000a64:	4b91      	ldr	r3, [pc, #580]	; (8000cac <fsm_for_input_processing+0x2ac>)
 8000a66:	681b      	ldr	r3, [r3, #0]
 8000a68:	4a96      	ldr	r2, [pc, #600]	; (8000cc4 <fsm_for_input_processing+0x2c4>)
 8000a6a:	6013      	str	r3, [r2, #0]
		leds_way1_count[1]=YELLOW_DURATION;
 8000a6c:	4b91      	ldr	r3, [pc, #580]	; (8000cb4 <fsm_for_input_processing+0x2b4>)
 8000a6e:	681b      	ldr	r3, [r3, #0]
 8000a70:	4a94      	ldr	r2, [pc, #592]	; (8000cc4 <fsm_for_input_processing+0x2c4>)
 8000a72:	6053      	str	r3, [r2, #4]
		leds_way1_count[2]=GREEN_DURATION;
 8000a74:	4b91      	ldr	r3, [pc, #580]	; (8000cbc <fsm_for_input_processing+0x2bc>)
 8000a76:	681b      	ldr	r3, [r3, #0]
 8000a78:	4a92      	ldr	r2, [pc, #584]	; (8000cc4 <fsm_for_input_processing+0x2c4>)
 8000a7a:	6093      	str	r3, [r2, #8]
		HAL_GPIO_WritePin(RED_LED1_GPIO_Port, RED_LED1_Pin, 0);
 8000a7c:	2200      	movs	r2, #0
 8000a7e:	2120      	movs	r1, #32
 8000a80:	4889      	ldr	r0, [pc, #548]	; (8000ca8 <fsm_for_input_processing+0x2a8>)
 8000a82:	f001 fa58 	bl	8001f36 <HAL_GPIO_WritePin>
		current_led_way1=RED;
 8000a86:	4b90      	ldr	r3, [pc, #576]	; (8000cc8 <fsm_for_input_processing+0x2c8>)
 8000a88:	2200      	movs	r2, #0
 8000a8a:	701a      	strb	r2, [r3, #0]
		leds_way2_count[0]=RED_DURATION;
 8000a8c:	4b87      	ldr	r3, [pc, #540]	; (8000cac <fsm_for_input_processing+0x2ac>)
 8000a8e:	681b      	ldr	r3, [r3, #0]
 8000a90:	4a8e      	ldr	r2, [pc, #568]	; (8000ccc <fsm_for_input_processing+0x2cc>)
 8000a92:	6013      	str	r3, [r2, #0]
		leds_way2_count[1]=YELLOW_DURATION;
 8000a94:	4b87      	ldr	r3, [pc, #540]	; (8000cb4 <fsm_for_input_processing+0x2b4>)
 8000a96:	681b      	ldr	r3, [r3, #0]
 8000a98:	4a8c      	ldr	r2, [pc, #560]	; (8000ccc <fsm_for_input_processing+0x2cc>)
 8000a9a:	6053      	str	r3, [r2, #4]
		leds_way2_count[2]=GREEN_DURATION;
 8000a9c:	4b87      	ldr	r3, [pc, #540]	; (8000cbc <fsm_for_input_processing+0x2bc>)
 8000a9e:	681b      	ldr	r3, [r3, #0]
 8000aa0:	4a8a      	ldr	r2, [pc, #552]	; (8000ccc <fsm_for_input_processing+0x2cc>)
 8000aa2:	6093      	str	r3, [r2, #8]
		HAL_GPIO_WritePin(YELLOW_LED2_GPIO_Port, YELLOW_LED2_Pin, 0);
 8000aa4:	2200      	movs	r2, #0
 8000aa6:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000aaa:	487f      	ldr	r0, [pc, #508]	; (8000ca8 <fsm_for_input_processing+0x2a8>)
 8000aac:	f001 fa43 	bl	8001f36 <HAL_GPIO_WritePin>
		current_led_way2=YELLOW;
 8000ab0:	4b87      	ldr	r3, [pc, #540]	; (8000cd0 <fsm_for_input_processing+0x2d0>)
 8000ab2:	2201      	movs	r2, #1
 8000ab4:	701a      	strb	r2, [r3, #0]
		/* INITIALIZE COUNT END */
		index_7SEGLed=0;
 8000ab6:	4b87      	ldr	r3, [pc, #540]	; (8000cd4 <fsm_for_input_processing+0x2d4>)
 8000ab8:	2200      	movs	r2, #0
 8000aba:	601a      	str	r2, [r3, #0]
		state=MODE1;
 8000abc:	4b79      	ldr	r3, [pc, #484]	; (8000ca4 <fsm_for_input_processing+0x2a4>)
 8000abe:	2201      	movs	r2, #1
 8000ac0:	701a      	strb	r2, [r3, #0]
		setTimer2(T_7SEGLED); //set timer2 for 7seg led traversal
 8000ac2:	20fa      	movs	r0, #250	; 0xfa
 8000ac4:	f7ff fe2c 	bl	8000720 <setTimer2>
		setTimer4(1000);  //SET TIMER4 FOR COUNT DOWN
 8000ac8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000acc:	f7ff fe5c 	bl	8000788 <setTimer4>
		break;
 8000ad0:	e298      	b.n	8001004 <fsm_for_input_processing+0x604>
	case MODE1:
		/* DISPLAY 7-SEG LED START */
		if(timer2_flag==1){
 8000ad2:	4b81      	ldr	r3, [pc, #516]	; (8000cd8 <fsm_for_input_processing+0x2d8>)
 8000ad4:	681b      	ldr	r3, [r3, #0]
 8000ad6:	2b01      	cmp	r3, #1
 8000ad8:	d106      	bne.n	8000ae8 <fsm_for_input_processing+0xe8>
			setTimer2(T_7SEGLED);
 8000ada:	20fa      	movs	r0, #250	; 0xfa
 8000adc:	f7ff fe20 	bl	8000720 <setTimer2>
			Switch7SEGLEDIndex();
 8000ae0:	f000 fade 	bl	80010a0 <Switch7SEGLEDIndex>
			display7SEGMode1();
 8000ae4:	f000 fbfc 	bl	80012e0 <display7SEGMode1>
		}
		/* DISPLAY 7-SEG LED END */

		/* COUNT DOWN START */
		if(timer4_flag==1){
 8000ae8:	4b7c      	ldr	r3, [pc, #496]	; (8000cdc <fsm_for_input_processing+0x2dc>)
 8000aea:	681b      	ldr	r3, [r3, #0]
 8000aec:	2b01      	cmp	r3, #1
 8000aee:	d10d      	bne.n	8000b0c <fsm_for_input_processing+0x10c>
			setTimer4(1000);
 8000af0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000af4:	f7ff fe48 	bl	8000788 <setTimer4>
			trafficLightCount(leds_way1_count,&current_led_way1);
 8000af8:	4973      	ldr	r1, [pc, #460]	; (8000cc8 <fsm_for_input_processing+0x2c8>)
 8000afa:	4872      	ldr	r0, [pc, #456]	; (8000cc4 <fsm_for_input_processing+0x2c4>)
 8000afc:	f000 fca2 	bl	8001444 <trafficLightCount>
			trafficLightCount(leds_way2_count,&current_led_way2);
 8000b00:	4973      	ldr	r1, [pc, #460]	; (8000cd0 <fsm_for_input_processing+0x2d0>)
 8000b02:	4872      	ldr	r0, [pc, #456]	; (8000ccc <fsm_for_input_processing+0x2cc>)
 8000b04:	f000 fc9e 	bl	8001444 <trafficLightCount>
			displaySingleLedsMode1();
 8000b08:	f000 fc38 	bl	800137c <displaySingleLedsMode1>
		}
		/* COUNT DOWN END */

		/* DISPLAY 7-SEG LED START */
		if(timer2_flag==1){
 8000b0c:	4b72      	ldr	r3, [pc, #456]	; (8000cd8 <fsm_for_input_processing+0x2d8>)
 8000b0e:	681b      	ldr	r3, [r3, #0]
 8000b10:	2b01      	cmp	r3, #1
 8000b12:	d106      	bne.n	8000b22 <fsm_for_input_processing+0x122>
			setTimer2(T_7SEGLED);
 8000b14:	20fa      	movs	r0, #250	; 0xfa
 8000b16:	f7ff fe03 	bl	8000720 <setTimer2>
			Switch7SEGLEDIndex();
 8000b1a:	f000 fac1 	bl	80010a0 <Switch7SEGLEDIndex>
			display7SEGMode1();
 8000b1e:	f000 fbdf 	bl	80012e0 <display7SEGMode1>
		}
		/* DISPLAY 7-SEG LED END */

		/*EXECUTE INPUT BUTTON1 START */
		if(button1_executed==0){
 8000b22:	4b6f      	ldr	r3, [pc, #444]	; (8000ce0 <fsm_for_input_processing+0x2e0>)
 8000b24:	681b      	ldr	r3, [r3, #0]
 8000b26:	2b00      	cmp	r3, #0
 8000b28:	d11d      	bne.n	8000b66 <fsm_for_input_processing+0x166>
			if(button1_pressed()==TRUE){
 8000b2a:	f7ff ff29 	bl	8000980 <button1_pressed>
 8000b2e:	4603      	mov	r3, r0
 8000b30:	2b01      	cmp	r3, #1
 8000b32:	f040 825a 	bne.w	8000fea <fsm_for_input_processing+0x5ea>
				state=MODE2;
 8000b36:	4b5b      	ldr	r3, [pc, #364]	; (8000ca4 <fsm_for_input_processing+0x2a4>)
 8000b38:	2202      	movs	r2, #2
 8000b3a:	701a      	strb	r2, [r3, #0]
				button1_executed=1;
 8000b3c:	4b68      	ldr	r3, [pc, #416]	; (8000ce0 <fsm_for_input_processing+0x2e0>)
 8000b3e:	2201      	movs	r2, #1
 8000b40:	601a      	str	r2, [r3, #0]
				setTimer1(250);   //set timer for red led blinking
 8000b42:	20fa      	movs	r0, #250	; 0xfa
 8000b44:	f7ff fdd2 	bl	80006ec <setTimer1>
				/* INITIALIZE TEMP DURATION START */
				red_temp_dur=RED_DURATION;
 8000b48:	4b58      	ldr	r3, [pc, #352]	; (8000cac <fsm_for_input_processing+0x2ac>)
 8000b4a:	681b      	ldr	r3, [r3, #0]
 8000b4c:	4a58      	ldr	r2, [pc, #352]	; (8000cb0 <fsm_for_input_processing+0x2b0>)
 8000b4e:	6013      	str	r3, [r2, #0]
				yellow_temp_dur=YELLOW_DURATION;
 8000b50:	4b58      	ldr	r3, [pc, #352]	; (8000cb4 <fsm_for_input_processing+0x2b4>)
 8000b52:	681b      	ldr	r3, [r3, #0]
 8000b54:	4a58      	ldr	r2, [pc, #352]	; (8000cb8 <fsm_for_input_processing+0x2b8>)
 8000b56:	6013      	str	r3, [r2, #0]
				green_temp_dur=GREEN_DURATION;
 8000b58:	4b58      	ldr	r3, [pc, #352]	; (8000cbc <fsm_for_input_processing+0x2bc>)
 8000b5a:	681b      	ldr	r3, [r3, #0]
 8000b5c:	4a58      	ldr	r2, [pc, #352]	; (8000cc0 <fsm_for_input_processing+0x2c0>)
 8000b5e:	6013      	str	r3, [r2, #0]
				/* INITIALIZE TEMP DURATION END */
				turnOffSingleLed();
 8000b60:	f000 fcc2 	bl	80014e8 <turnOffSingleLed>
				button1_executed=0;
			}
		}
		/*EXECUTE INPUT BUTTON1 END */

		break;
 8000b64:	e241      	b.n	8000fea <fsm_for_input_processing+0x5ea>
		}else if(button1_executed==1){
 8000b66:	4b5e      	ldr	r3, [pc, #376]	; (8000ce0 <fsm_for_input_processing+0x2e0>)
 8000b68:	681b      	ldr	r3, [r3, #0]
 8000b6a:	2b01      	cmp	r3, #1
 8000b6c:	f040 823d 	bne.w	8000fea <fsm_for_input_processing+0x5ea>
			if(button1_pressed()==FALSE){
 8000b70:	f7ff ff06 	bl	8000980 <button1_pressed>
 8000b74:	4603      	mov	r3, r0
 8000b76:	2b00      	cmp	r3, #0
 8000b78:	f040 8237 	bne.w	8000fea <fsm_for_input_processing+0x5ea>
				button1_executed=0;
 8000b7c:	4b58      	ldr	r3, [pc, #352]	; (8000ce0 <fsm_for_input_processing+0x2e0>)
 8000b7e:	2200      	movs	r2, #0
 8000b80:	601a      	str	r2, [r3, #0]
		break;
 8000b82:	e232      	b.n	8000fea <fsm_for_input_processing+0x5ea>
	case MODE2:
		loadLedTempDuration(RED);  //LOAD RED LED DURATION START
 8000b84:	2000      	movs	r0, #0
 8000b86:	f000 fb03 	bl	8001190 <loadLedTempDuration>

		/* BLINK SINGLE RED LED START */
		if(timer1_flag==1){
 8000b8a:	4b56      	ldr	r3, [pc, #344]	; (8000ce4 <fsm_for_input_processing+0x2e4>)
 8000b8c:	681b      	ldr	r3, [r3, #0]
 8000b8e:	2b01      	cmp	r3, #1
 8000b90:	d10b      	bne.n	8000baa <fsm_for_input_processing+0x1aa>
			setTimer1(250);
 8000b92:	20fa      	movs	r0, #250	; 0xfa
 8000b94:	f7ff fdaa 	bl	80006ec <setTimer1>
			HAL_GPIO_TogglePin(RED_LED1_GPIO_Port, RED_LED1_Pin);  //TOGGLE RED LEDS IN 2 WAY
 8000b98:	2120      	movs	r1, #32
 8000b9a:	4843      	ldr	r0, [pc, #268]	; (8000ca8 <fsm_for_input_processing+0x2a8>)
 8000b9c:	f001 f9e3 	bl	8001f66 <HAL_GPIO_TogglePin>
			HAL_GPIO_TogglePin(RED_LED2_GPIO_Port, RED_LED2_Pin);
 8000ba0:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000ba4:	4840      	ldr	r0, [pc, #256]	; (8000ca8 <fsm_for_input_processing+0x2a8>)
 8000ba6:	f001 f9de 	bl	8001f66 <HAL_GPIO_TogglePin>
		}
		/* BLINK SINGLE RED LED END */

		/* DISPLAYING MODE START */
		if(timer2_flag==1){
 8000baa:	4b4b      	ldr	r3, [pc, #300]	; (8000cd8 <fsm_for_input_processing+0x2d8>)
 8000bac:	681b      	ldr	r3, [r3, #0]
 8000bae:	2b01      	cmp	r3, #1
 8000bb0:	d10a      	bne.n	8000bc8 <fsm_for_input_processing+0x1c8>
			setTimer2(T_7SEGLED);
 8000bb2:	20fa      	movs	r0, #250	; 0xfa
 8000bb4:	f7ff fdb4 	bl	8000720 <setTimer2>
			Switch7SEGLEDIndex();
 8000bb8:	f000 fa72 	bl	80010a0 <Switch7SEGLEDIndex>
			displayMode(2);
 8000bbc:	2002      	movs	r0, #2
 8000bbe:	f000 fad5 	bl	800116c <displayMode>
			loadLedTempDuration(RED);  //LOAD RED LED TEMP DURATION START
 8000bc2:	2000      	movs	r0, #0
 8000bc4:	f000 fae4 	bl	8001190 <loadLedTempDuration>
		}
		/* DISPLAYING MODE END */

		/*EXECUTE INPUT BUTTON1 START */
		if(button1_executed==0){
 8000bc8:	4b45      	ldr	r3, [pc, #276]	; (8000ce0 <fsm_for_input_processing+0x2e0>)
 8000bca:	681b      	ldr	r3, [r3, #0]
 8000bcc:	2b00      	cmp	r3, #0
 8000bce:	d10d      	bne.n	8000bec <fsm_for_input_processing+0x1ec>
			if(button1_pressed()==TRUE){
 8000bd0:	f7ff fed6 	bl	8000980 <button1_pressed>
 8000bd4:	4603      	mov	r3, r0
 8000bd6:	2b01      	cmp	r3, #1
 8000bd8:	d114      	bne.n	8000c04 <fsm_for_input_processing+0x204>
				state=MODE3;
 8000bda:	4b32      	ldr	r3, [pc, #200]	; (8000ca4 <fsm_for_input_processing+0x2a4>)
 8000bdc:	2203      	movs	r2, #3
 8000bde:	701a      	strb	r2, [r3, #0]
				button1_executed=1;
 8000be0:	4b3f      	ldr	r3, [pc, #252]	; (8000ce0 <fsm_for_input_processing+0x2e0>)
 8000be2:	2201      	movs	r2, #1
 8000be4:	601a      	str	r2, [r3, #0]
				turnOffSingleLed();
 8000be6:	f000 fc7f 	bl	80014e8 <turnOffSingleLed>
 8000bea:	e00b      	b.n	8000c04 <fsm_for_input_processing+0x204>
			}
		}else if(button1_executed==1){
 8000bec:	4b3c      	ldr	r3, [pc, #240]	; (8000ce0 <fsm_for_input_processing+0x2e0>)
 8000bee:	681b      	ldr	r3, [r3, #0]
 8000bf0:	2b01      	cmp	r3, #1
 8000bf2:	d107      	bne.n	8000c04 <fsm_for_input_processing+0x204>
			if(button1_pressed()==FALSE){
 8000bf4:	f7ff fec4 	bl	8000980 <button1_pressed>
 8000bf8:	4603      	mov	r3, r0
 8000bfa:	2b00      	cmp	r3, #0
 8000bfc:	d102      	bne.n	8000c04 <fsm_for_input_processing+0x204>
				button1_executed=0;
 8000bfe:	4b38      	ldr	r3, [pc, #224]	; (8000ce0 <fsm_for_input_processing+0x2e0>)
 8000c00:	2200      	movs	r2, #0
 8000c02:	601a      	str	r2, [r3, #0]
			}
		}
		/*EXECUTE INPUT BUTTON1 END */

		/*EXECUTE INPUT BUTTON3 START */
		if(button3_pressed()==TRUE){
 8000c04:	f7ff feec 	bl	80009e0 <button3_pressed>
 8000c08:	4603      	mov	r3, r0
 8000c0a:	2b01      	cmp	r3, #1
 8000c0c:	d105      	bne.n	8000c1a <fsm_for_input_processing+0x21a>
			state=UPDATE_DURATION;
 8000c0e:	4b25      	ldr	r3, [pc, #148]	; (8000ca4 <fsm_for_input_processing+0x2a4>)
 8000c10:	2207      	movs	r2, #7
 8000c12:	701a      	strb	r2, [r3, #0]
			LedToChange=RED;
 8000c14:	4b34      	ldr	r3, [pc, #208]	; (8000ce8 <fsm_for_input_processing+0x2e8>)
 8000c16:	2200      	movs	r2, #0
 8000c18:	701a      	strb	r2, [r3, #0]
		}
		/*EXECUTE INPUT BUTTON3 END */

		/*EXECUTE INPUT BUTTON2 START */
		if(button2_pressed()==TRUE){
 8000c1a:	f7ff fec1 	bl	80009a0 <button2_pressed>
 8000c1e:	4603      	mov	r3, r0
 8000c20:	2b01      	cmp	r3, #1
 8000c22:	f040 81e4 	bne.w	8000fee <fsm_for_input_processing+0x5ee>
			state=INCREASE;
 8000c26:	4b1f      	ldr	r3, [pc, #124]	; (8000ca4 <fsm_for_input_processing+0x2a4>)
 8000c28:	2205      	movs	r2, #5
 8000c2a:	701a      	strb	r2, [r3, #0]
			LedToChange=RED;
 8000c2c:	4b2e      	ldr	r3, [pc, #184]	; (8000ce8 <fsm_for_input_processing+0x2e8>)
 8000c2e:	2200      	movs	r2, #0
 8000c30:	701a      	strb	r2, [r3, #0]
			button2_increase1=0;
 8000c32:	4b2e      	ldr	r3, [pc, #184]	; (8000cec <fsm_for_input_processing+0x2ec>)
 8000c34:	2200      	movs	r2, #0
 8000c36:	601a      	str	r2, [r3, #0]
		}
		/*EXECUTE INPUT BUTTON2 END */
		//TO DO
		break;
 8000c38:	e1d9      	b.n	8000fee <fsm_for_input_processing+0x5ee>
	case MODE3:
		loadLedTempDuration(YELLOW);  //LOAD RED LED TEMPORARY DURATION START
 8000c3a:	2001      	movs	r0, #1
 8000c3c:	f000 faa8 	bl	8001190 <loadLedTempDuration>

		/* BLINK SINGLE YELLOW LED START */
		if(timer1_flag==1){
 8000c40:	4b28      	ldr	r3, [pc, #160]	; (8000ce4 <fsm_for_input_processing+0x2e4>)
 8000c42:	681b      	ldr	r3, [r3, #0]
 8000c44:	2b01      	cmp	r3, #1
 8000c46:	d10b      	bne.n	8000c60 <fsm_for_input_processing+0x260>
			setTimer1(250);
 8000c48:	20fa      	movs	r0, #250	; 0xfa
 8000c4a:	f7ff fd4f 	bl	80006ec <setTimer1>
			HAL_GPIO_TogglePin(YELLOW_LED1_GPIO_Port, YELLOW_LED1_Pin);  //TOGGLE RED LEDS IN 2 WAY
 8000c4e:	2140      	movs	r1, #64	; 0x40
 8000c50:	4815      	ldr	r0, [pc, #84]	; (8000ca8 <fsm_for_input_processing+0x2a8>)
 8000c52:	f001 f988 	bl	8001f66 <HAL_GPIO_TogglePin>
			HAL_GPIO_TogglePin(YELLOW_LED2_GPIO_Port, YELLOW_LED2_Pin);
 8000c56:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000c5a:	4813      	ldr	r0, [pc, #76]	; (8000ca8 <fsm_for_input_processing+0x2a8>)
 8000c5c:	f001 f983 	bl	8001f66 <HAL_GPIO_TogglePin>
		}
		/* BLINK SINGLE YELLOW LED END */

		/* DISPLAYING MODE START */
		if(timer2_flag==1){
 8000c60:	4b1d      	ldr	r3, [pc, #116]	; (8000cd8 <fsm_for_input_processing+0x2d8>)
 8000c62:	681b      	ldr	r3, [r3, #0]
 8000c64:	2b01      	cmp	r3, #1
 8000c66:	d10a      	bne.n	8000c7e <fsm_for_input_processing+0x27e>
			setTimer2(T_7SEGLED);
 8000c68:	20fa      	movs	r0, #250	; 0xfa
 8000c6a:	f7ff fd59 	bl	8000720 <setTimer2>
			Switch7SEGLEDIndex();
 8000c6e:	f000 fa17 	bl	80010a0 <Switch7SEGLEDIndex>
			displayMode(3);
 8000c72:	2003      	movs	r0, #3
 8000c74:	f000 fa7a 	bl	800116c <displayMode>
			loadLedTempDuration(YELLOW);  //LOAD RED LED TEMPORARY DURATION START
 8000c78:	2001      	movs	r0, #1
 8000c7a:	f000 fa89 	bl	8001190 <loadLedTempDuration>
		}
		/* DISPLAYING MODE END */

		/*EXECUTE INPUT BUTTON1 START */
		if(button1_executed==0){
 8000c7e:	4b18      	ldr	r3, [pc, #96]	; (8000ce0 <fsm_for_input_processing+0x2e0>)
 8000c80:	681b      	ldr	r3, [r3, #0]
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	d134      	bne.n	8000cf0 <fsm_for_input_processing+0x2f0>
			if(button1_pressed()==TRUE){
 8000c86:	f7ff fe7b 	bl	8000980 <button1_pressed>
 8000c8a:	4603      	mov	r3, r0
 8000c8c:	2b01      	cmp	r3, #1
 8000c8e:	d13b      	bne.n	8000d08 <fsm_for_input_processing+0x308>
				state=MODE4;
 8000c90:	4b04      	ldr	r3, [pc, #16]	; (8000ca4 <fsm_for_input_processing+0x2a4>)
 8000c92:	2204      	movs	r2, #4
 8000c94:	701a      	strb	r2, [r3, #0]
				button1_executed=1;
 8000c96:	4b12      	ldr	r3, [pc, #72]	; (8000ce0 <fsm_for_input_processing+0x2e0>)
 8000c98:	2201      	movs	r2, #1
 8000c9a:	601a      	str	r2, [r3, #0]
				turnOffSingleLed();
 8000c9c:	f000 fc24 	bl	80014e8 <turnOffSingleLed>
 8000ca0:	e032      	b.n	8000d08 <fsm_for_input_processing+0x308>
 8000ca2:	bf00      	nop
 8000ca4:	200000e8 	.word	0x200000e8
 8000ca8:	40010800 	.word	0x40010800
 8000cac:	200000d0 	.word	0x200000d0
 8000cb0:	200000dc 	.word	0x200000dc
 8000cb4:	200000d4 	.word	0x200000d4
 8000cb8:	200000e0 	.word	0x200000e0
 8000cbc:	200000d8 	.word	0x200000d8
 8000cc0:	200000e4 	.word	0x200000e4
 8000cc4:	200000ec 	.word	0x200000ec
 8000cc8:	200000e9 	.word	0x200000e9
 8000ccc:	200000fc 	.word	0x200000fc
 8000cd0:	200000f8 	.word	0x200000f8
 8000cd4:	20000114 	.word	0x20000114
 8000cd8:	200000b8 	.word	0x200000b8
 8000cdc:	200000c8 	.word	0x200000c8
 8000ce0:	20000108 	.word	0x20000108
 8000ce4:	200000b0 	.word	0x200000b0
 8000ce8:	20000110 	.word	0x20000110
 8000cec:	2000010c 	.word	0x2000010c
			}
		}else if(button1_executed==1){
 8000cf0:	4ba4      	ldr	r3, [pc, #656]	; (8000f84 <fsm_for_input_processing+0x584>)
 8000cf2:	681b      	ldr	r3, [r3, #0]
 8000cf4:	2b01      	cmp	r3, #1
 8000cf6:	d107      	bne.n	8000d08 <fsm_for_input_processing+0x308>
			if(button1_pressed()==FALSE){
 8000cf8:	f7ff fe42 	bl	8000980 <button1_pressed>
 8000cfc:	4603      	mov	r3, r0
 8000cfe:	2b00      	cmp	r3, #0
 8000d00:	d102      	bne.n	8000d08 <fsm_for_input_processing+0x308>
				button1_executed=0;
 8000d02:	4ba0      	ldr	r3, [pc, #640]	; (8000f84 <fsm_for_input_processing+0x584>)
 8000d04:	2200      	movs	r2, #0
 8000d06:	601a      	str	r2, [r3, #0]
			}
		}
		/*EXECUTE INPUT BUTTON1 END */

		/*EXECUTE INPUT BUTTON3 START */
		if(button3_pressed()==TRUE){
 8000d08:	f7ff fe6a 	bl	80009e0 <button3_pressed>
 8000d0c:	4603      	mov	r3, r0
 8000d0e:	2b01      	cmp	r3, #1
 8000d10:	d105      	bne.n	8000d1e <fsm_for_input_processing+0x31e>
			state=UPDATE_DURATION;
 8000d12:	4b9d      	ldr	r3, [pc, #628]	; (8000f88 <fsm_for_input_processing+0x588>)
 8000d14:	2207      	movs	r2, #7
 8000d16:	701a      	strb	r2, [r3, #0]
			LedToChange=YELLOW;
 8000d18:	4b9c      	ldr	r3, [pc, #624]	; (8000f8c <fsm_for_input_processing+0x58c>)
 8000d1a:	2201      	movs	r2, #1
 8000d1c:	701a      	strb	r2, [r3, #0]
		}
		/*EXECUTE INPUT BUTTON3 END */

		/*EXECUTE INPUT BUTTON2 START */
		if(button2_pressed()==TRUE){
 8000d1e:	f7ff fe3f 	bl	80009a0 <button2_pressed>
 8000d22:	4603      	mov	r3, r0
 8000d24:	2b01      	cmp	r3, #1
 8000d26:	f040 8164 	bne.w	8000ff2 <fsm_for_input_processing+0x5f2>
			state=INCREASE;
 8000d2a:	4b97      	ldr	r3, [pc, #604]	; (8000f88 <fsm_for_input_processing+0x588>)
 8000d2c:	2205      	movs	r2, #5
 8000d2e:	701a      	strb	r2, [r3, #0]
			LedToChange=YELLOW;
 8000d30:	4b96      	ldr	r3, [pc, #600]	; (8000f8c <fsm_for_input_processing+0x58c>)
 8000d32:	2201      	movs	r2, #1
 8000d34:	701a      	strb	r2, [r3, #0]
			button2_increase1=0;
 8000d36:	4b96      	ldr	r3, [pc, #600]	; (8000f90 <fsm_for_input_processing+0x590>)
 8000d38:	2200      	movs	r2, #0
 8000d3a:	601a      	str	r2, [r3, #0]
		}
		/*EXECUTE INPUT BUTTON2 END */
		//TO DO
		break;
 8000d3c:	e159      	b.n	8000ff2 <fsm_for_input_processing+0x5f2>
	case MODE4:
		loadLedTempDuration(GREEN);  //LOAD RED LED TEMPORARY DURATION START
 8000d3e:	2002      	movs	r0, #2
 8000d40:	f000 fa26 	bl	8001190 <loadLedTempDuration>

		/* BLINK SINGLE GREEN LED START */
		if(timer1_flag==1){
 8000d44:	4b93      	ldr	r3, [pc, #588]	; (8000f94 <fsm_for_input_processing+0x594>)
 8000d46:	681b      	ldr	r3, [r3, #0]
 8000d48:	2b01      	cmp	r3, #1
 8000d4a:	d10b      	bne.n	8000d64 <fsm_for_input_processing+0x364>
			setTimer1(250);
 8000d4c:	20fa      	movs	r0, #250	; 0xfa
 8000d4e:	f7ff fccd 	bl	80006ec <setTimer1>
			HAL_GPIO_TogglePin(GREEN_LED1_GPIO_Port, GREEN_LED1_Pin);  //TOGGLE RED LEDS IN 2 WAY
 8000d52:	2180      	movs	r1, #128	; 0x80
 8000d54:	4890      	ldr	r0, [pc, #576]	; (8000f98 <fsm_for_input_processing+0x598>)
 8000d56:	f001 f906 	bl	8001f66 <HAL_GPIO_TogglePin>
			HAL_GPIO_TogglePin(GREEN_LED2_GPIO_Port, GREEN_LED2_Pin);
 8000d5a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000d5e:	488e      	ldr	r0, [pc, #568]	; (8000f98 <fsm_for_input_processing+0x598>)
 8000d60:	f001 f901 	bl	8001f66 <HAL_GPIO_TogglePin>
		}
		/* BLINK SINGLE GREEN LED END */

		/* DISPLAYING MODE START */
		if(timer2_flag==1){
 8000d64:	4b8d      	ldr	r3, [pc, #564]	; (8000f9c <fsm_for_input_processing+0x59c>)
 8000d66:	681b      	ldr	r3, [r3, #0]
 8000d68:	2b01      	cmp	r3, #1
 8000d6a:	d10a      	bne.n	8000d82 <fsm_for_input_processing+0x382>
			setTimer2(T_7SEGLED);
 8000d6c:	20fa      	movs	r0, #250	; 0xfa
 8000d6e:	f7ff fcd7 	bl	8000720 <setTimer2>
			Switch7SEGLEDIndex();
 8000d72:	f000 f995 	bl	80010a0 <Switch7SEGLEDIndex>
			displayMode(4);
 8000d76:	2004      	movs	r0, #4
 8000d78:	f000 f9f8 	bl	800116c <displayMode>
			loadLedTempDuration(GREEN);  //LOAD RED LED TEMPORARY DURATION START
 8000d7c:	2002      	movs	r0, #2
 8000d7e:	f000 fa07 	bl	8001190 <loadLedTempDuration>
		}
		/* DISPLAYING MODE END */

		/*EXECUTE INPUT BUTTON1 START */
		if(button1_executed==0){
 8000d82:	4b80      	ldr	r3, [pc, #512]	; (8000f84 <fsm_for_input_processing+0x584>)
 8000d84:	681b      	ldr	r3, [r3, #0]
 8000d86:	2b00      	cmp	r3, #0
 8000d88:	d110      	bne.n	8000dac <fsm_for_input_processing+0x3ac>
			if(button1_pressed()==TRUE){
 8000d8a:	f7ff fdf9 	bl	8000980 <button1_pressed>
 8000d8e:	4603      	mov	r3, r0
 8000d90:	2b01      	cmp	r3, #1
 8000d92:	d117      	bne.n	8000dc4 <fsm_for_input_processing+0x3c4>
				state=INIT;
 8000d94:	4b7c      	ldr	r3, [pc, #496]	; (8000f88 <fsm_for_input_processing+0x588>)
 8000d96:	2200      	movs	r2, #0
 8000d98:	701a      	strb	r2, [r3, #0]
				button1_executed=1;
 8000d9a:	4b7a      	ldr	r3, [pc, #488]	; (8000f84 <fsm_for_input_processing+0x584>)
 8000d9c:	2201      	movs	r2, #1
 8000d9e:	601a      	str	r2, [r3, #0]
				setTimer1(0); //turn off or reset timer 1
 8000da0:	2000      	movs	r0, #0
 8000da2:	f7ff fca3 	bl	80006ec <setTimer1>
				turnOffSingleLed();
 8000da6:	f000 fb9f 	bl	80014e8 <turnOffSingleLed>
 8000daa:	e00b      	b.n	8000dc4 <fsm_for_input_processing+0x3c4>
			}
		}else if(button1_executed==1){
 8000dac:	4b75      	ldr	r3, [pc, #468]	; (8000f84 <fsm_for_input_processing+0x584>)
 8000dae:	681b      	ldr	r3, [r3, #0]
 8000db0:	2b01      	cmp	r3, #1
 8000db2:	d107      	bne.n	8000dc4 <fsm_for_input_processing+0x3c4>
			if(button1_pressed()==FALSE){
 8000db4:	f7ff fde4 	bl	8000980 <button1_pressed>
 8000db8:	4603      	mov	r3, r0
 8000dba:	2b00      	cmp	r3, #0
 8000dbc:	d102      	bne.n	8000dc4 <fsm_for_input_processing+0x3c4>
				button1_executed=0;
 8000dbe:	4b71      	ldr	r3, [pc, #452]	; (8000f84 <fsm_for_input_processing+0x584>)
 8000dc0:	2200      	movs	r2, #0
 8000dc2:	601a      	str	r2, [r3, #0]
			}
		}
		/*EXECUTE INPUT BUTTON1 END */

		/*EXECUTE INPUT BUTTON3 START */
		if(button3_pressed()==TRUE){
 8000dc4:	f7ff fe0c 	bl	80009e0 <button3_pressed>
 8000dc8:	4603      	mov	r3, r0
 8000dca:	2b01      	cmp	r3, #1
 8000dcc:	d105      	bne.n	8000dda <fsm_for_input_processing+0x3da>
			state=UPDATE_DURATION;
 8000dce:	4b6e      	ldr	r3, [pc, #440]	; (8000f88 <fsm_for_input_processing+0x588>)
 8000dd0:	2207      	movs	r2, #7
 8000dd2:	701a      	strb	r2, [r3, #0]
			LedToChange=GREEN;
 8000dd4:	4b6d      	ldr	r3, [pc, #436]	; (8000f8c <fsm_for_input_processing+0x58c>)
 8000dd6:	2202      	movs	r2, #2
 8000dd8:	701a      	strb	r2, [r3, #0]
		}
		/*EXECUTE INPUT BUTTON3 END */

		/*EXECUTE INPUT BUTTON2 START */
		if(button2_pressed()==TRUE){
 8000dda:	f7ff fde1 	bl	80009a0 <button2_pressed>
 8000dde:	4603      	mov	r3, r0
 8000de0:	2b01      	cmp	r3, #1
 8000de2:	f040 8108 	bne.w	8000ff6 <fsm_for_input_processing+0x5f6>
			state=INCREASE;
 8000de6:	4b68      	ldr	r3, [pc, #416]	; (8000f88 <fsm_for_input_processing+0x588>)
 8000de8:	2205      	movs	r2, #5
 8000dea:	701a      	strb	r2, [r3, #0]
			LedToChange=GREEN;
 8000dec:	4b67      	ldr	r3, [pc, #412]	; (8000f8c <fsm_for_input_processing+0x58c>)
 8000dee:	2202      	movs	r2, #2
 8000df0:	701a      	strb	r2, [r3, #0]
			button2_increase1=0;
 8000df2:	4b67      	ldr	r3, [pc, #412]	; (8000f90 <fsm_for_input_processing+0x590>)
 8000df4:	2200      	movs	r2, #0
 8000df6:	601a      	str	r2, [r3, #0]
		}
		/*EXECUTE INPUT BUTTON2 END */
		//TO DO
		break;
 8000df8:	e0fd      	b.n	8000ff6 <fsm_for_input_processing+0x5f6>
	case INCREASE:
		/* BLINK SINGLE LED START */
		if(timer1_flag==1){
 8000dfa:	4b66      	ldr	r3, [pc, #408]	; (8000f94 <fsm_for_input_processing+0x594>)
 8000dfc:	681b      	ldr	r3, [r3, #0]
 8000dfe:	2b01      	cmp	r3, #1
 8000e00:	d107      	bne.n	8000e12 <fsm_for_input_processing+0x412>
			setTimer1(250);
 8000e02:	20fa      	movs	r0, #250	; 0xfa
 8000e04:	f7ff fc72 	bl	80006ec <setTimer1>
			ledBlinking(LedToChange);
 8000e08:	4b60      	ldr	r3, [pc, #384]	; (8000f8c <fsm_for_input_processing+0x58c>)
 8000e0a:	781b      	ldrb	r3, [r3, #0]
 8000e0c:	4618      	mov	r0, r3
 8000e0e:	f000 fb93 	bl	8001538 <ledBlinking>
		}
		/* BLINK SINGLE LED END */

		/* DISPLAYING MODE START */
		if(timer2_flag==1){
 8000e12:	4b62      	ldr	r3, [pc, #392]	; (8000f9c <fsm_for_input_processing+0x59c>)
 8000e14:	681b      	ldr	r3, [r3, #0]
 8000e16:	2b01      	cmp	r3, #1
 8000e18:	d120      	bne.n	8000e5c <fsm_for_input_processing+0x45c>
			setTimer2(T_7SEGLED);
 8000e1a:	20fa      	movs	r0, #250	; 0xfa
 8000e1c:	f7ff fc80 	bl	8000720 <setTimer2>
			Switch7SEGLEDIndex();
 8000e20:	f000 f93e 	bl	80010a0 <Switch7SEGLEDIndex>
			if(LedToChange==RED)
 8000e24:	4b59      	ldr	r3, [pc, #356]	; (8000f8c <fsm_for_input_processing+0x58c>)
 8000e26:	781b      	ldrb	r3, [r3, #0]
 8000e28:	2b00      	cmp	r3, #0
 8000e2a:	d103      	bne.n	8000e34 <fsm_for_input_processing+0x434>
				displayMode(2);
 8000e2c:	2002      	movs	r0, #2
 8000e2e:	f000 f99d 	bl	800116c <displayMode>
 8000e32:	e00e      	b.n	8000e52 <fsm_for_input_processing+0x452>
			else if(LedToChange==YELLOW)
 8000e34:	4b55      	ldr	r3, [pc, #340]	; (8000f8c <fsm_for_input_processing+0x58c>)
 8000e36:	781b      	ldrb	r3, [r3, #0]
 8000e38:	2b01      	cmp	r3, #1
 8000e3a:	d103      	bne.n	8000e44 <fsm_for_input_processing+0x444>
				displayMode(3);
 8000e3c:	2003      	movs	r0, #3
 8000e3e:	f000 f995 	bl	800116c <displayMode>
 8000e42:	e006      	b.n	8000e52 <fsm_for_input_processing+0x452>
			else if(LedToChange==GREEN)
 8000e44:	4b51      	ldr	r3, [pc, #324]	; (8000f8c <fsm_for_input_processing+0x58c>)
 8000e46:	781b      	ldrb	r3, [r3, #0]
 8000e48:	2b02      	cmp	r3, #2
 8000e4a:	d102      	bne.n	8000e52 <fsm_for_input_processing+0x452>
				displayMode(4);
 8000e4c:	2004      	movs	r0, #4
 8000e4e:	f000 f98d 	bl	800116c <displayMode>

			loadLedTempDuration(LedToChange);
 8000e52:	4b4e      	ldr	r3, [pc, #312]	; (8000f8c <fsm_for_input_processing+0x58c>)
 8000e54:	781b      	ldrb	r3, [r3, #0]
 8000e56:	4618      	mov	r0, r3
 8000e58:	f000 f99a 	bl	8001190 <loadLedTempDuration>
		}
		/* DISPLAYING MODE END */

		/* EXECUTE INPUT BUTTON2 START */
		if(button2_pressed_1s()==TRUE){
 8000e5c:	f7ff fdb0 	bl	80009c0 <button2_pressed_1s>
 8000e60:	4603      	mov	r3, r0
 8000e62:	2b01      	cmp	r3, #1
 8000e64:	d107      	bne.n	8000e76 <fsm_for_input_processing+0x476>
			state=INCREASE_500MS;
 8000e66:	4b48      	ldr	r3, [pc, #288]	; (8000f88 <fsm_for_input_processing+0x588>)
 8000e68:	2206      	movs	r2, #6
 8000e6a:	701a      	strb	r2, [r3, #0]
			setTimer3(500);
 8000e6c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000e70:	f7ff fc70 	bl	8000754 <setTimer3>
 8000e74:	e01c      	b.n	8000eb0 <fsm_for_input_processing+0x4b0>
		}else if(button2_pressed()==FALSE){
 8000e76:	f7ff fd93 	bl	80009a0 <button2_pressed>
 8000e7a:	4603      	mov	r3, r0
 8000e7c:	2b00      	cmp	r3, #0
 8000e7e:	d116      	bne.n	8000eae <fsm_for_input_processing+0x4ae>
			switch(LedToChange){
 8000e80:	4b42      	ldr	r3, [pc, #264]	; (8000f8c <fsm_for_input_processing+0x58c>)
 8000e82:	781b      	ldrb	r3, [r3, #0]
 8000e84:	2b02      	cmp	r3, #2
 8000e86:	d00e      	beq.n	8000ea6 <fsm_for_input_processing+0x4a6>
 8000e88:	2b02      	cmp	r3, #2
 8000e8a:	dc11      	bgt.n	8000eb0 <fsm_for_input_processing+0x4b0>
 8000e8c:	2b00      	cmp	r3, #0
 8000e8e:	d002      	beq.n	8000e96 <fsm_for_input_processing+0x496>
 8000e90:	2b01      	cmp	r3, #1
 8000e92:	d004      	beq.n	8000e9e <fsm_for_input_processing+0x49e>
 8000e94:	e00c      	b.n	8000eb0 <fsm_for_input_processing+0x4b0>
				case RED:
					state=MODE2;
 8000e96:	4b3c      	ldr	r3, [pc, #240]	; (8000f88 <fsm_for_input_processing+0x588>)
 8000e98:	2202      	movs	r2, #2
 8000e9a:	701a      	strb	r2, [r3, #0]
					break;
 8000e9c:	e008      	b.n	8000eb0 <fsm_for_input_processing+0x4b0>
				case YELLOW:
					state=MODE3;
 8000e9e:	4b3a      	ldr	r3, [pc, #232]	; (8000f88 <fsm_for_input_processing+0x588>)
 8000ea0:	2203      	movs	r2, #3
 8000ea2:	701a      	strb	r2, [r3, #0]
					break;
 8000ea4:	e004      	b.n	8000eb0 <fsm_for_input_processing+0x4b0>
				case GREEN:
					state=MODE4;
 8000ea6:	4b38      	ldr	r3, [pc, #224]	; (8000f88 <fsm_for_input_processing+0x588>)
 8000ea8:	2204      	movs	r2, #4
 8000eaa:	701a      	strb	r2, [r3, #0]
					break;
 8000eac:	e000      	b.n	8000eb0 <fsm_for_input_processing+0x4b0>
			}
		}
 8000eae:	bf00      	nop
		/* EXECUTE INPUT BUTTON2 START */

		/* INCREASE DURATION START */
		if(button2_increase1==0){
 8000eb0:	4b37      	ldr	r3, [pc, #220]	; (8000f90 <fsm_for_input_processing+0x590>)
 8000eb2:	681b      	ldr	r3, [r3, #0]
 8000eb4:	2b00      	cmp	r3, #0
 8000eb6:	f040 80a0 	bne.w	8000ffa <fsm_for_input_processing+0x5fa>
			increaseTempDur(LedToChange);
 8000eba:	4b34      	ldr	r3, [pc, #208]	; (8000f8c <fsm_for_input_processing+0x58c>)
 8000ebc:	781b      	ldrb	r3, [r3, #0]
 8000ebe:	4618      	mov	r0, r3
 8000ec0:	f000 f998 	bl	80011f4 <increaseTempDur>
			button2_increase1=1;
 8000ec4:	4b32      	ldr	r3, [pc, #200]	; (8000f90 <fsm_for_input_processing+0x590>)
 8000ec6:	2201      	movs	r2, #1
 8000ec8:	601a      	str	r2, [r3, #0]
		}
		/* INCREASE DURATION END */
		//TO DO
		break;
 8000eca:	e096      	b.n	8000ffa <fsm_for_input_processing+0x5fa>
	case INCREASE_500MS:
		/* BLINK SINGLE LED START */
		if(timer1_flag==1){
 8000ecc:	4b31      	ldr	r3, [pc, #196]	; (8000f94 <fsm_for_input_processing+0x594>)
 8000ece:	681b      	ldr	r3, [r3, #0]
 8000ed0:	2b01      	cmp	r3, #1
 8000ed2:	d107      	bne.n	8000ee4 <fsm_for_input_processing+0x4e4>
			setTimer1(250);
 8000ed4:	20fa      	movs	r0, #250	; 0xfa
 8000ed6:	f7ff fc09 	bl	80006ec <setTimer1>
			ledBlinking(LedToChange);
 8000eda:	4b2c      	ldr	r3, [pc, #176]	; (8000f8c <fsm_for_input_processing+0x58c>)
 8000edc:	781b      	ldrb	r3, [r3, #0]
 8000ede:	4618      	mov	r0, r3
 8000ee0:	f000 fb2a 	bl	8001538 <ledBlinking>
		}
		/* BLINK SINGLE LED END */

		/* DISPLAYING MODE START */
		if(timer2_flag==1){
 8000ee4:	4b2d      	ldr	r3, [pc, #180]	; (8000f9c <fsm_for_input_processing+0x59c>)
 8000ee6:	681b      	ldr	r3, [r3, #0]
 8000ee8:	2b01      	cmp	r3, #1
 8000eea:	d120      	bne.n	8000f2e <fsm_for_input_processing+0x52e>
			setTimer2(T_7SEGLED);
 8000eec:	20fa      	movs	r0, #250	; 0xfa
 8000eee:	f7ff fc17 	bl	8000720 <setTimer2>
			Switch7SEGLEDIndex();
 8000ef2:	f000 f8d5 	bl	80010a0 <Switch7SEGLEDIndex>
			if(LedToChange==RED)
 8000ef6:	4b25      	ldr	r3, [pc, #148]	; (8000f8c <fsm_for_input_processing+0x58c>)
 8000ef8:	781b      	ldrb	r3, [r3, #0]
 8000efa:	2b00      	cmp	r3, #0
 8000efc:	d103      	bne.n	8000f06 <fsm_for_input_processing+0x506>
				displayMode(2);
 8000efe:	2002      	movs	r0, #2
 8000f00:	f000 f934 	bl	800116c <displayMode>
 8000f04:	e00e      	b.n	8000f24 <fsm_for_input_processing+0x524>
			else if(LedToChange==YELLOW)
 8000f06:	4b21      	ldr	r3, [pc, #132]	; (8000f8c <fsm_for_input_processing+0x58c>)
 8000f08:	781b      	ldrb	r3, [r3, #0]
 8000f0a:	2b01      	cmp	r3, #1
 8000f0c:	d103      	bne.n	8000f16 <fsm_for_input_processing+0x516>
				displayMode(3);
 8000f0e:	2003      	movs	r0, #3
 8000f10:	f000 f92c 	bl	800116c <displayMode>
 8000f14:	e006      	b.n	8000f24 <fsm_for_input_processing+0x524>
			else if(LedToChange==GREEN)
 8000f16:	4b1d      	ldr	r3, [pc, #116]	; (8000f8c <fsm_for_input_processing+0x58c>)
 8000f18:	781b      	ldrb	r3, [r3, #0]
 8000f1a:	2b02      	cmp	r3, #2
 8000f1c:	d102      	bne.n	8000f24 <fsm_for_input_processing+0x524>
				displayMode(4);
 8000f1e:	2004      	movs	r0, #4
 8000f20:	f000 f924 	bl	800116c <displayMode>
			loadLedTempDuration(LedToChange);  //LOAD RED LED DURATION START
 8000f24:	4b19      	ldr	r3, [pc, #100]	; (8000f8c <fsm_for_input_processing+0x58c>)
 8000f26:	781b      	ldrb	r3, [r3, #0]
 8000f28:	4618      	mov	r0, r3
 8000f2a:	f000 f931 	bl	8001190 <loadLedTempDuration>
		}
		/* DISPLAYING MODE END */

		/* EXECUTE INPUT BUTTON2 START */
		if(button2_pressed()==FALSE){
 8000f2e:	f7ff fd37 	bl	80009a0 <button2_pressed>
 8000f32:	4603      	mov	r3, r0
 8000f34:	2b00      	cmp	r3, #0
 8000f36:	d116      	bne.n	8000f66 <fsm_for_input_processing+0x566>
			switch(LedToChange){
 8000f38:	4b14      	ldr	r3, [pc, #80]	; (8000f8c <fsm_for_input_processing+0x58c>)
 8000f3a:	781b      	ldrb	r3, [r3, #0]
 8000f3c:	2b02      	cmp	r3, #2
 8000f3e:	d00e      	beq.n	8000f5e <fsm_for_input_processing+0x55e>
 8000f40:	2b02      	cmp	r3, #2
 8000f42:	dc11      	bgt.n	8000f68 <fsm_for_input_processing+0x568>
 8000f44:	2b00      	cmp	r3, #0
 8000f46:	d002      	beq.n	8000f4e <fsm_for_input_processing+0x54e>
 8000f48:	2b01      	cmp	r3, #1
 8000f4a:	d004      	beq.n	8000f56 <fsm_for_input_processing+0x556>
 8000f4c:	e00c      	b.n	8000f68 <fsm_for_input_processing+0x568>
				case RED:
					state=MODE2;
 8000f4e:	4b0e      	ldr	r3, [pc, #56]	; (8000f88 <fsm_for_input_processing+0x588>)
 8000f50:	2202      	movs	r2, #2
 8000f52:	701a      	strb	r2, [r3, #0]
					break;
 8000f54:	e008      	b.n	8000f68 <fsm_for_input_processing+0x568>
				case YELLOW:
					state=MODE3;
 8000f56:	4b0c      	ldr	r3, [pc, #48]	; (8000f88 <fsm_for_input_processing+0x588>)
 8000f58:	2203      	movs	r2, #3
 8000f5a:	701a      	strb	r2, [r3, #0]
					break;
 8000f5c:	e004      	b.n	8000f68 <fsm_for_input_processing+0x568>
				case GREEN:
					state=MODE4;
 8000f5e:	4b0a      	ldr	r3, [pc, #40]	; (8000f88 <fsm_for_input_processing+0x588>)
 8000f60:	2204      	movs	r2, #4
 8000f62:	701a      	strb	r2, [r3, #0]
					break;
 8000f64:	e000      	b.n	8000f68 <fsm_for_input_processing+0x568>
			}
		}
 8000f66:	bf00      	nop
		/* EXECUTE INPUT BUTTON2 START */

		/* INCREASE TEMP DURATION START */
		if(timer3_flag==1){
 8000f68:	4b0d      	ldr	r3, [pc, #52]	; (8000fa0 <fsm_for_input_processing+0x5a0>)
 8000f6a:	681b      	ldr	r3, [r3, #0]
 8000f6c:	2b01      	cmp	r3, #1
 8000f6e:	d146      	bne.n	8000ffe <fsm_for_input_processing+0x5fe>
			setTimer3(500);
 8000f70:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000f74:	f7ff fbee 	bl	8000754 <setTimer3>
			increaseTempDur(LedToChange);
 8000f78:	4b04      	ldr	r3, [pc, #16]	; (8000f8c <fsm_for_input_processing+0x58c>)
 8000f7a:	781b      	ldrb	r3, [r3, #0]
 8000f7c:	4618      	mov	r0, r3
 8000f7e:	f000 f939 	bl	80011f4 <increaseTempDur>
		}
		/* INCREASE TEMP DURATION END */
		//TO DO
		break;
 8000f82:	e03c      	b.n	8000ffe <fsm_for_input_processing+0x5fe>
 8000f84:	20000108 	.word	0x20000108
 8000f88:	200000e8 	.word	0x200000e8
 8000f8c:	20000110 	.word	0x20000110
 8000f90:	2000010c 	.word	0x2000010c
 8000f94:	200000b0 	.word	0x200000b0
 8000f98:	40010800 	.word	0x40010800
 8000f9c:	200000b8 	.word	0x200000b8
 8000fa0:	200000c0 	.word	0x200000c0
	case UPDATE_DURATION:
		updateDuration(LedToChange);
 8000fa4:	4b18      	ldr	r3, [pc, #96]	; (8001008 <fsm_for_input_processing+0x608>)
 8000fa6:	781b      	ldrb	r3, [r3, #0]
 8000fa8:	4618      	mov	r0, r3
 8000faa:	f000 f969 	bl	8001280 <updateDuration>
		if(button3_pressed()==FALSE){
 8000fae:	f7ff fd17 	bl	80009e0 <button3_pressed>
 8000fb2:	4603      	mov	r3, r0
 8000fb4:	2b00      	cmp	r3, #0
 8000fb6:	d116      	bne.n	8000fe6 <fsm_for_input_processing+0x5e6>
			switch(LedToChange){
 8000fb8:	4b13      	ldr	r3, [pc, #76]	; (8001008 <fsm_for_input_processing+0x608>)
 8000fba:	781b      	ldrb	r3, [r3, #0]
 8000fbc:	2b02      	cmp	r3, #2
 8000fbe:	d00e      	beq.n	8000fde <fsm_for_input_processing+0x5de>
 8000fc0:	2b02      	cmp	r3, #2
 8000fc2:	dc1e      	bgt.n	8001002 <fsm_for_input_processing+0x602>
 8000fc4:	2b00      	cmp	r3, #0
 8000fc6:	d002      	beq.n	8000fce <fsm_for_input_processing+0x5ce>
 8000fc8:	2b01      	cmp	r3, #1
 8000fca:	d004      	beq.n	8000fd6 <fsm_for_input_processing+0x5d6>
					state=MODE4;
					break;
			}
		}
		//TO DO
		break;
 8000fcc:	e019      	b.n	8001002 <fsm_for_input_processing+0x602>
					state=MODE2;
 8000fce:	4b0f      	ldr	r3, [pc, #60]	; (800100c <fsm_for_input_processing+0x60c>)
 8000fd0:	2202      	movs	r2, #2
 8000fd2:	701a      	strb	r2, [r3, #0]
					break;
 8000fd4:	e008      	b.n	8000fe8 <fsm_for_input_processing+0x5e8>
					state=MODE3;
 8000fd6:	4b0d      	ldr	r3, [pc, #52]	; (800100c <fsm_for_input_processing+0x60c>)
 8000fd8:	2203      	movs	r2, #3
 8000fda:	701a      	strb	r2, [r3, #0]
					break;
 8000fdc:	e004      	b.n	8000fe8 <fsm_for_input_processing+0x5e8>
					state=MODE4;
 8000fde:	4b0b      	ldr	r3, [pc, #44]	; (800100c <fsm_for_input_processing+0x60c>)
 8000fe0:	2204      	movs	r2, #4
 8000fe2:	701a      	strb	r2, [r3, #0]
					break;
 8000fe4:	e000      	b.n	8000fe8 <fsm_for_input_processing+0x5e8>
		}
 8000fe6:	bf00      	nop
		break;
 8000fe8:	e00b      	b.n	8001002 <fsm_for_input_processing+0x602>
		break;
 8000fea:	bf00      	nop
 8000fec:	e00a      	b.n	8001004 <fsm_for_input_processing+0x604>
		break;
 8000fee:	bf00      	nop
 8000ff0:	e008      	b.n	8001004 <fsm_for_input_processing+0x604>
		break;
 8000ff2:	bf00      	nop
 8000ff4:	e006      	b.n	8001004 <fsm_for_input_processing+0x604>
		break;
 8000ff6:	bf00      	nop
 8000ff8:	e004      	b.n	8001004 <fsm_for_input_processing+0x604>
		break;
 8000ffa:	bf00      	nop
 8000ffc:	e002      	b.n	8001004 <fsm_for_input_processing+0x604>
		break;
 8000ffe:	bf00      	nop
 8001000:	e000      	b.n	8001004 <fsm_for_input_processing+0x604>
		break;
 8001002:	bf00      	nop
	}
}
 8001004:	bf00      	nop
 8001006:	bd80      	pop	{r7, pc}
 8001008:	20000110 	.word	0x20000110
 800100c:	200000e8 	.word	0x200000e8

08001010 <update_led_buffer1>:


void update_led_buffer1(int val){
 8001010:	b480      	push	{r7}
 8001012:	b083      	sub	sp, #12
 8001014:	af00      	add	r7, sp, #0
 8001016:	6078      	str	r0, [r7, #4]
	led_buffer1[0]=val/10;
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	4a0d      	ldr	r2, [pc, #52]	; (8001050 <update_led_buffer1+0x40>)
 800101c:	fb82 1203 	smull	r1, r2, r2, r3
 8001020:	1092      	asrs	r2, r2, #2
 8001022:	17db      	asrs	r3, r3, #31
 8001024:	1ad3      	subs	r3, r2, r3
 8001026:	4a0b      	ldr	r2, [pc, #44]	; (8001054 <update_led_buffer1+0x44>)
 8001028:	6013      	str	r3, [r2, #0]
	led_buffer1[1]=val%10;
 800102a:	6879      	ldr	r1, [r7, #4]
 800102c:	4b08      	ldr	r3, [pc, #32]	; (8001050 <update_led_buffer1+0x40>)
 800102e:	fb83 2301 	smull	r2, r3, r3, r1
 8001032:	109a      	asrs	r2, r3, #2
 8001034:	17cb      	asrs	r3, r1, #31
 8001036:	1ad2      	subs	r2, r2, r3
 8001038:	4613      	mov	r3, r2
 800103a:	009b      	lsls	r3, r3, #2
 800103c:	4413      	add	r3, r2
 800103e:	005b      	lsls	r3, r3, #1
 8001040:	1aca      	subs	r2, r1, r3
 8001042:	4b04      	ldr	r3, [pc, #16]	; (8001054 <update_led_buffer1+0x44>)
 8001044:	605a      	str	r2, [r3, #4]
}
 8001046:	bf00      	nop
 8001048:	370c      	adds	r7, #12
 800104a:	46bd      	mov	sp, r7
 800104c:	bc80      	pop	{r7}
 800104e:	4770      	bx	lr
 8001050:	66666667 	.word	0x66666667
 8001054:	20000118 	.word	0x20000118

08001058 <update_led_buffer2>:

void update_led_buffer2(int val){
 8001058:	b480      	push	{r7}
 800105a:	b083      	sub	sp, #12
 800105c:	af00      	add	r7, sp, #0
 800105e:	6078      	str	r0, [r7, #4]
	led_buffer2[0]=val/10;
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	4a0d      	ldr	r2, [pc, #52]	; (8001098 <update_led_buffer2+0x40>)
 8001064:	fb82 1203 	smull	r1, r2, r2, r3
 8001068:	1092      	asrs	r2, r2, #2
 800106a:	17db      	asrs	r3, r3, #31
 800106c:	1ad3      	subs	r3, r2, r3
 800106e:	4a0b      	ldr	r2, [pc, #44]	; (800109c <update_led_buffer2+0x44>)
 8001070:	6013      	str	r3, [r2, #0]
	led_buffer2[1]=val%10;
 8001072:	6879      	ldr	r1, [r7, #4]
 8001074:	4b08      	ldr	r3, [pc, #32]	; (8001098 <update_led_buffer2+0x40>)
 8001076:	fb83 2301 	smull	r2, r3, r3, r1
 800107a:	109a      	asrs	r2, r3, #2
 800107c:	17cb      	asrs	r3, r1, #31
 800107e:	1ad2      	subs	r2, r2, r3
 8001080:	4613      	mov	r3, r2
 8001082:	009b      	lsls	r3, r3, #2
 8001084:	4413      	add	r3, r2
 8001086:	005b      	lsls	r3, r3, #1
 8001088:	1aca      	subs	r2, r1, r3
 800108a:	4b04      	ldr	r3, [pc, #16]	; (800109c <update_led_buffer2+0x44>)
 800108c:	605a      	str	r2, [r3, #4]
}
 800108e:	bf00      	nop
 8001090:	370c      	adds	r7, #12
 8001092:	46bd      	mov	sp, r7
 8001094:	bc80      	pop	{r7}
 8001096:	4770      	bx	lr
 8001098:	66666667 	.word	0x66666667
 800109c:	20000120 	.word	0x20000120

080010a0 <Switch7SEGLEDIndex>:
void Switch7SEGLEDIndex(){
 80010a0:	b480      	push	{r7}
 80010a2:	af00      	add	r7, sp, #0
	index_7SEGLed++;
 80010a4:	4b08      	ldr	r3, [pc, #32]	; (80010c8 <Switch7SEGLEDIndex+0x28>)
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	3301      	adds	r3, #1
 80010aa:	4a07      	ldr	r2, [pc, #28]	; (80010c8 <Switch7SEGLEDIndex+0x28>)
 80010ac:	6013      	str	r3, [r2, #0]
	if(index_7SEGLed>=MAX_LED){
 80010ae:	4b06      	ldr	r3, [pc, #24]	; (80010c8 <Switch7SEGLEDIndex+0x28>)
 80010b0:	681b      	ldr	r3, [r3, #0]
 80010b2:	2202      	movs	r2, #2
 80010b4:	4293      	cmp	r3, r2
 80010b6:	db02      	blt.n	80010be <Switch7SEGLEDIndex+0x1e>
		index_7SEGLed=0;
 80010b8:	4b03      	ldr	r3, [pc, #12]	; (80010c8 <Switch7SEGLEDIndex+0x28>)
 80010ba:	2200      	movs	r2, #0
 80010bc:	601a      	str	r2, [r3, #0]
	}
}
 80010be:	bf00      	nop
 80010c0:	46bd      	mov	sp, r7
 80010c2:	bc80      	pop	{r7}
 80010c4:	4770      	bx	lr
 80010c6:	bf00      	nop
 80010c8:	20000114 	.word	0x20000114

080010cc <update7SEG>:

void update7SEG(int index){
 80010cc:	b580      	push	{r7, lr}
 80010ce:	b082      	sub	sp, #8
 80010d0:	af00      	add	r7, sp, #0
 80010d2:	6078      	str	r0, [r7, #4]
	switch(index){
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	d003      	beq.n	80010e2 <update7SEG+0x16>
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	2b01      	cmp	r3, #1
 80010de:	d019      	beq.n	8001114 <update7SEG+0x48>
			HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, 0);	//TURN ON THIS 7SEG
			display7SEG(GPIO_Port_LED7SEG1,GPIO_Pin_LED7SEG1,led_buffer1[1]);
			display7SEG(GPIO_Port_LED7SEG2,GPIO_Pin_LED7SEG2,led_buffer2[1]);
		break;
	}
}
 80010e0:	e031      	b.n	8001146 <update7SEG+0x7a>
			HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, 1);	//TURN OFF PREVIOUS 7SEG
 80010e2:	2201      	movs	r2, #1
 80010e4:	2104      	movs	r1, #4
 80010e6:	481a      	ldr	r0, [pc, #104]	; (8001150 <update7SEG+0x84>)
 80010e8:	f000 ff25 	bl	8001f36 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, 0);	//TURN ON THIS 7SEG
 80010ec:	2200      	movs	r2, #0
 80010ee:	2102      	movs	r1, #2
 80010f0:	4817      	ldr	r0, [pc, #92]	; (8001150 <update7SEG+0x84>)
 80010f2:	f000 ff20 	bl	8001f36 <HAL_GPIO_WritePin>
			display7SEG(GPIO_Port_LED7SEG1,GPIO_Pin_LED7SEG1,led_buffer1[0]);
 80010f6:	4b17      	ldr	r3, [pc, #92]	; (8001154 <update7SEG+0x88>)
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	461a      	mov	r2, r3
 80010fc:	4916      	ldr	r1, [pc, #88]	; (8001158 <update7SEG+0x8c>)
 80010fe:	4817      	ldr	r0, [pc, #92]	; (800115c <update7SEG+0x90>)
 8001100:	f7ff f824 	bl	800014c <display7SEG>
			display7SEG(GPIO_Port_LED7SEG2,GPIO_Pin_LED7SEG2,led_buffer2[0]);
 8001104:	4b16      	ldr	r3, [pc, #88]	; (8001160 <update7SEG+0x94>)
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	461a      	mov	r2, r3
 800110a:	4916      	ldr	r1, [pc, #88]	; (8001164 <update7SEG+0x98>)
 800110c:	4816      	ldr	r0, [pc, #88]	; (8001168 <update7SEG+0x9c>)
 800110e:	f7ff f81d 	bl	800014c <display7SEG>
		break;
 8001112:	e018      	b.n	8001146 <update7SEG+0x7a>
			HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, 1);	//TURN OFF PREVIOUS 7SEG
 8001114:	2201      	movs	r2, #1
 8001116:	2102      	movs	r1, #2
 8001118:	480d      	ldr	r0, [pc, #52]	; (8001150 <update7SEG+0x84>)
 800111a:	f000 ff0c 	bl	8001f36 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, 0);	//TURN ON THIS 7SEG
 800111e:	2200      	movs	r2, #0
 8001120:	2104      	movs	r1, #4
 8001122:	480b      	ldr	r0, [pc, #44]	; (8001150 <update7SEG+0x84>)
 8001124:	f000 ff07 	bl	8001f36 <HAL_GPIO_WritePin>
			display7SEG(GPIO_Port_LED7SEG1,GPIO_Pin_LED7SEG1,led_buffer1[1]);
 8001128:	4b0a      	ldr	r3, [pc, #40]	; (8001154 <update7SEG+0x88>)
 800112a:	685b      	ldr	r3, [r3, #4]
 800112c:	461a      	mov	r2, r3
 800112e:	490a      	ldr	r1, [pc, #40]	; (8001158 <update7SEG+0x8c>)
 8001130:	480a      	ldr	r0, [pc, #40]	; (800115c <update7SEG+0x90>)
 8001132:	f7ff f80b 	bl	800014c <display7SEG>
			display7SEG(GPIO_Port_LED7SEG2,GPIO_Pin_LED7SEG2,led_buffer2[1]);
 8001136:	4b0a      	ldr	r3, [pc, #40]	; (8001160 <update7SEG+0x94>)
 8001138:	685b      	ldr	r3, [r3, #4]
 800113a:	461a      	mov	r2, r3
 800113c:	4909      	ldr	r1, [pc, #36]	; (8001164 <update7SEG+0x98>)
 800113e:	480a      	ldr	r0, [pc, #40]	; (8001168 <update7SEG+0x9c>)
 8001140:	f7ff f804 	bl	800014c <display7SEG>
		break;
 8001144:	bf00      	nop
}
 8001146:	bf00      	nop
 8001148:	3708      	adds	r7, #8
 800114a:	46bd      	mov	sp, r7
 800114c:	bd80      	pop	{r7, pc}
 800114e:	bf00      	nop
 8001150:	40010800 	.word	0x40010800
 8001154:	20000118 	.word	0x20000118
 8001158:	20000048 	.word	0x20000048
 800115c:	2000002c 	.word	0x2000002c
 8001160:	20000120 	.word	0x20000120
 8001164:	20000074 	.word	0x20000074
 8001168:	20000058 	.word	0x20000058

0800116c <displayMode>:

void displayMode(int mode){
 800116c:	b580      	push	{r7, lr}
 800116e:	b082      	sub	sp, #8
 8001170:	af00      	add	r7, sp, #0
 8001172:	6078      	str	r0, [r7, #4]
	update_led_buffer1(mode);
 8001174:	6878      	ldr	r0, [r7, #4]
 8001176:	f7ff ff4b 	bl	8001010 <update_led_buffer1>
	update7SEG(index_7SEGLed);
 800117a:	4b04      	ldr	r3, [pc, #16]	; (800118c <displayMode+0x20>)
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	4618      	mov	r0, r3
 8001180:	f7ff ffa4 	bl	80010cc <update7SEG>
}
 8001184:	bf00      	nop
 8001186:	3708      	adds	r7, #8
 8001188:	46bd      	mov	sp, r7
 800118a:	bd80      	pop	{r7, pc}
 800118c:	20000114 	.word	0x20000114

08001190 <loadLedTempDuration>:

void loadLedTempDuration(enum LED color){
 8001190:	b580      	push	{r7, lr}
 8001192:	b082      	sub	sp, #8
 8001194:	af00      	add	r7, sp, #0
 8001196:	4603      	mov	r3, r0
 8001198:	71fb      	strb	r3, [r7, #7]
	switch(color){
 800119a:	79fb      	ldrb	r3, [r7, #7]
 800119c:	2b02      	cmp	r3, #2
 800119e:	d012      	beq.n	80011c6 <loadLedTempDuration+0x36>
 80011a0:	2b02      	cmp	r3, #2
 80011a2:	dc16      	bgt.n	80011d2 <loadLedTempDuration+0x42>
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	d002      	beq.n	80011ae <loadLedTempDuration+0x1e>
 80011a8:	2b01      	cmp	r3, #1
 80011aa:	d006      	beq.n	80011ba <loadLedTempDuration+0x2a>
 80011ac:	e011      	b.n	80011d2 <loadLedTempDuration+0x42>
	case RED:
		update_led_buffer2(red_temp_dur);
 80011ae:	4b0d      	ldr	r3, [pc, #52]	; (80011e4 <loadLedTempDuration+0x54>)
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	4618      	mov	r0, r3
 80011b4:	f7ff ff50 	bl	8001058 <update_led_buffer2>
		break;
 80011b8:	e00b      	b.n	80011d2 <loadLedTempDuration+0x42>
	case YELLOW:
		update_led_buffer2(yellow_temp_dur);
 80011ba:	4b0b      	ldr	r3, [pc, #44]	; (80011e8 <loadLedTempDuration+0x58>)
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	4618      	mov	r0, r3
 80011c0:	f7ff ff4a 	bl	8001058 <update_led_buffer2>
		break;
 80011c4:	e005      	b.n	80011d2 <loadLedTempDuration+0x42>
	case GREEN:
		update_led_buffer2(green_temp_dur);
 80011c6:	4b09      	ldr	r3, [pc, #36]	; (80011ec <loadLedTempDuration+0x5c>)
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	4618      	mov	r0, r3
 80011cc:	f7ff ff44 	bl	8001058 <update_led_buffer2>
		break;
 80011d0:	bf00      	nop
	}
	update7SEG(index_7SEGLed);
 80011d2:	4b07      	ldr	r3, [pc, #28]	; (80011f0 <loadLedTempDuration+0x60>)
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	4618      	mov	r0, r3
 80011d8:	f7ff ff78 	bl	80010cc <update7SEG>
}
 80011dc:	bf00      	nop
 80011de:	3708      	adds	r7, #8
 80011e0:	46bd      	mov	sp, r7
 80011e2:	bd80      	pop	{r7, pc}
 80011e4:	200000dc 	.word	0x200000dc
 80011e8:	200000e0 	.word	0x200000e0
 80011ec:	200000e4 	.word	0x200000e4
 80011f0:	20000114 	.word	0x20000114

080011f4 <increaseTempDur>:
void increaseTempDur(enum LED color){
 80011f4:	b480      	push	{r7}
 80011f6:	b083      	sub	sp, #12
 80011f8:	af00      	add	r7, sp, #0
 80011fa:	4603      	mov	r3, r0
 80011fc:	71fb      	strb	r3, [r7, #7]
	switch(color){
 80011fe:	79fb      	ldrb	r3, [r7, #7]
 8001200:	2b02      	cmp	r3, #2
 8001202:	d020      	beq.n	8001246 <increaseTempDur+0x52>
 8001204:	2b02      	cmp	r3, #2
 8001206:	dc30      	bgt.n	800126a <increaseTempDur+0x76>
 8001208:	2b00      	cmp	r3, #0
 800120a:	d002      	beq.n	8001212 <increaseTempDur+0x1e>
 800120c:	2b01      	cmp	r3, #1
 800120e:	d00d      	beq.n	800122c <increaseTempDur+0x38>
			green_temp_dur++;
			if(red_temp_dur>99)
				green_temp_dur=1;
			break;
	}
}
 8001210:	e02b      	b.n	800126a <increaseTempDur+0x76>
			red_temp_dur++;
 8001212:	4b18      	ldr	r3, [pc, #96]	; (8001274 <increaseTempDur+0x80>)
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	3301      	adds	r3, #1
 8001218:	4a16      	ldr	r2, [pc, #88]	; (8001274 <increaseTempDur+0x80>)
 800121a:	6013      	str	r3, [r2, #0]
			if(red_temp_dur>99)
 800121c:	4b15      	ldr	r3, [pc, #84]	; (8001274 <increaseTempDur+0x80>)
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	2b63      	cmp	r3, #99	; 0x63
 8001222:	dd1d      	ble.n	8001260 <increaseTempDur+0x6c>
				red_temp_dur=1;
 8001224:	4b13      	ldr	r3, [pc, #76]	; (8001274 <increaseTempDur+0x80>)
 8001226:	2201      	movs	r2, #1
 8001228:	601a      	str	r2, [r3, #0]
			break;
 800122a:	e019      	b.n	8001260 <increaseTempDur+0x6c>
			yellow_temp_dur++;
 800122c:	4b12      	ldr	r3, [pc, #72]	; (8001278 <increaseTempDur+0x84>)
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	3301      	adds	r3, #1
 8001232:	4a11      	ldr	r2, [pc, #68]	; (8001278 <increaseTempDur+0x84>)
 8001234:	6013      	str	r3, [r2, #0]
			if(yellow_temp_dur>99)
 8001236:	4b10      	ldr	r3, [pc, #64]	; (8001278 <increaseTempDur+0x84>)
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	2b63      	cmp	r3, #99	; 0x63
 800123c:	dd12      	ble.n	8001264 <increaseTempDur+0x70>
				yellow_temp_dur=1;
 800123e:	4b0e      	ldr	r3, [pc, #56]	; (8001278 <increaseTempDur+0x84>)
 8001240:	2201      	movs	r2, #1
 8001242:	601a      	str	r2, [r3, #0]
			break;
 8001244:	e00e      	b.n	8001264 <increaseTempDur+0x70>
			green_temp_dur++;
 8001246:	4b0d      	ldr	r3, [pc, #52]	; (800127c <increaseTempDur+0x88>)
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	3301      	adds	r3, #1
 800124c:	4a0b      	ldr	r2, [pc, #44]	; (800127c <increaseTempDur+0x88>)
 800124e:	6013      	str	r3, [r2, #0]
			if(red_temp_dur>99)
 8001250:	4b08      	ldr	r3, [pc, #32]	; (8001274 <increaseTempDur+0x80>)
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	2b63      	cmp	r3, #99	; 0x63
 8001256:	dd07      	ble.n	8001268 <increaseTempDur+0x74>
				green_temp_dur=1;
 8001258:	4b08      	ldr	r3, [pc, #32]	; (800127c <increaseTempDur+0x88>)
 800125a:	2201      	movs	r2, #1
 800125c:	601a      	str	r2, [r3, #0]
			break;
 800125e:	e003      	b.n	8001268 <increaseTempDur+0x74>
			break;
 8001260:	bf00      	nop
 8001262:	e002      	b.n	800126a <increaseTempDur+0x76>
			break;
 8001264:	bf00      	nop
 8001266:	e000      	b.n	800126a <increaseTempDur+0x76>
			break;
 8001268:	bf00      	nop
}
 800126a:	bf00      	nop
 800126c:	370c      	adds	r7, #12
 800126e:	46bd      	mov	sp, r7
 8001270:	bc80      	pop	{r7}
 8001272:	4770      	bx	lr
 8001274:	200000dc 	.word	0x200000dc
 8001278:	200000e0 	.word	0x200000e0
 800127c:	200000e4 	.word	0x200000e4

08001280 <updateDuration>:

void updateDuration(enum LED color){
 8001280:	b480      	push	{r7}
 8001282:	b083      	sub	sp, #12
 8001284:	af00      	add	r7, sp, #0
 8001286:	4603      	mov	r3, r0
 8001288:	71fb      	strb	r3, [r7, #7]
	switch(color){
 800128a:	79fb      	ldrb	r3, [r7, #7]
 800128c:	2b02      	cmp	r3, #2
 800128e:	d010      	beq.n	80012b2 <updateDuration+0x32>
 8001290:	2b02      	cmp	r3, #2
 8001292:	dc13      	bgt.n	80012bc <updateDuration+0x3c>
 8001294:	2b00      	cmp	r3, #0
 8001296:	d002      	beq.n	800129e <updateDuration+0x1e>
 8001298:	2b01      	cmp	r3, #1
 800129a:	d005      	beq.n	80012a8 <updateDuration+0x28>
			break;
		case GREEN:
			GREEN_DURATION=green_temp_dur;
			break;
	}
}
 800129c:	e00e      	b.n	80012bc <updateDuration+0x3c>
			RED_DURATION=red_temp_dur;
 800129e:	4b0a      	ldr	r3, [pc, #40]	; (80012c8 <updateDuration+0x48>)
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	4a0a      	ldr	r2, [pc, #40]	; (80012cc <updateDuration+0x4c>)
 80012a4:	6013      	str	r3, [r2, #0]
			break;
 80012a6:	e009      	b.n	80012bc <updateDuration+0x3c>
			YELLOW_DURATION=yellow_temp_dur;
 80012a8:	4b09      	ldr	r3, [pc, #36]	; (80012d0 <updateDuration+0x50>)
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	4a09      	ldr	r2, [pc, #36]	; (80012d4 <updateDuration+0x54>)
 80012ae:	6013      	str	r3, [r2, #0]
			break;
 80012b0:	e004      	b.n	80012bc <updateDuration+0x3c>
			GREEN_DURATION=green_temp_dur;
 80012b2:	4b09      	ldr	r3, [pc, #36]	; (80012d8 <updateDuration+0x58>)
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	4a09      	ldr	r2, [pc, #36]	; (80012dc <updateDuration+0x5c>)
 80012b8:	6013      	str	r3, [r2, #0]
			break;
 80012ba:	bf00      	nop
}
 80012bc:	bf00      	nop
 80012be:	370c      	adds	r7, #12
 80012c0:	46bd      	mov	sp, r7
 80012c2:	bc80      	pop	{r7}
 80012c4:	4770      	bx	lr
 80012c6:	bf00      	nop
 80012c8:	200000dc 	.word	0x200000dc
 80012cc:	200000d0 	.word	0x200000d0
 80012d0:	200000e0 	.word	0x200000e0
 80012d4:	200000d4 	.word	0x200000d4
 80012d8:	200000e4 	.word	0x200000e4
 80012dc:	200000d8 	.word	0x200000d8

080012e0 <display7SEGMode1>:

void display7SEGMode1(){
 80012e0:	b580      	push	{r7, lr}
 80012e2:	af00      	add	r7, sp, #0
	switch(current_led_way1){
 80012e4:	4b20      	ldr	r3, [pc, #128]	; (8001368 <display7SEGMode1+0x88>)
 80012e6:	781b      	ldrb	r3, [r3, #0]
 80012e8:	2b02      	cmp	r3, #2
 80012ea:	d012      	beq.n	8001312 <display7SEGMode1+0x32>
 80012ec:	2b02      	cmp	r3, #2
 80012ee:	dc16      	bgt.n	800131e <display7SEGMode1+0x3e>
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	d002      	beq.n	80012fa <display7SEGMode1+0x1a>
 80012f4:	2b01      	cmp	r3, #1
 80012f6:	d006      	beq.n	8001306 <display7SEGMode1+0x26>
 80012f8:	e011      	b.n	800131e <display7SEGMode1+0x3e>
	case RED:
		update_led_buffer1(leds_way1_count[0]);
 80012fa:	4b1c      	ldr	r3, [pc, #112]	; (800136c <display7SEGMode1+0x8c>)
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	4618      	mov	r0, r3
 8001300:	f7ff fe86 	bl	8001010 <update_led_buffer1>
		break;
 8001304:	e00b      	b.n	800131e <display7SEGMode1+0x3e>
	case YELLOW:
		update_led_buffer1(leds_way1_count[1]);
 8001306:	4b19      	ldr	r3, [pc, #100]	; (800136c <display7SEGMode1+0x8c>)
 8001308:	685b      	ldr	r3, [r3, #4]
 800130a:	4618      	mov	r0, r3
 800130c:	f7ff fe80 	bl	8001010 <update_led_buffer1>
		break;
 8001310:	e005      	b.n	800131e <display7SEGMode1+0x3e>
	case GREEN:
		update_led_buffer1(leds_way1_count[2]);
 8001312:	4b16      	ldr	r3, [pc, #88]	; (800136c <display7SEGMode1+0x8c>)
 8001314:	689b      	ldr	r3, [r3, #8]
 8001316:	4618      	mov	r0, r3
 8001318:	f7ff fe7a 	bl	8001010 <update_led_buffer1>
		break;
 800131c:	bf00      	nop
	}

	switch(current_led_way2){
 800131e:	4b14      	ldr	r3, [pc, #80]	; (8001370 <display7SEGMode1+0x90>)
 8001320:	781b      	ldrb	r3, [r3, #0]
 8001322:	2b02      	cmp	r3, #2
 8001324:	d012      	beq.n	800134c <display7SEGMode1+0x6c>
 8001326:	2b02      	cmp	r3, #2
 8001328:	dc16      	bgt.n	8001358 <display7SEGMode1+0x78>
 800132a:	2b00      	cmp	r3, #0
 800132c:	d002      	beq.n	8001334 <display7SEGMode1+0x54>
 800132e:	2b01      	cmp	r3, #1
 8001330:	d006      	beq.n	8001340 <display7SEGMode1+0x60>
 8001332:	e011      	b.n	8001358 <display7SEGMode1+0x78>
	case RED:
		update_led_buffer2(leds_way2_count[0]);
 8001334:	4b0f      	ldr	r3, [pc, #60]	; (8001374 <display7SEGMode1+0x94>)
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	4618      	mov	r0, r3
 800133a:	f7ff fe8d 	bl	8001058 <update_led_buffer2>
		break;
 800133e:	e00b      	b.n	8001358 <display7SEGMode1+0x78>
	case YELLOW:
		update_led_buffer2(leds_way2_count[1]);
 8001340:	4b0c      	ldr	r3, [pc, #48]	; (8001374 <display7SEGMode1+0x94>)
 8001342:	685b      	ldr	r3, [r3, #4]
 8001344:	4618      	mov	r0, r3
 8001346:	f7ff fe87 	bl	8001058 <update_led_buffer2>
		break;
 800134a:	e005      	b.n	8001358 <display7SEGMode1+0x78>
	case GREEN:
		update_led_buffer2(leds_way2_count[2]);
 800134c:	4b09      	ldr	r3, [pc, #36]	; (8001374 <display7SEGMode1+0x94>)
 800134e:	689b      	ldr	r3, [r3, #8]
 8001350:	4618      	mov	r0, r3
 8001352:	f7ff fe81 	bl	8001058 <update_led_buffer2>
		break;
 8001356:	bf00      	nop
	}
	update7SEG(index_7SEGLed);
 8001358:	4b07      	ldr	r3, [pc, #28]	; (8001378 <display7SEGMode1+0x98>)
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	4618      	mov	r0, r3
 800135e:	f7ff feb5 	bl	80010cc <update7SEG>
}
 8001362:	bf00      	nop
 8001364:	bd80      	pop	{r7, pc}
 8001366:	bf00      	nop
 8001368:	200000e9 	.word	0x200000e9
 800136c:	200000ec 	.word	0x200000ec
 8001370:	200000f8 	.word	0x200000f8
 8001374:	200000fc 	.word	0x200000fc
 8001378:	20000114 	.word	0x20000114

0800137c <displaySingleLedsMode1>:


void displaySingleLedsMode1(){
 800137c:	b580      	push	{r7, lr}
 800137e:	af00      	add	r7, sp, #0
	if(current_led_way1==RED){
 8001380:	4b2d      	ldr	r3, [pc, #180]	; (8001438 <displaySingleLedsMode1+0xbc>)
 8001382:	781b      	ldrb	r3, [r3, #0]
 8001384:	2b00      	cmp	r3, #0
 8001386:	d109      	bne.n	800139c <displaySingleLedsMode1+0x20>
		HAL_GPIO_WritePin(RED_LED1_GPIO_Port, RED_LED1_Pin, 0);  // TURN ON RED LED
 8001388:	2200      	movs	r2, #0
 800138a:	2120      	movs	r1, #32
 800138c:	482b      	ldr	r0, [pc, #172]	; (800143c <displaySingleLedsMode1+0xc0>)
 800138e:	f000 fdd2 	bl	8001f36 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GREEN_LED1_GPIO_Port, GREEN_LED1_Pin, 1);  // TURN OFF GREEN LED
 8001392:	2201      	movs	r2, #1
 8001394:	2180      	movs	r1, #128	; 0x80
 8001396:	4829      	ldr	r0, [pc, #164]	; (800143c <displaySingleLedsMode1+0xc0>)
 8001398:	f000 fdcd 	bl	8001f36 <HAL_GPIO_WritePin>

	}
	if(current_led_way1==YELLOW){
 800139c:	4b26      	ldr	r3, [pc, #152]	; (8001438 <displaySingleLedsMode1+0xbc>)
 800139e:	781b      	ldrb	r3, [r3, #0]
 80013a0:	2b01      	cmp	r3, #1
 80013a2:	d109      	bne.n	80013b8 <displaySingleLedsMode1+0x3c>
		HAL_GPIO_WritePin(YELLOW_LED1_GPIO_Port, YELLOW_LED1_Pin, 0);  // TURN ON YELLOW LED
 80013a4:	2200      	movs	r2, #0
 80013a6:	2140      	movs	r1, #64	; 0x40
 80013a8:	4824      	ldr	r0, [pc, #144]	; (800143c <displaySingleLedsMode1+0xc0>)
 80013aa:	f000 fdc4 	bl	8001f36 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(RED_LED1_GPIO_Port, RED_LED1_Pin, 1);  // TURN OFF RED LED
 80013ae:	2201      	movs	r2, #1
 80013b0:	2120      	movs	r1, #32
 80013b2:	4822      	ldr	r0, [pc, #136]	; (800143c <displaySingleLedsMode1+0xc0>)
 80013b4:	f000 fdbf 	bl	8001f36 <HAL_GPIO_WritePin>

	}
	if(current_led_way1==GREEN){
 80013b8:	4b1f      	ldr	r3, [pc, #124]	; (8001438 <displaySingleLedsMode1+0xbc>)
 80013ba:	781b      	ldrb	r3, [r3, #0]
 80013bc:	2b02      	cmp	r3, #2
 80013be:	d109      	bne.n	80013d4 <displaySingleLedsMode1+0x58>
		HAL_GPIO_WritePin(GREEN_LED1_GPIO_Port, GREEN_LED1_Pin, 0);  // TURN ON GREEN LED
 80013c0:	2200      	movs	r2, #0
 80013c2:	2180      	movs	r1, #128	; 0x80
 80013c4:	481d      	ldr	r0, [pc, #116]	; (800143c <displaySingleLedsMode1+0xc0>)
 80013c6:	f000 fdb6 	bl	8001f36 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(YELLOW_LED1_GPIO_Port, YELLOW_LED1_Pin, 1);  // TURN OFF YELLOW LED
 80013ca:	2201      	movs	r2, #1
 80013cc:	2140      	movs	r1, #64	; 0x40
 80013ce:	481b      	ldr	r0, [pc, #108]	; (800143c <displaySingleLedsMode1+0xc0>)
 80013d0:	f000 fdb1 	bl	8001f36 <HAL_GPIO_WritePin>

	}

	if(current_led_way2==RED){
 80013d4:	4b1a      	ldr	r3, [pc, #104]	; (8001440 <displaySingleLedsMode1+0xc4>)
 80013d6:	781b      	ldrb	r3, [r3, #0]
 80013d8:	2b00      	cmp	r3, #0
 80013da:	d10b      	bne.n	80013f4 <displaySingleLedsMode1+0x78>
		HAL_GPIO_WritePin(RED_LED2_GPIO_Port, RED_LED2_Pin, 0);  // TURN ON RED LED
 80013dc:	2200      	movs	r2, #0
 80013de:	f44f 7180 	mov.w	r1, #256	; 0x100
 80013e2:	4816      	ldr	r0, [pc, #88]	; (800143c <displaySingleLedsMode1+0xc0>)
 80013e4:	f000 fda7 	bl	8001f36 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GREEN_LED2_GPIO_Port, GREEN_LED2_Pin, 1);  // TURN OFF GREEN LED
 80013e8:	2201      	movs	r2, #1
 80013ea:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80013ee:	4813      	ldr	r0, [pc, #76]	; (800143c <displaySingleLedsMode1+0xc0>)
 80013f0:	f000 fda1 	bl	8001f36 <HAL_GPIO_WritePin>

	}
	if(current_led_way2==YELLOW){
 80013f4:	4b12      	ldr	r3, [pc, #72]	; (8001440 <displaySingleLedsMode1+0xc4>)
 80013f6:	781b      	ldrb	r3, [r3, #0]
 80013f8:	2b01      	cmp	r3, #1
 80013fa:	d10b      	bne.n	8001414 <displaySingleLedsMode1+0x98>
		HAL_GPIO_WritePin(YELLOW_LED2_GPIO_Port, YELLOW_LED2_Pin, 0);  // TURN ON YELLOW LED
 80013fc:	2200      	movs	r2, #0
 80013fe:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001402:	480e      	ldr	r0, [pc, #56]	; (800143c <displaySingleLedsMode1+0xc0>)
 8001404:	f000 fd97 	bl	8001f36 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(RED_LED2_GPIO_Port, RED_LED2_Pin, 1);  // TURN OFF RED LED
 8001408:	2201      	movs	r2, #1
 800140a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800140e:	480b      	ldr	r0, [pc, #44]	; (800143c <displaySingleLedsMode1+0xc0>)
 8001410:	f000 fd91 	bl	8001f36 <HAL_GPIO_WritePin>

	}
	if(current_led_way2==GREEN){
 8001414:	4b0a      	ldr	r3, [pc, #40]	; (8001440 <displaySingleLedsMode1+0xc4>)
 8001416:	781b      	ldrb	r3, [r3, #0]
 8001418:	2b02      	cmp	r3, #2
 800141a:	d10b      	bne.n	8001434 <displaySingleLedsMode1+0xb8>
		HAL_GPIO_WritePin(GREEN_LED2_GPIO_Port, GREEN_LED2_Pin, 0);  // TURN ON GREEN LED
 800141c:	2200      	movs	r2, #0
 800141e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001422:	4806      	ldr	r0, [pc, #24]	; (800143c <displaySingleLedsMode1+0xc0>)
 8001424:	f000 fd87 	bl	8001f36 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(YELLOW_LED2_GPIO_Port, YELLOW_LED2_Pin, 1);  // TURN OFF YELLOW LED
 8001428:	2201      	movs	r2, #1
 800142a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800142e:	4803      	ldr	r0, [pc, #12]	; (800143c <displaySingleLedsMode1+0xc0>)
 8001430:	f000 fd81 	bl	8001f36 <HAL_GPIO_WritePin>

	}


}
 8001434:	bf00      	nop
 8001436:	bd80      	pop	{r7, pc}
 8001438:	200000e9 	.word	0x200000e9
 800143c:	40010800 	.word	0x40010800
 8001440:	200000f8 	.word	0x200000f8

08001444 <trafficLightCount>:

void trafficLightCount(int*leds_count,enum LED*current_led){
 8001444:	b480      	push	{r7}
 8001446:	b083      	sub	sp, #12
 8001448:	af00      	add	r7, sp, #0
 800144a:	6078      	str	r0, [r7, #4]
 800144c:	6039      	str	r1, [r7, #0]
	if(*current_led==RED){
 800144e:	683b      	ldr	r3, [r7, #0]
 8001450:	781b      	ldrb	r3, [r3, #0]
 8001452:	2b00      	cmp	r3, #0
 8001454:	d110      	bne.n	8001478 <trafficLightCount+0x34>
		leds_count[0]--;
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	1e5a      	subs	r2, r3, #1
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	601a      	str	r2, [r3, #0]
		if(leds_count[0]<=0){
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	2b00      	cmp	r3, #0
 8001466:	dc34      	bgt.n	80014d2 <trafficLightCount+0x8e>
			leds_count[0]=RED_DURATION;
 8001468:	4b1c      	ldr	r3, [pc, #112]	; (80014dc <trafficLightCount+0x98>)
 800146a:	681a      	ldr	r2, [r3, #0]
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	601a      	str	r2, [r3, #0]
			*current_led=YELLOW;
 8001470:	683b      	ldr	r3, [r7, #0]
 8001472:	2201      	movs	r2, #1
 8001474:	701a      	strb	r2, [r3, #0]
		if(leds_count[2]<=0){
			leds_count[2]=GREEN_DURATION;
			*current_led=RED;
		}
	}
}
 8001476:	e02c      	b.n	80014d2 <trafficLightCount+0x8e>
	else if(*current_led==YELLOW){
 8001478:	683b      	ldr	r3, [r7, #0]
 800147a:	781b      	ldrb	r3, [r3, #0]
 800147c:	2b01      	cmp	r3, #1
 800147e:	d112      	bne.n	80014a6 <trafficLightCount+0x62>
		leds_count[1]--;
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	3304      	adds	r3, #4
 8001484:	681a      	ldr	r2, [r3, #0]
 8001486:	3a01      	subs	r2, #1
 8001488:	601a      	str	r2, [r3, #0]
		if(leds_count[1]<=0){
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	3304      	adds	r3, #4
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	2b00      	cmp	r3, #0
 8001492:	dc1e      	bgt.n	80014d2 <trafficLightCount+0x8e>
			leds_count[1]=YELLOW_DURATION;
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	3304      	adds	r3, #4
 8001498:	4a11      	ldr	r2, [pc, #68]	; (80014e0 <trafficLightCount+0x9c>)
 800149a:	6812      	ldr	r2, [r2, #0]
 800149c:	601a      	str	r2, [r3, #0]
			*current_led=GREEN;
 800149e:	683b      	ldr	r3, [r7, #0]
 80014a0:	2202      	movs	r2, #2
 80014a2:	701a      	strb	r2, [r3, #0]
}
 80014a4:	e015      	b.n	80014d2 <trafficLightCount+0x8e>
	else if(*current_led==GREEN){
 80014a6:	683b      	ldr	r3, [r7, #0]
 80014a8:	781b      	ldrb	r3, [r3, #0]
 80014aa:	2b02      	cmp	r3, #2
 80014ac:	d111      	bne.n	80014d2 <trafficLightCount+0x8e>
		leds_count[2]--;
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	3308      	adds	r3, #8
 80014b2:	681a      	ldr	r2, [r3, #0]
 80014b4:	3a01      	subs	r2, #1
 80014b6:	601a      	str	r2, [r3, #0]
		if(leds_count[2]<=0){
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	3308      	adds	r3, #8
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	2b00      	cmp	r3, #0
 80014c0:	dc07      	bgt.n	80014d2 <trafficLightCount+0x8e>
			leds_count[2]=GREEN_DURATION;
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	3308      	adds	r3, #8
 80014c6:	4a07      	ldr	r2, [pc, #28]	; (80014e4 <trafficLightCount+0xa0>)
 80014c8:	6812      	ldr	r2, [r2, #0]
 80014ca:	601a      	str	r2, [r3, #0]
			*current_led=RED;
 80014cc:	683b      	ldr	r3, [r7, #0]
 80014ce:	2200      	movs	r2, #0
 80014d0:	701a      	strb	r2, [r3, #0]
}
 80014d2:	bf00      	nop
 80014d4:	370c      	adds	r7, #12
 80014d6:	46bd      	mov	sp, r7
 80014d8:	bc80      	pop	{r7}
 80014da:	4770      	bx	lr
 80014dc:	200000d0 	.word	0x200000d0
 80014e0:	200000d4 	.word	0x200000d4
 80014e4:	200000d8 	.word	0x200000d8

080014e8 <turnOffSingleLed>:

void turnOffSingleLed(){
 80014e8:	b580      	push	{r7, lr}
 80014ea:	af00      	add	r7, sp, #0
	  HAL_GPIO_WritePin(RED_LED1_GPIO_Port, RED_LED1_Pin, 1);
 80014ec:	2201      	movs	r2, #1
 80014ee:	2120      	movs	r1, #32
 80014f0:	4810      	ldr	r0, [pc, #64]	; (8001534 <turnOffSingleLed+0x4c>)
 80014f2:	f000 fd20 	bl	8001f36 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(YELLOW_LED1_GPIO_Port, YELLOW_LED1_Pin, 1);
 80014f6:	2201      	movs	r2, #1
 80014f8:	2140      	movs	r1, #64	; 0x40
 80014fa:	480e      	ldr	r0, [pc, #56]	; (8001534 <turnOffSingleLed+0x4c>)
 80014fc:	f000 fd1b 	bl	8001f36 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GREEN_LED1_GPIO_Port, GREEN_LED1_Pin, 1);
 8001500:	2201      	movs	r2, #1
 8001502:	2180      	movs	r1, #128	; 0x80
 8001504:	480b      	ldr	r0, [pc, #44]	; (8001534 <turnOffSingleLed+0x4c>)
 8001506:	f000 fd16 	bl	8001f36 <HAL_GPIO_WritePin>

	  HAL_GPIO_WritePin(RED_LED2_GPIO_Port, RED_LED2_Pin, 1);
 800150a:	2201      	movs	r2, #1
 800150c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001510:	4808      	ldr	r0, [pc, #32]	; (8001534 <turnOffSingleLed+0x4c>)
 8001512:	f000 fd10 	bl	8001f36 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(YELLOW_LED2_GPIO_Port, YELLOW_LED2_Pin, 1);
 8001516:	2201      	movs	r2, #1
 8001518:	f44f 7100 	mov.w	r1, #512	; 0x200
 800151c:	4805      	ldr	r0, [pc, #20]	; (8001534 <turnOffSingleLed+0x4c>)
 800151e:	f000 fd0a 	bl	8001f36 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GREEN_LED2_GPIO_Port, GREEN_LED2_Pin, 1);
 8001522:	2201      	movs	r2, #1
 8001524:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001528:	4802      	ldr	r0, [pc, #8]	; (8001534 <turnOffSingleLed+0x4c>)
 800152a:	f000 fd04 	bl	8001f36 <HAL_GPIO_WritePin>
}
 800152e:	bf00      	nop
 8001530:	bd80      	pop	{r7, pc}
 8001532:	bf00      	nop
 8001534:	40010800 	.word	0x40010800

08001538 <ledBlinking>:

void ledBlinking(enum LED led_to_change){
 8001538:	b580      	push	{r7, lr}
 800153a:	b082      	sub	sp, #8
 800153c:	af00      	add	r7, sp, #0
 800153e:	4603      	mov	r3, r0
 8001540:	71fb      	strb	r3, [r7, #7]
	switch(led_to_change){
 8001542:	79fb      	ldrb	r3, [r7, #7]
 8001544:	2b02      	cmp	r3, #2
 8001546:	d01a      	beq.n	800157e <ledBlinking+0x46>
 8001548:	2b02      	cmp	r3, #2
 800154a:	dc22      	bgt.n	8001592 <ledBlinking+0x5a>
 800154c:	2b00      	cmp	r3, #0
 800154e:	d002      	beq.n	8001556 <ledBlinking+0x1e>
 8001550:	2b01      	cmp	r3, #1
 8001552:	d00a      	beq.n	800156a <ledBlinking+0x32>
	case GREEN:
		HAL_GPIO_TogglePin(GREEN_LED1_GPIO_Port, GREEN_LED1_Pin);  //TOGGLE RED LEDS IN 2 WAY
		HAL_GPIO_TogglePin(GREEN_LED2_GPIO_Port, GREEN_LED2_Pin);
		break;
	}
}
 8001554:	e01d      	b.n	8001592 <ledBlinking+0x5a>
		HAL_GPIO_TogglePin(RED_LED1_GPIO_Port, RED_LED1_Pin);  //TOGGLE RED LEDS IN 2 WAY
 8001556:	2120      	movs	r1, #32
 8001558:	4810      	ldr	r0, [pc, #64]	; (800159c <ledBlinking+0x64>)
 800155a:	f000 fd04 	bl	8001f66 <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin(RED_LED2_GPIO_Port, RED_LED2_Pin);
 800155e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001562:	480e      	ldr	r0, [pc, #56]	; (800159c <ledBlinking+0x64>)
 8001564:	f000 fcff 	bl	8001f66 <HAL_GPIO_TogglePin>
		break;
 8001568:	e013      	b.n	8001592 <ledBlinking+0x5a>
		HAL_GPIO_TogglePin(YELLOW_LED1_GPIO_Port, YELLOW_LED1_Pin);  //TOGGLE RED LEDS IN 2 WAY
 800156a:	2140      	movs	r1, #64	; 0x40
 800156c:	480b      	ldr	r0, [pc, #44]	; (800159c <ledBlinking+0x64>)
 800156e:	f000 fcfa 	bl	8001f66 <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin(YELLOW_LED2_GPIO_Port, YELLOW_LED2_Pin);
 8001572:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001576:	4809      	ldr	r0, [pc, #36]	; (800159c <ledBlinking+0x64>)
 8001578:	f000 fcf5 	bl	8001f66 <HAL_GPIO_TogglePin>
		break;
 800157c:	e009      	b.n	8001592 <ledBlinking+0x5a>
		HAL_GPIO_TogglePin(GREEN_LED1_GPIO_Port, GREEN_LED1_Pin);  //TOGGLE RED LEDS IN 2 WAY
 800157e:	2180      	movs	r1, #128	; 0x80
 8001580:	4806      	ldr	r0, [pc, #24]	; (800159c <ledBlinking+0x64>)
 8001582:	f000 fcf0 	bl	8001f66 <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin(GREEN_LED2_GPIO_Port, GREEN_LED2_Pin);
 8001586:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800158a:	4804      	ldr	r0, [pc, #16]	; (800159c <ledBlinking+0x64>)
 800158c:	f000 fceb 	bl	8001f66 <HAL_GPIO_TogglePin>
		break;
 8001590:	bf00      	nop
}
 8001592:	bf00      	nop
 8001594:	3708      	adds	r7, #8
 8001596:	46bd      	mov	sp, r7
 8001598:	bd80      	pop	{r7, pc}
 800159a:	bf00      	nop
 800159c:	40010800 	.word	0x40010800

080015a0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80015a0:	b580      	push	{r7, lr}
 80015a2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80015a4:	f000 f9c4 	bl	8001930 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80015a8:	f000 f81c 	bl	80015e4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80015ac:	f000 f8a2 	bl	80016f4 <MX_GPIO_Init>
  MX_TIM2_Init();
 80015b0:	f000 f854 	bl	800165c <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 80015b4:	4807      	ldr	r0, [pc, #28]	; (80015d4 <main+0x34>)
 80015b6:	f001 f927 	bl	8002808 <HAL_TIM_Base_Start_IT>
  RED_DURATION=5;
 80015ba:	4b07      	ldr	r3, [pc, #28]	; (80015d8 <main+0x38>)
 80015bc:	2205      	movs	r2, #5
 80015be:	601a      	str	r2, [r3, #0]
  YELLOW_DURATION=2;
 80015c0:	4b06      	ldr	r3, [pc, #24]	; (80015dc <main+0x3c>)
 80015c2:	2202      	movs	r2, #2
 80015c4:	601a      	str	r2, [r3, #0]
  GREEN_DURATION=3;
 80015c6:	4b06      	ldr	r3, [pc, #24]	; (80015e0 <main+0x40>)
 80015c8:	2203      	movs	r2, #3
 80015ca:	601a      	str	r2, [r3, #0]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  fsm_for_input_processing();
 80015cc:	f7ff fa18 	bl	8000a00 <fsm_for_input_processing>
 80015d0:	e7fc      	b.n	80015cc <main+0x2c>
 80015d2:	bf00      	nop
 80015d4:	20000128 	.word	0x20000128
 80015d8:	200000d0 	.word	0x200000d0
 80015dc:	200000d4 	.word	0x200000d4
 80015e0:	200000d8 	.word	0x200000d8

080015e4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80015e4:	b580      	push	{r7, lr}
 80015e6:	b090      	sub	sp, #64	; 0x40
 80015e8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80015ea:	f107 0318 	add.w	r3, r7, #24
 80015ee:	2228      	movs	r2, #40	; 0x28
 80015f0:	2100      	movs	r1, #0
 80015f2:	4618      	mov	r0, r3
 80015f4:	f001 fcc0 	bl	8002f78 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80015f8:	1d3b      	adds	r3, r7, #4
 80015fa:	2200      	movs	r2, #0
 80015fc:	601a      	str	r2, [r3, #0]
 80015fe:	605a      	str	r2, [r3, #4]
 8001600:	609a      	str	r2, [r3, #8]
 8001602:	60da      	str	r2, [r3, #12]
 8001604:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001606:	2302      	movs	r3, #2
 8001608:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800160a:	2301      	movs	r3, #1
 800160c:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800160e:	2310      	movs	r3, #16
 8001610:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001612:	2300      	movs	r3, #0
 8001614:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001616:	f107 0318 	add.w	r3, r7, #24
 800161a:	4618      	mov	r0, r3
 800161c:	f000 fcbc 	bl	8001f98 <HAL_RCC_OscConfig>
 8001620:	4603      	mov	r3, r0
 8001622:	2b00      	cmp	r3, #0
 8001624:	d001      	beq.n	800162a <SystemClock_Config+0x46>
  {
    Error_Handler();
 8001626:	f000 f8d9 	bl	80017dc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800162a:	230f      	movs	r3, #15
 800162c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800162e:	2300      	movs	r3, #0
 8001630:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001632:	2300      	movs	r3, #0
 8001634:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001636:	2300      	movs	r3, #0
 8001638:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800163a:	2300      	movs	r3, #0
 800163c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800163e:	1d3b      	adds	r3, r7, #4
 8001640:	2100      	movs	r1, #0
 8001642:	4618      	mov	r0, r3
 8001644:	f000 ff2a 	bl	800249c <HAL_RCC_ClockConfig>
 8001648:	4603      	mov	r3, r0
 800164a:	2b00      	cmp	r3, #0
 800164c:	d001      	beq.n	8001652 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 800164e:	f000 f8c5 	bl	80017dc <Error_Handler>
  }
}
 8001652:	bf00      	nop
 8001654:	3740      	adds	r7, #64	; 0x40
 8001656:	46bd      	mov	sp, r7
 8001658:	bd80      	pop	{r7, pc}
	...

0800165c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800165c:	b580      	push	{r7, lr}
 800165e:	b086      	sub	sp, #24
 8001660:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001662:	f107 0308 	add.w	r3, r7, #8
 8001666:	2200      	movs	r2, #0
 8001668:	601a      	str	r2, [r3, #0]
 800166a:	605a      	str	r2, [r3, #4]
 800166c:	609a      	str	r2, [r3, #8]
 800166e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001670:	463b      	mov	r3, r7
 8001672:	2200      	movs	r2, #0
 8001674:	601a      	str	r2, [r3, #0]
 8001676:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001678:	4b1d      	ldr	r3, [pc, #116]	; (80016f0 <MX_TIM2_Init+0x94>)
 800167a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800167e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7999;
 8001680:	4b1b      	ldr	r3, [pc, #108]	; (80016f0 <MX_TIM2_Init+0x94>)
 8001682:	f641 723f 	movw	r2, #7999	; 0x1f3f
 8001686:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001688:	4b19      	ldr	r3, [pc, #100]	; (80016f0 <MX_TIM2_Init+0x94>)
 800168a:	2200      	movs	r2, #0
 800168c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 10;
 800168e:	4b18      	ldr	r3, [pc, #96]	; (80016f0 <MX_TIM2_Init+0x94>)
 8001690:	220a      	movs	r2, #10
 8001692:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001694:	4b16      	ldr	r3, [pc, #88]	; (80016f0 <MX_TIM2_Init+0x94>)
 8001696:	2200      	movs	r2, #0
 8001698:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800169a:	4b15      	ldr	r3, [pc, #84]	; (80016f0 <MX_TIM2_Init+0x94>)
 800169c:	2200      	movs	r2, #0
 800169e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80016a0:	4813      	ldr	r0, [pc, #76]	; (80016f0 <MX_TIM2_Init+0x94>)
 80016a2:	f001 f861 	bl	8002768 <HAL_TIM_Base_Init>
 80016a6:	4603      	mov	r3, r0
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d001      	beq.n	80016b0 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 80016ac:	f000 f896 	bl	80017dc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80016b0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80016b4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80016b6:	f107 0308 	add.w	r3, r7, #8
 80016ba:	4619      	mov	r1, r3
 80016bc:	480c      	ldr	r0, [pc, #48]	; (80016f0 <MX_TIM2_Init+0x94>)
 80016be:	f001 f9f7 	bl	8002ab0 <HAL_TIM_ConfigClockSource>
 80016c2:	4603      	mov	r3, r0
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	d001      	beq.n	80016cc <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 80016c8:	f000 f888 	bl	80017dc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80016cc:	2300      	movs	r3, #0
 80016ce:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80016d0:	2300      	movs	r3, #0
 80016d2:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80016d4:	463b      	mov	r3, r7
 80016d6:	4619      	mov	r1, r3
 80016d8:	4805      	ldr	r0, [pc, #20]	; (80016f0 <MX_TIM2_Init+0x94>)
 80016da:	f001 fbbf 	bl	8002e5c <HAL_TIMEx_MasterConfigSynchronization>
 80016de:	4603      	mov	r3, r0
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	d001      	beq.n	80016e8 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 80016e4:	f000 f87a 	bl	80017dc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80016e8:	bf00      	nop
 80016ea:	3718      	adds	r7, #24
 80016ec:	46bd      	mov	sp, r7
 80016ee:	bd80      	pop	{r7, pc}
 80016f0:	20000128 	.word	0x20000128

080016f4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80016f4:	b580      	push	{r7, lr}
 80016f6:	b086      	sub	sp, #24
 80016f8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016fa:	f107 0308 	add.w	r3, r7, #8
 80016fe:	2200      	movs	r2, #0
 8001700:	601a      	str	r2, [r3, #0]
 8001702:	605a      	str	r2, [r3, #4]
 8001704:	609a      	str	r2, [r3, #8]
 8001706:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001708:	4b29      	ldr	r3, [pc, #164]	; (80017b0 <MX_GPIO_Init+0xbc>)
 800170a:	699b      	ldr	r3, [r3, #24]
 800170c:	4a28      	ldr	r2, [pc, #160]	; (80017b0 <MX_GPIO_Init+0xbc>)
 800170e:	f043 0304 	orr.w	r3, r3, #4
 8001712:	6193      	str	r3, [r2, #24]
 8001714:	4b26      	ldr	r3, [pc, #152]	; (80017b0 <MX_GPIO_Init+0xbc>)
 8001716:	699b      	ldr	r3, [r3, #24]
 8001718:	f003 0304 	and.w	r3, r3, #4
 800171c:	607b      	str	r3, [r7, #4]
 800171e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001720:	4b23      	ldr	r3, [pc, #140]	; (80017b0 <MX_GPIO_Init+0xbc>)
 8001722:	699b      	ldr	r3, [r3, #24]
 8001724:	4a22      	ldr	r2, [pc, #136]	; (80017b0 <MX_GPIO_Init+0xbc>)
 8001726:	f043 0308 	orr.w	r3, r3, #8
 800172a:	6193      	str	r3, [r2, #24]
 800172c:	4b20      	ldr	r3, [pc, #128]	; (80017b0 <MX_GPIO_Init+0xbc>)
 800172e:	699b      	ldr	r3, [r3, #24]
 8001730:	f003 0308 	and.w	r3, r3, #8
 8001734:	603b      	str	r3, [r7, #0]
 8001736:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, EN0_Pin|EN1_Pin|RED_LED1_Pin|YELLOW_LED1_Pin
 8001738:	2200      	movs	r2, #0
 800173a:	f240 71e6 	movw	r1, #2022	; 0x7e6
 800173e:	481d      	ldr	r0, [pc, #116]	; (80017b4 <MX_GPIO_Init+0xc0>)
 8001740:	f000 fbf9 	bl	8001f36 <HAL_GPIO_WritePin>
                          |GREEN_LED1_Pin|RED_LED2_Pin|YELLOW_LED2_Pin|GREEN_LED2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, a1_Pin|b1_Pin|c1_Pin|d2_Pin
 8001744:	2200      	movs	r2, #0
 8001746:	f643 71ff 	movw	r1, #16383	; 0x3fff
 800174a:	481b      	ldr	r0, [pc, #108]	; (80017b8 <MX_GPIO_Init+0xc4>)
 800174c:	f000 fbf3 	bl	8001f36 <HAL_GPIO_WritePin>
                          |e1_Pin|f1_Pin|g1_Pin|a2_Pin
                          |b2_Pin|c2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : EN0_Pin EN1_Pin RED_LED1_Pin YELLOW_LED1_Pin
                           GREEN_LED1_Pin RED_LED2_Pin YELLOW_LED2_Pin GREEN_LED2_Pin */
  GPIO_InitStruct.Pin = EN0_Pin|EN1_Pin|RED_LED1_Pin|YELLOW_LED1_Pin
 8001750:	f240 73e6 	movw	r3, #2022	; 0x7e6
 8001754:	60bb      	str	r3, [r7, #8]
                          |GREEN_LED1_Pin|RED_LED2_Pin|YELLOW_LED2_Pin|GREEN_LED2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001756:	2301      	movs	r3, #1
 8001758:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800175a:	2300      	movs	r3, #0
 800175c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800175e:	2302      	movs	r3, #2
 8001760:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001762:	f107 0308 	add.w	r3, r7, #8
 8001766:	4619      	mov	r1, r3
 8001768:	4812      	ldr	r0, [pc, #72]	; (80017b4 <MX_GPIO_Init+0xc0>)
 800176a:	f000 fa51 	bl	8001c10 <HAL_GPIO_Init>

  /*Configure GPIO pins : a1_Pin b1_Pin c1_Pin d2_Pin
                           e2_Pin f2_Pin g2_Pin d1_Pin
                           e1_Pin f1_Pin g1_Pin a2_Pin
                           b2_Pin c2_Pin */
  GPIO_InitStruct.Pin = a1_Pin|b1_Pin|c1_Pin|d2_Pin
 800176e:	f643 73ff 	movw	r3, #16383	; 0x3fff
 8001772:	60bb      	str	r3, [r7, #8]
                          |e2_Pin|f2_Pin|g2_Pin|d1_Pin
                          |e1_Pin|f1_Pin|g1_Pin|a2_Pin
                          |b2_Pin|c2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001774:	2301      	movs	r3, #1
 8001776:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001778:	2300      	movs	r3, #0
 800177a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800177c:	2302      	movs	r3, #2
 800177e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001780:	f107 0308 	add.w	r3, r7, #8
 8001784:	4619      	mov	r1, r3
 8001786:	480c      	ldr	r0, [pc, #48]	; (80017b8 <MX_GPIO_Init+0xc4>)
 8001788:	f000 fa42 	bl	8001c10 <HAL_GPIO_Init>

  /*Configure GPIO pins : Button1_Pin Button2_Pin Button3_Pin */
  GPIO_InitStruct.Pin = Button1_Pin|Button2_Pin|Button3_Pin;
 800178c:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8001790:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001792:	2300      	movs	r3, #0
 8001794:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001796:	2301      	movs	r3, #1
 8001798:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800179a:	f107 0308 	add.w	r3, r7, #8
 800179e:	4619      	mov	r1, r3
 80017a0:	4804      	ldr	r0, [pc, #16]	; (80017b4 <MX_GPIO_Init+0xc0>)
 80017a2:	f000 fa35 	bl	8001c10 <HAL_GPIO_Init>

}
 80017a6:	bf00      	nop
 80017a8:	3718      	adds	r7, #24
 80017aa:	46bd      	mov	sp, r7
 80017ac:	bd80      	pop	{r7, pc}
 80017ae:	bf00      	nop
 80017b0:	40021000 	.word	0x40021000
 80017b4:	40010800 	.word	0x40010800
 80017b8:	40010c00 	.word	0x40010c00

080017bc <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef*htim){
 80017bc:	b580      	push	{r7, lr}
 80017be:	b082      	sub	sp, #8
 80017c0:	af00      	add	r7, sp, #0
 80017c2:	6078      	str	r0, [r7, #4]
	TimerRun();
 80017c4:	f7fe fffa 	bl	80007bc <TimerRun>
	button1_reading();
 80017c8:	f7ff f84e 	bl	8000868 <button1_reading>
	button2_reading();
 80017cc:	f7ff f870 	bl	80008b0 <button2_reading>
	button3_reading();
 80017d0:	f7ff f8b2 	bl	8000938 <button3_reading>
}
 80017d4:	bf00      	nop
 80017d6:	3708      	adds	r7, #8
 80017d8:	46bd      	mov	sp, r7
 80017da:	bd80      	pop	{r7, pc}

080017dc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80017dc:	b480      	push	{r7}
 80017de:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80017e0:	b672      	cpsid	i
}
 80017e2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80017e4:	e7fe      	b.n	80017e4 <Error_Handler+0x8>
	...

080017e8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80017e8:	b480      	push	{r7}
 80017ea:	b083      	sub	sp, #12
 80017ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80017ee:	4b0e      	ldr	r3, [pc, #56]	; (8001828 <HAL_MspInit+0x40>)
 80017f0:	699b      	ldr	r3, [r3, #24]
 80017f2:	4a0d      	ldr	r2, [pc, #52]	; (8001828 <HAL_MspInit+0x40>)
 80017f4:	f043 0301 	orr.w	r3, r3, #1
 80017f8:	6193      	str	r3, [r2, #24]
 80017fa:	4b0b      	ldr	r3, [pc, #44]	; (8001828 <HAL_MspInit+0x40>)
 80017fc:	699b      	ldr	r3, [r3, #24]
 80017fe:	f003 0301 	and.w	r3, r3, #1
 8001802:	607b      	str	r3, [r7, #4]
 8001804:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001806:	4b08      	ldr	r3, [pc, #32]	; (8001828 <HAL_MspInit+0x40>)
 8001808:	69db      	ldr	r3, [r3, #28]
 800180a:	4a07      	ldr	r2, [pc, #28]	; (8001828 <HAL_MspInit+0x40>)
 800180c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001810:	61d3      	str	r3, [r2, #28]
 8001812:	4b05      	ldr	r3, [pc, #20]	; (8001828 <HAL_MspInit+0x40>)
 8001814:	69db      	ldr	r3, [r3, #28]
 8001816:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800181a:	603b      	str	r3, [r7, #0]
 800181c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800181e:	bf00      	nop
 8001820:	370c      	adds	r7, #12
 8001822:	46bd      	mov	sp, r7
 8001824:	bc80      	pop	{r7}
 8001826:	4770      	bx	lr
 8001828:	40021000 	.word	0x40021000

0800182c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800182c:	b580      	push	{r7, lr}
 800182e:	b084      	sub	sp, #16
 8001830:	af00      	add	r7, sp, #0
 8001832:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800183c:	d113      	bne.n	8001866 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800183e:	4b0c      	ldr	r3, [pc, #48]	; (8001870 <HAL_TIM_Base_MspInit+0x44>)
 8001840:	69db      	ldr	r3, [r3, #28]
 8001842:	4a0b      	ldr	r2, [pc, #44]	; (8001870 <HAL_TIM_Base_MspInit+0x44>)
 8001844:	f043 0301 	orr.w	r3, r3, #1
 8001848:	61d3      	str	r3, [r2, #28]
 800184a:	4b09      	ldr	r3, [pc, #36]	; (8001870 <HAL_TIM_Base_MspInit+0x44>)
 800184c:	69db      	ldr	r3, [r3, #28]
 800184e:	f003 0301 	and.w	r3, r3, #1
 8001852:	60fb      	str	r3, [r7, #12]
 8001854:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001856:	2200      	movs	r2, #0
 8001858:	2100      	movs	r1, #0
 800185a:	201c      	movs	r0, #28
 800185c:	f000 f9a1 	bl	8001ba2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001860:	201c      	movs	r0, #28
 8001862:	f000 f9ba 	bl	8001bda <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001866:	bf00      	nop
 8001868:	3710      	adds	r7, #16
 800186a:	46bd      	mov	sp, r7
 800186c:	bd80      	pop	{r7, pc}
 800186e:	bf00      	nop
 8001870:	40021000 	.word	0x40021000

08001874 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001874:	b480      	push	{r7}
 8001876:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001878:	e7fe      	b.n	8001878 <NMI_Handler+0x4>

0800187a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800187a:	b480      	push	{r7}
 800187c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800187e:	e7fe      	b.n	800187e <HardFault_Handler+0x4>

08001880 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001880:	b480      	push	{r7}
 8001882:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001884:	e7fe      	b.n	8001884 <MemManage_Handler+0x4>

08001886 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001886:	b480      	push	{r7}
 8001888:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800188a:	e7fe      	b.n	800188a <BusFault_Handler+0x4>

0800188c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800188c:	b480      	push	{r7}
 800188e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001890:	e7fe      	b.n	8001890 <UsageFault_Handler+0x4>

08001892 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001892:	b480      	push	{r7}
 8001894:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001896:	bf00      	nop
 8001898:	46bd      	mov	sp, r7
 800189a:	bc80      	pop	{r7}
 800189c:	4770      	bx	lr

0800189e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800189e:	b480      	push	{r7}
 80018a0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80018a2:	bf00      	nop
 80018a4:	46bd      	mov	sp, r7
 80018a6:	bc80      	pop	{r7}
 80018a8:	4770      	bx	lr

080018aa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80018aa:	b480      	push	{r7}
 80018ac:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80018ae:	bf00      	nop
 80018b0:	46bd      	mov	sp, r7
 80018b2:	bc80      	pop	{r7}
 80018b4:	4770      	bx	lr

080018b6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80018b6:	b580      	push	{r7, lr}
 80018b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80018ba:	f000 f87f 	bl	80019bc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80018be:	bf00      	nop
 80018c0:	bd80      	pop	{r7, pc}
	...

080018c4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80018c4:	b580      	push	{r7, lr}
 80018c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80018c8:	4802      	ldr	r0, [pc, #8]	; (80018d4 <TIM2_IRQHandler+0x10>)
 80018ca:	f000 ffe9 	bl	80028a0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80018ce:	bf00      	nop
 80018d0:	bd80      	pop	{r7, pc}
 80018d2:	bf00      	nop
 80018d4:	20000128 	.word	0x20000128

080018d8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80018d8:	b480      	push	{r7}
 80018da:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80018dc:	bf00      	nop
 80018de:	46bd      	mov	sp, r7
 80018e0:	bc80      	pop	{r7}
 80018e2:	4770      	bx	lr

080018e4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80018e4:	480c      	ldr	r0, [pc, #48]	; (8001918 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80018e6:	490d      	ldr	r1, [pc, #52]	; (800191c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80018e8:	4a0d      	ldr	r2, [pc, #52]	; (8001920 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80018ea:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80018ec:	e002      	b.n	80018f4 <LoopCopyDataInit>

080018ee <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80018ee:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80018f0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80018f2:	3304      	adds	r3, #4

080018f4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80018f4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80018f6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80018f8:	d3f9      	bcc.n	80018ee <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80018fa:	4a0a      	ldr	r2, [pc, #40]	; (8001924 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80018fc:	4c0a      	ldr	r4, [pc, #40]	; (8001928 <LoopFillZerobss+0x22>)
  movs r3, #0
 80018fe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001900:	e001      	b.n	8001906 <LoopFillZerobss>

08001902 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001902:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001904:	3204      	adds	r2, #4

08001906 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001906:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001908:	d3fb      	bcc.n	8001902 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800190a:	f7ff ffe5 	bl	80018d8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800190e:	f001 fb0f 	bl	8002f30 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001912:	f7ff fe45 	bl	80015a0 <main>
  bx lr
 8001916:	4770      	bx	lr
  ldr r0, =_sdata
 8001918:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800191c:	20000090 	.word	0x20000090
  ldr r2, =_sidata
 8001920:	08002fc8 	.word	0x08002fc8
  ldr r2, =_sbss
 8001924:	20000090 	.word	0x20000090
  ldr r4, =_ebss
 8001928:	20000174 	.word	0x20000174

0800192c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800192c:	e7fe      	b.n	800192c <ADC1_2_IRQHandler>
	...

08001930 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001930:	b580      	push	{r7, lr}
 8001932:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001934:	4b08      	ldr	r3, [pc, #32]	; (8001958 <HAL_Init+0x28>)
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	4a07      	ldr	r2, [pc, #28]	; (8001958 <HAL_Init+0x28>)
 800193a:	f043 0310 	orr.w	r3, r3, #16
 800193e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001940:	2003      	movs	r0, #3
 8001942:	f000 f923 	bl	8001b8c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001946:	200f      	movs	r0, #15
 8001948:	f000 f808 	bl	800195c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800194c:	f7ff ff4c 	bl	80017e8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001950:	2300      	movs	r3, #0
}
 8001952:	4618      	mov	r0, r3
 8001954:	bd80      	pop	{r7, pc}
 8001956:	bf00      	nop
 8001958:	40022000 	.word	0x40022000

0800195c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800195c:	b580      	push	{r7, lr}
 800195e:	b082      	sub	sp, #8
 8001960:	af00      	add	r7, sp, #0
 8001962:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001964:	4b12      	ldr	r3, [pc, #72]	; (80019b0 <HAL_InitTick+0x54>)
 8001966:	681a      	ldr	r2, [r3, #0]
 8001968:	4b12      	ldr	r3, [pc, #72]	; (80019b4 <HAL_InitTick+0x58>)
 800196a:	781b      	ldrb	r3, [r3, #0]
 800196c:	4619      	mov	r1, r3
 800196e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001972:	fbb3 f3f1 	udiv	r3, r3, r1
 8001976:	fbb2 f3f3 	udiv	r3, r2, r3
 800197a:	4618      	mov	r0, r3
 800197c:	f000 f93b 	bl	8001bf6 <HAL_SYSTICK_Config>
 8001980:	4603      	mov	r3, r0
 8001982:	2b00      	cmp	r3, #0
 8001984:	d001      	beq.n	800198a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001986:	2301      	movs	r3, #1
 8001988:	e00e      	b.n	80019a8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	2b0f      	cmp	r3, #15
 800198e:	d80a      	bhi.n	80019a6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001990:	2200      	movs	r2, #0
 8001992:	6879      	ldr	r1, [r7, #4]
 8001994:	f04f 30ff 	mov.w	r0, #4294967295
 8001998:	f000 f903 	bl	8001ba2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800199c:	4a06      	ldr	r2, [pc, #24]	; (80019b8 <HAL_InitTick+0x5c>)
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80019a2:	2300      	movs	r3, #0
 80019a4:	e000      	b.n	80019a8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80019a6:	2301      	movs	r3, #1
}
 80019a8:	4618      	mov	r0, r3
 80019aa:	3708      	adds	r7, #8
 80019ac:	46bd      	mov	sp, r7
 80019ae:	bd80      	pop	{r7, pc}
 80019b0:	20000084 	.word	0x20000084
 80019b4:	2000008c 	.word	0x2000008c
 80019b8:	20000088 	.word	0x20000088

080019bc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80019bc:	b480      	push	{r7}
 80019be:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80019c0:	4b05      	ldr	r3, [pc, #20]	; (80019d8 <HAL_IncTick+0x1c>)
 80019c2:	781b      	ldrb	r3, [r3, #0]
 80019c4:	461a      	mov	r2, r3
 80019c6:	4b05      	ldr	r3, [pc, #20]	; (80019dc <HAL_IncTick+0x20>)
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	4413      	add	r3, r2
 80019cc:	4a03      	ldr	r2, [pc, #12]	; (80019dc <HAL_IncTick+0x20>)
 80019ce:	6013      	str	r3, [r2, #0]
}
 80019d0:	bf00      	nop
 80019d2:	46bd      	mov	sp, r7
 80019d4:	bc80      	pop	{r7}
 80019d6:	4770      	bx	lr
 80019d8:	2000008c 	.word	0x2000008c
 80019dc:	20000170 	.word	0x20000170

080019e0 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80019e0:	b480      	push	{r7}
 80019e2:	af00      	add	r7, sp, #0
  return uwTick;
 80019e4:	4b02      	ldr	r3, [pc, #8]	; (80019f0 <HAL_GetTick+0x10>)
 80019e6:	681b      	ldr	r3, [r3, #0]
}
 80019e8:	4618      	mov	r0, r3
 80019ea:	46bd      	mov	sp, r7
 80019ec:	bc80      	pop	{r7}
 80019ee:	4770      	bx	lr
 80019f0:	20000170 	.word	0x20000170

080019f4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80019f4:	b480      	push	{r7}
 80019f6:	b085      	sub	sp, #20
 80019f8:	af00      	add	r7, sp, #0
 80019fa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	f003 0307 	and.w	r3, r3, #7
 8001a02:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001a04:	4b0c      	ldr	r3, [pc, #48]	; (8001a38 <__NVIC_SetPriorityGrouping+0x44>)
 8001a06:	68db      	ldr	r3, [r3, #12]
 8001a08:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001a0a:	68ba      	ldr	r2, [r7, #8]
 8001a0c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001a10:	4013      	ands	r3, r2
 8001a12:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001a14:	68fb      	ldr	r3, [r7, #12]
 8001a16:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001a18:	68bb      	ldr	r3, [r7, #8]
 8001a1a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001a1c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001a20:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001a24:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001a26:	4a04      	ldr	r2, [pc, #16]	; (8001a38 <__NVIC_SetPriorityGrouping+0x44>)
 8001a28:	68bb      	ldr	r3, [r7, #8]
 8001a2a:	60d3      	str	r3, [r2, #12]
}
 8001a2c:	bf00      	nop
 8001a2e:	3714      	adds	r7, #20
 8001a30:	46bd      	mov	sp, r7
 8001a32:	bc80      	pop	{r7}
 8001a34:	4770      	bx	lr
 8001a36:	bf00      	nop
 8001a38:	e000ed00 	.word	0xe000ed00

08001a3c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001a3c:	b480      	push	{r7}
 8001a3e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001a40:	4b04      	ldr	r3, [pc, #16]	; (8001a54 <__NVIC_GetPriorityGrouping+0x18>)
 8001a42:	68db      	ldr	r3, [r3, #12]
 8001a44:	0a1b      	lsrs	r3, r3, #8
 8001a46:	f003 0307 	and.w	r3, r3, #7
}
 8001a4a:	4618      	mov	r0, r3
 8001a4c:	46bd      	mov	sp, r7
 8001a4e:	bc80      	pop	{r7}
 8001a50:	4770      	bx	lr
 8001a52:	bf00      	nop
 8001a54:	e000ed00 	.word	0xe000ed00

08001a58 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a58:	b480      	push	{r7}
 8001a5a:	b083      	sub	sp, #12
 8001a5c:	af00      	add	r7, sp, #0
 8001a5e:	4603      	mov	r3, r0
 8001a60:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	db0b      	blt.n	8001a82 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001a6a:	79fb      	ldrb	r3, [r7, #7]
 8001a6c:	f003 021f 	and.w	r2, r3, #31
 8001a70:	4906      	ldr	r1, [pc, #24]	; (8001a8c <__NVIC_EnableIRQ+0x34>)
 8001a72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a76:	095b      	lsrs	r3, r3, #5
 8001a78:	2001      	movs	r0, #1
 8001a7a:	fa00 f202 	lsl.w	r2, r0, r2
 8001a7e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001a82:	bf00      	nop
 8001a84:	370c      	adds	r7, #12
 8001a86:	46bd      	mov	sp, r7
 8001a88:	bc80      	pop	{r7}
 8001a8a:	4770      	bx	lr
 8001a8c:	e000e100 	.word	0xe000e100

08001a90 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001a90:	b480      	push	{r7}
 8001a92:	b083      	sub	sp, #12
 8001a94:	af00      	add	r7, sp, #0
 8001a96:	4603      	mov	r3, r0
 8001a98:	6039      	str	r1, [r7, #0]
 8001a9a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a9c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	db0a      	blt.n	8001aba <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001aa4:	683b      	ldr	r3, [r7, #0]
 8001aa6:	b2da      	uxtb	r2, r3
 8001aa8:	490c      	ldr	r1, [pc, #48]	; (8001adc <__NVIC_SetPriority+0x4c>)
 8001aaa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001aae:	0112      	lsls	r2, r2, #4
 8001ab0:	b2d2      	uxtb	r2, r2
 8001ab2:	440b      	add	r3, r1
 8001ab4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001ab8:	e00a      	b.n	8001ad0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001aba:	683b      	ldr	r3, [r7, #0]
 8001abc:	b2da      	uxtb	r2, r3
 8001abe:	4908      	ldr	r1, [pc, #32]	; (8001ae0 <__NVIC_SetPriority+0x50>)
 8001ac0:	79fb      	ldrb	r3, [r7, #7]
 8001ac2:	f003 030f 	and.w	r3, r3, #15
 8001ac6:	3b04      	subs	r3, #4
 8001ac8:	0112      	lsls	r2, r2, #4
 8001aca:	b2d2      	uxtb	r2, r2
 8001acc:	440b      	add	r3, r1
 8001ace:	761a      	strb	r2, [r3, #24]
}
 8001ad0:	bf00      	nop
 8001ad2:	370c      	adds	r7, #12
 8001ad4:	46bd      	mov	sp, r7
 8001ad6:	bc80      	pop	{r7}
 8001ad8:	4770      	bx	lr
 8001ada:	bf00      	nop
 8001adc:	e000e100 	.word	0xe000e100
 8001ae0:	e000ed00 	.word	0xe000ed00

08001ae4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001ae4:	b480      	push	{r7}
 8001ae6:	b089      	sub	sp, #36	; 0x24
 8001ae8:	af00      	add	r7, sp, #0
 8001aea:	60f8      	str	r0, [r7, #12]
 8001aec:	60b9      	str	r1, [r7, #8]
 8001aee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001af0:	68fb      	ldr	r3, [r7, #12]
 8001af2:	f003 0307 	and.w	r3, r3, #7
 8001af6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001af8:	69fb      	ldr	r3, [r7, #28]
 8001afa:	f1c3 0307 	rsb	r3, r3, #7
 8001afe:	2b04      	cmp	r3, #4
 8001b00:	bf28      	it	cs
 8001b02:	2304      	movcs	r3, #4
 8001b04:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001b06:	69fb      	ldr	r3, [r7, #28]
 8001b08:	3304      	adds	r3, #4
 8001b0a:	2b06      	cmp	r3, #6
 8001b0c:	d902      	bls.n	8001b14 <NVIC_EncodePriority+0x30>
 8001b0e:	69fb      	ldr	r3, [r7, #28]
 8001b10:	3b03      	subs	r3, #3
 8001b12:	e000      	b.n	8001b16 <NVIC_EncodePriority+0x32>
 8001b14:	2300      	movs	r3, #0
 8001b16:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b18:	f04f 32ff 	mov.w	r2, #4294967295
 8001b1c:	69bb      	ldr	r3, [r7, #24]
 8001b1e:	fa02 f303 	lsl.w	r3, r2, r3
 8001b22:	43da      	mvns	r2, r3
 8001b24:	68bb      	ldr	r3, [r7, #8]
 8001b26:	401a      	ands	r2, r3
 8001b28:	697b      	ldr	r3, [r7, #20]
 8001b2a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001b2c:	f04f 31ff 	mov.w	r1, #4294967295
 8001b30:	697b      	ldr	r3, [r7, #20]
 8001b32:	fa01 f303 	lsl.w	r3, r1, r3
 8001b36:	43d9      	mvns	r1, r3
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b3c:	4313      	orrs	r3, r2
         );
}
 8001b3e:	4618      	mov	r0, r3
 8001b40:	3724      	adds	r7, #36	; 0x24
 8001b42:	46bd      	mov	sp, r7
 8001b44:	bc80      	pop	{r7}
 8001b46:	4770      	bx	lr

08001b48 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001b48:	b580      	push	{r7, lr}
 8001b4a:	b082      	sub	sp, #8
 8001b4c:	af00      	add	r7, sp, #0
 8001b4e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	3b01      	subs	r3, #1
 8001b54:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001b58:	d301      	bcc.n	8001b5e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001b5a:	2301      	movs	r3, #1
 8001b5c:	e00f      	b.n	8001b7e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001b5e:	4a0a      	ldr	r2, [pc, #40]	; (8001b88 <SysTick_Config+0x40>)
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	3b01      	subs	r3, #1
 8001b64:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001b66:	210f      	movs	r1, #15
 8001b68:	f04f 30ff 	mov.w	r0, #4294967295
 8001b6c:	f7ff ff90 	bl	8001a90 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001b70:	4b05      	ldr	r3, [pc, #20]	; (8001b88 <SysTick_Config+0x40>)
 8001b72:	2200      	movs	r2, #0
 8001b74:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001b76:	4b04      	ldr	r3, [pc, #16]	; (8001b88 <SysTick_Config+0x40>)
 8001b78:	2207      	movs	r2, #7
 8001b7a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001b7c:	2300      	movs	r3, #0
}
 8001b7e:	4618      	mov	r0, r3
 8001b80:	3708      	adds	r7, #8
 8001b82:	46bd      	mov	sp, r7
 8001b84:	bd80      	pop	{r7, pc}
 8001b86:	bf00      	nop
 8001b88:	e000e010 	.word	0xe000e010

08001b8c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b8c:	b580      	push	{r7, lr}
 8001b8e:	b082      	sub	sp, #8
 8001b90:	af00      	add	r7, sp, #0
 8001b92:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001b94:	6878      	ldr	r0, [r7, #4]
 8001b96:	f7ff ff2d 	bl	80019f4 <__NVIC_SetPriorityGrouping>
}
 8001b9a:	bf00      	nop
 8001b9c:	3708      	adds	r7, #8
 8001b9e:	46bd      	mov	sp, r7
 8001ba0:	bd80      	pop	{r7, pc}

08001ba2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001ba2:	b580      	push	{r7, lr}
 8001ba4:	b086      	sub	sp, #24
 8001ba6:	af00      	add	r7, sp, #0
 8001ba8:	4603      	mov	r3, r0
 8001baa:	60b9      	str	r1, [r7, #8]
 8001bac:	607a      	str	r2, [r7, #4]
 8001bae:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001bb0:	2300      	movs	r3, #0
 8001bb2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001bb4:	f7ff ff42 	bl	8001a3c <__NVIC_GetPriorityGrouping>
 8001bb8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001bba:	687a      	ldr	r2, [r7, #4]
 8001bbc:	68b9      	ldr	r1, [r7, #8]
 8001bbe:	6978      	ldr	r0, [r7, #20]
 8001bc0:	f7ff ff90 	bl	8001ae4 <NVIC_EncodePriority>
 8001bc4:	4602      	mov	r2, r0
 8001bc6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001bca:	4611      	mov	r1, r2
 8001bcc:	4618      	mov	r0, r3
 8001bce:	f7ff ff5f 	bl	8001a90 <__NVIC_SetPriority>
}
 8001bd2:	bf00      	nop
 8001bd4:	3718      	adds	r7, #24
 8001bd6:	46bd      	mov	sp, r7
 8001bd8:	bd80      	pop	{r7, pc}

08001bda <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001bda:	b580      	push	{r7, lr}
 8001bdc:	b082      	sub	sp, #8
 8001bde:	af00      	add	r7, sp, #0
 8001be0:	4603      	mov	r3, r0
 8001be2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001be4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001be8:	4618      	mov	r0, r3
 8001bea:	f7ff ff35 	bl	8001a58 <__NVIC_EnableIRQ>
}
 8001bee:	bf00      	nop
 8001bf0:	3708      	adds	r7, #8
 8001bf2:	46bd      	mov	sp, r7
 8001bf4:	bd80      	pop	{r7, pc}

08001bf6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001bf6:	b580      	push	{r7, lr}
 8001bf8:	b082      	sub	sp, #8
 8001bfa:	af00      	add	r7, sp, #0
 8001bfc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001bfe:	6878      	ldr	r0, [r7, #4]
 8001c00:	f7ff ffa2 	bl	8001b48 <SysTick_Config>
 8001c04:	4603      	mov	r3, r0
}
 8001c06:	4618      	mov	r0, r3
 8001c08:	3708      	adds	r7, #8
 8001c0a:	46bd      	mov	sp, r7
 8001c0c:	bd80      	pop	{r7, pc}
	...

08001c10 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001c10:	b480      	push	{r7}
 8001c12:	b08b      	sub	sp, #44	; 0x2c
 8001c14:	af00      	add	r7, sp, #0
 8001c16:	6078      	str	r0, [r7, #4]
 8001c18:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001c1a:	2300      	movs	r3, #0
 8001c1c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001c1e:	2300      	movs	r3, #0
 8001c20:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001c22:	e161      	b.n	8001ee8 <HAL_GPIO_Init+0x2d8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001c24:	2201      	movs	r2, #1
 8001c26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c28:	fa02 f303 	lsl.w	r3, r2, r3
 8001c2c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001c2e:	683b      	ldr	r3, [r7, #0]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	69fa      	ldr	r2, [r7, #28]
 8001c34:	4013      	ands	r3, r2
 8001c36:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001c38:	69ba      	ldr	r2, [r7, #24]
 8001c3a:	69fb      	ldr	r3, [r7, #28]
 8001c3c:	429a      	cmp	r2, r3
 8001c3e:	f040 8150 	bne.w	8001ee2 <HAL_GPIO_Init+0x2d2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001c42:	683b      	ldr	r3, [r7, #0]
 8001c44:	685b      	ldr	r3, [r3, #4]
 8001c46:	4a97      	ldr	r2, [pc, #604]	; (8001ea4 <HAL_GPIO_Init+0x294>)
 8001c48:	4293      	cmp	r3, r2
 8001c4a:	d05e      	beq.n	8001d0a <HAL_GPIO_Init+0xfa>
 8001c4c:	4a95      	ldr	r2, [pc, #596]	; (8001ea4 <HAL_GPIO_Init+0x294>)
 8001c4e:	4293      	cmp	r3, r2
 8001c50:	d875      	bhi.n	8001d3e <HAL_GPIO_Init+0x12e>
 8001c52:	4a95      	ldr	r2, [pc, #596]	; (8001ea8 <HAL_GPIO_Init+0x298>)
 8001c54:	4293      	cmp	r3, r2
 8001c56:	d058      	beq.n	8001d0a <HAL_GPIO_Init+0xfa>
 8001c58:	4a93      	ldr	r2, [pc, #588]	; (8001ea8 <HAL_GPIO_Init+0x298>)
 8001c5a:	4293      	cmp	r3, r2
 8001c5c:	d86f      	bhi.n	8001d3e <HAL_GPIO_Init+0x12e>
 8001c5e:	4a93      	ldr	r2, [pc, #588]	; (8001eac <HAL_GPIO_Init+0x29c>)
 8001c60:	4293      	cmp	r3, r2
 8001c62:	d052      	beq.n	8001d0a <HAL_GPIO_Init+0xfa>
 8001c64:	4a91      	ldr	r2, [pc, #580]	; (8001eac <HAL_GPIO_Init+0x29c>)
 8001c66:	4293      	cmp	r3, r2
 8001c68:	d869      	bhi.n	8001d3e <HAL_GPIO_Init+0x12e>
 8001c6a:	4a91      	ldr	r2, [pc, #580]	; (8001eb0 <HAL_GPIO_Init+0x2a0>)
 8001c6c:	4293      	cmp	r3, r2
 8001c6e:	d04c      	beq.n	8001d0a <HAL_GPIO_Init+0xfa>
 8001c70:	4a8f      	ldr	r2, [pc, #572]	; (8001eb0 <HAL_GPIO_Init+0x2a0>)
 8001c72:	4293      	cmp	r3, r2
 8001c74:	d863      	bhi.n	8001d3e <HAL_GPIO_Init+0x12e>
 8001c76:	4a8f      	ldr	r2, [pc, #572]	; (8001eb4 <HAL_GPIO_Init+0x2a4>)
 8001c78:	4293      	cmp	r3, r2
 8001c7a:	d046      	beq.n	8001d0a <HAL_GPIO_Init+0xfa>
 8001c7c:	4a8d      	ldr	r2, [pc, #564]	; (8001eb4 <HAL_GPIO_Init+0x2a4>)
 8001c7e:	4293      	cmp	r3, r2
 8001c80:	d85d      	bhi.n	8001d3e <HAL_GPIO_Init+0x12e>
 8001c82:	2b12      	cmp	r3, #18
 8001c84:	d82a      	bhi.n	8001cdc <HAL_GPIO_Init+0xcc>
 8001c86:	2b12      	cmp	r3, #18
 8001c88:	d859      	bhi.n	8001d3e <HAL_GPIO_Init+0x12e>
 8001c8a:	a201      	add	r2, pc, #4	; (adr r2, 8001c90 <HAL_GPIO_Init+0x80>)
 8001c8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c90:	08001d0b 	.word	0x08001d0b
 8001c94:	08001ce5 	.word	0x08001ce5
 8001c98:	08001cf7 	.word	0x08001cf7
 8001c9c:	08001d39 	.word	0x08001d39
 8001ca0:	08001d3f 	.word	0x08001d3f
 8001ca4:	08001d3f 	.word	0x08001d3f
 8001ca8:	08001d3f 	.word	0x08001d3f
 8001cac:	08001d3f 	.word	0x08001d3f
 8001cb0:	08001d3f 	.word	0x08001d3f
 8001cb4:	08001d3f 	.word	0x08001d3f
 8001cb8:	08001d3f 	.word	0x08001d3f
 8001cbc:	08001d3f 	.word	0x08001d3f
 8001cc0:	08001d3f 	.word	0x08001d3f
 8001cc4:	08001d3f 	.word	0x08001d3f
 8001cc8:	08001d3f 	.word	0x08001d3f
 8001ccc:	08001d3f 	.word	0x08001d3f
 8001cd0:	08001d3f 	.word	0x08001d3f
 8001cd4:	08001ced 	.word	0x08001ced
 8001cd8:	08001d01 	.word	0x08001d01
 8001cdc:	4a76      	ldr	r2, [pc, #472]	; (8001eb8 <HAL_GPIO_Init+0x2a8>)
 8001cde:	4293      	cmp	r3, r2
 8001ce0:	d013      	beq.n	8001d0a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001ce2:	e02c      	b.n	8001d3e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001ce4:	683b      	ldr	r3, [r7, #0]
 8001ce6:	68db      	ldr	r3, [r3, #12]
 8001ce8:	623b      	str	r3, [r7, #32]
          break;
 8001cea:	e029      	b.n	8001d40 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001cec:	683b      	ldr	r3, [r7, #0]
 8001cee:	68db      	ldr	r3, [r3, #12]
 8001cf0:	3304      	adds	r3, #4
 8001cf2:	623b      	str	r3, [r7, #32]
          break;
 8001cf4:	e024      	b.n	8001d40 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001cf6:	683b      	ldr	r3, [r7, #0]
 8001cf8:	68db      	ldr	r3, [r3, #12]
 8001cfa:	3308      	adds	r3, #8
 8001cfc:	623b      	str	r3, [r7, #32]
          break;
 8001cfe:	e01f      	b.n	8001d40 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001d00:	683b      	ldr	r3, [r7, #0]
 8001d02:	68db      	ldr	r3, [r3, #12]
 8001d04:	330c      	adds	r3, #12
 8001d06:	623b      	str	r3, [r7, #32]
          break;
 8001d08:	e01a      	b.n	8001d40 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001d0a:	683b      	ldr	r3, [r7, #0]
 8001d0c:	689b      	ldr	r3, [r3, #8]
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d102      	bne.n	8001d18 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001d12:	2304      	movs	r3, #4
 8001d14:	623b      	str	r3, [r7, #32]
          break;
 8001d16:	e013      	b.n	8001d40 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001d18:	683b      	ldr	r3, [r7, #0]
 8001d1a:	689b      	ldr	r3, [r3, #8]
 8001d1c:	2b01      	cmp	r3, #1
 8001d1e:	d105      	bne.n	8001d2c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001d20:	2308      	movs	r3, #8
 8001d22:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	69fa      	ldr	r2, [r7, #28]
 8001d28:	611a      	str	r2, [r3, #16]
          break;
 8001d2a:	e009      	b.n	8001d40 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001d2c:	2308      	movs	r3, #8
 8001d2e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	69fa      	ldr	r2, [r7, #28]
 8001d34:	615a      	str	r2, [r3, #20]
          break;
 8001d36:	e003      	b.n	8001d40 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001d38:	2300      	movs	r3, #0
 8001d3a:	623b      	str	r3, [r7, #32]
          break;
 8001d3c:	e000      	b.n	8001d40 <HAL_GPIO_Init+0x130>
          break;
 8001d3e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001d40:	69bb      	ldr	r3, [r7, #24]
 8001d42:	2bff      	cmp	r3, #255	; 0xff
 8001d44:	d801      	bhi.n	8001d4a <HAL_GPIO_Init+0x13a>
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	e001      	b.n	8001d4e <HAL_GPIO_Init+0x13e>
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	3304      	adds	r3, #4
 8001d4e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001d50:	69bb      	ldr	r3, [r7, #24]
 8001d52:	2bff      	cmp	r3, #255	; 0xff
 8001d54:	d802      	bhi.n	8001d5c <HAL_GPIO_Init+0x14c>
 8001d56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d58:	009b      	lsls	r3, r3, #2
 8001d5a:	e002      	b.n	8001d62 <HAL_GPIO_Init+0x152>
 8001d5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d5e:	3b08      	subs	r3, #8
 8001d60:	009b      	lsls	r3, r3, #2
 8001d62:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001d64:	697b      	ldr	r3, [r7, #20]
 8001d66:	681a      	ldr	r2, [r3, #0]
 8001d68:	210f      	movs	r1, #15
 8001d6a:	693b      	ldr	r3, [r7, #16]
 8001d6c:	fa01 f303 	lsl.w	r3, r1, r3
 8001d70:	43db      	mvns	r3, r3
 8001d72:	401a      	ands	r2, r3
 8001d74:	6a39      	ldr	r1, [r7, #32]
 8001d76:	693b      	ldr	r3, [r7, #16]
 8001d78:	fa01 f303 	lsl.w	r3, r1, r3
 8001d7c:	431a      	orrs	r2, r3
 8001d7e:	697b      	ldr	r3, [r7, #20]
 8001d80:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001d82:	683b      	ldr	r3, [r7, #0]
 8001d84:	685b      	ldr	r3, [r3, #4]
 8001d86:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	f000 80a9 	beq.w	8001ee2 <HAL_GPIO_Init+0x2d2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001d90:	4b4a      	ldr	r3, [pc, #296]	; (8001ebc <HAL_GPIO_Init+0x2ac>)
 8001d92:	699b      	ldr	r3, [r3, #24]
 8001d94:	4a49      	ldr	r2, [pc, #292]	; (8001ebc <HAL_GPIO_Init+0x2ac>)
 8001d96:	f043 0301 	orr.w	r3, r3, #1
 8001d9a:	6193      	str	r3, [r2, #24]
 8001d9c:	4b47      	ldr	r3, [pc, #284]	; (8001ebc <HAL_GPIO_Init+0x2ac>)
 8001d9e:	699b      	ldr	r3, [r3, #24]
 8001da0:	f003 0301 	and.w	r3, r3, #1
 8001da4:	60bb      	str	r3, [r7, #8]
 8001da6:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001da8:	4a45      	ldr	r2, [pc, #276]	; (8001ec0 <HAL_GPIO_Init+0x2b0>)
 8001daa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dac:	089b      	lsrs	r3, r3, #2
 8001dae:	3302      	adds	r3, #2
 8001db0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001db4:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001db6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001db8:	f003 0303 	and.w	r3, r3, #3
 8001dbc:	009b      	lsls	r3, r3, #2
 8001dbe:	220f      	movs	r2, #15
 8001dc0:	fa02 f303 	lsl.w	r3, r2, r3
 8001dc4:	43db      	mvns	r3, r3
 8001dc6:	68fa      	ldr	r2, [r7, #12]
 8001dc8:	4013      	ands	r3, r2
 8001dca:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	4a3d      	ldr	r2, [pc, #244]	; (8001ec4 <HAL_GPIO_Init+0x2b4>)
 8001dd0:	4293      	cmp	r3, r2
 8001dd2:	d00d      	beq.n	8001df0 <HAL_GPIO_Init+0x1e0>
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	4a3c      	ldr	r2, [pc, #240]	; (8001ec8 <HAL_GPIO_Init+0x2b8>)
 8001dd8:	4293      	cmp	r3, r2
 8001dda:	d007      	beq.n	8001dec <HAL_GPIO_Init+0x1dc>
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	4a3b      	ldr	r2, [pc, #236]	; (8001ecc <HAL_GPIO_Init+0x2bc>)
 8001de0:	4293      	cmp	r3, r2
 8001de2:	d101      	bne.n	8001de8 <HAL_GPIO_Init+0x1d8>
 8001de4:	2302      	movs	r3, #2
 8001de6:	e004      	b.n	8001df2 <HAL_GPIO_Init+0x1e2>
 8001de8:	2303      	movs	r3, #3
 8001dea:	e002      	b.n	8001df2 <HAL_GPIO_Init+0x1e2>
 8001dec:	2301      	movs	r3, #1
 8001dee:	e000      	b.n	8001df2 <HAL_GPIO_Init+0x1e2>
 8001df0:	2300      	movs	r3, #0
 8001df2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001df4:	f002 0203 	and.w	r2, r2, #3
 8001df8:	0092      	lsls	r2, r2, #2
 8001dfa:	4093      	lsls	r3, r2
 8001dfc:	68fa      	ldr	r2, [r7, #12]
 8001dfe:	4313      	orrs	r3, r2
 8001e00:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001e02:	492f      	ldr	r1, [pc, #188]	; (8001ec0 <HAL_GPIO_Init+0x2b0>)
 8001e04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e06:	089b      	lsrs	r3, r3, #2
 8001e08:	3302      	adds	r3, #2
 8001e0a:	68fa      	ldr	r2, [r7, #12]
 8001e0c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001e10:	683b      	ldr	r3, [r7, #0]
 8001e12:	685b      	ldr	r3, [r3, #4]
 8001e14:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d006      	beq.n	8001e2a <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001e1c:	4b2c      	ldr	r3, [pc, #176]	; (8001ed0 <HAL_GPIO_Init+0x2c0>)
 8001e1e:	681a      	ldr	r2, [r3, #0]
 8001e20:	492b      	ldr	r1, [pc, #172]	; (8001ed0 <HAL_GPIO_Init+0x2c0>)
 8001e22:	69bb      	ldr	r3, [r7, #24]
 8001e24:	4313      	orrs	r3, r2
 8001e26:	600b      	str	r3, [r1, #0]
 8001e28:	e006      	b.n	8001e38 <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001e2a:	4b29      	ldr	r3, [pc, #164]	; (8001ed0 <HAL_GPIO_Init+0x2c0>)
 8001e2c:	681a      	ldr	r2, [r3, #0]
 8001e2e:	69bb      	ldr	r3, [r7, #24]
 8001e30:	43db      	mvns	r3, r3
 8001e32:	4927      	ldr	r1, [pc, #156]	; (8001ed0 <HAL_GPIO_Init+0x2c0>)
 8001e34:	4013      	ands	r3, r2
 8001e36:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001e38:	683b      	ldr	r3, [r7, #0]
 8001e3a:	685b      	ldr	r3, [r3, #4]
 8001e3c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d006      	beq.n	8001e52 <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001e44:	4b22      	ldr	r3, [pc, #136]	; (8001ed0 <HAL_GPIO_Init+0x2c0>)
 8001e46:	685a      	ldr	r2, [r3, #4]
 8001e48:	4921      	ldr	r1, [pc, #132]	; (8001ed0 <HAL_GPIO_Init+0x2c0>)
 8001e4a:	69bb      	ldr	r3, [r7, #24]
 8001e4c:	4313      	orrs	r3, r2
 8001e4e:	604b      	str	r3, [r1, #4]
 8001e50:	e006      	b.n	8001e60 <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001e52:	4b1f      	ldr	r3, [pc, #124]	; (8001ed0 <HAL_GPIO_Init+0x2c0>)
 8001e54:	685a      	ldr	r2, [r3, #4]
 8001e56:	69bb      	ldr	r3, [r7, #24]
 8001e58:	43db      	mvns	r3, r3
 8001e5a:	491d      	ldr	r1, [pc, #116]	; (8001ed0 <HAL_GPIO_Init+0x2c0>)
 8001e5c:	4013      	ands	r3, r2
 8001e5e:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001e60:	683b      	ldr	r3, [r7, #0]
 8001e62:	685b      	ldr	r3, [r3, #4]
 8001e64:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d006      	beq.n	8001e7a <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001e6c:	4b18      	ldr	r3, [pc, #96]	; (8001ed0 <HAL_GPIO_Init+0x2c0>)
 8001e6e:	689a      	ldr	r2, [r3, #8]
 8001e70:	4917      	ldr	r1, [pc, #92]	; (8001ed0 <HAL_GPIO_Init+0x2c0>)
 8001e72:	69bb      	ldr	r3, [r7, #24]
 8001e74:	4313      	orrs	r3, r2
 8001e76:	608b      	str	r3, [r1, #8]
 8001e78:	e006      	b.n	8001e88 <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001e7a:	4b15      	ldr	r3, [pc, #84]	; (8001ed0 <HAL_GPIO_Init+0x2c0>)
 8001e7c:	689a      	ldr	r2, [r3, #8]
 8001e7e:	69bb      	ldr	r3, [r7, #24]
 8001e80:	43db      	mvns	r3, r3
 8001e82:	4913      	ldr	r1, [pc, #76]	; (8001ed0 <HAL_GPIO_Init+0x2c0>)
 8001e84:	4013      	ands	r3, r2
 8001e86:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001e88:	683b      	ldr	r3, [r7, #0]
 8001e8a:	685b      	ldr	r3, [r3, #4]
 8001e8c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d01f      	beq.n	8001ed4 <HAL_GPIO_Init+0x2c4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001e94:	4b0e      	ldr	r3, [pc, #56]	; (8001ed0 <HAL_GPIO_Init+0x2c0>)
 8001e96:	68da      	ldr	r2, [r3, #12]
 8001e98:	490d      	ldr	r1, [pc, #52]	; (8001ed0 <HAL_GPIO_Init+0x2c0>)
 8001e9a:	69bb      	ldr	r3, [r7, #24]
 8001e9c:	4313      	orrs	r3, r2
 8001e9e:	60cb      	str	r3, [r1, #12]
 8001ea0:	e01f      	b.n	8001ee2 <HAL_GPIO_Init+0x2d2>
 8001ea2:	bf00      	nop
 8001ea4:	10320000 	.word	0x10320000
 8001ea8:	10310000 	.word	0x10310000
 8001eac:	10220000 	.word	0x10220000
 8001eb0:	10210000 	.word	0x10210000
 8001eb4:	10120000 	.word	0x10120000
 8001eb8:	10110000 	.word	0x10110000
 8001ebc:	40021000 	.word	0x40021000
 8001ec0:	40010000 	.word	0x40010000
 8001ec4:	40010800 	.word	0x40010800
 8001ec8:	40010c00 	.word	0x40010c00
 8001ecc:	40011000 	.word	0x40011000
 8001ed0:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001ed4:	4b0b      	ldr	r3, [pc, #44]	; (8001f04 <HAL_GPIO_Init+0x2f4>)
 8001ed6:	68da      	ldr	r2, [r3, #12]
 8001ed8:	69bb      	ldr	r3, [r7, #24]
 8001eda:	43db      	mvns	r3, r3
 8001edc:	4909      	ldr	r1, [pc, #36]	; (8001f04 <HAL_GPIO_Init+0x2f4>)
 8001ede:	4013      	ands	r3, r2
 8001ee0:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001ee2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ee4:	3301      	adds	r3, #1
 8001ee6:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001ee8:	683b      	ldr	r3, [r7, #0]
 8001eea:	681a      	ldr	r2, [r3, #0]
 8001eec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001eee:	fa22 f303 	lsr.w	r3, r2, r3
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	f47f ae96 	bne.w	8001c24 <HAL_GPIO_Init+0x14>
  }
}
 8001ef8:	bf00      	nop
 8001efa:	bf00      	nop
 8001efc:	372c      	adds	r7, #44	; 0x2c
 8001efe:	46bd      	mov	sp, r7
 8001f00:	bc80      	pop	{r7}
 8001f02:	4770      	bx	lr
 8001f04:	40010400 	.word	0x40010400

08001f08 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001f08:	b480      	push	{r7}
 8001f0a:	b085      	sub	sp, #20
 8001f0c:	af00      	add	r7, sp, #0
 8001f0e:	6078      	str	r0, [r7, #4]
 8001f10:	460b      	mov	r3, r1
 8001f12:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	689a      	ldr	r2, [r3, #8]
 8001f18:	887b      	ldrh	r3, [r7, #2]
 8001f1a:	4013      	ands	r3, r2
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d002      	beq.n	8001f26 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001f20:	2301      	movs	r3, #1
 8001f22:	73fb      	strb	r3, [r7, #15]
 8001f24:	e001      	b.n	8001f2a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001f26:	2300      	movs	r3, #0
 8001f28:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001f2a:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f2c:	4618      	mov	r0, r3
 8001f2e:	3714      	adds	r7, #20
 8001f30:	46bd      	mov	sp, r7
 8001f32:	bc80      	pop	{r7}
 8001f34:	4770      	bx	lr

08001f36 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001f36:	b480      	push	{r7}
 8001f38:	b083      	sub	sp, #12
 8001f3a:	af00      	add	r7, sp, #0
 8001f3c:	6078      	str	r0, [r7, #4]
 8001f3e:	460b      	mov	r3, r1
 8001f40:	807b      	strh	r3, [r7, #2]
 8001f42:	4613      	mov	r3, r2
 8001f44:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001f46:	787b      	ldrb	r3, [r7, #1]
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d003      	beq.n	8001f54 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001f4c:	887a      	ldrh	r2, [r7, #2]
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001f52:	e003      	b.n	8001f5c <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001f54:	887b      	ldrh	r3, [r7, #2]
 8001f56:	041a      	lsls	r2, r3, #16
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	611a      	str	r2, [r3, #16]
}
 8001f5c:	bf00      	nop
 8001f5e:	370c      	adds	r7, #12
 8001f60:	46bd      	mov	sp, r7
 8001f62:	bc80      	pop	{r7}
 8001f64:	4770      	bx	lr

08001f66 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001f66:	b480      	push	{r7}
 8001f68:	b085      	sub	sp, #20
 8001f6a:	af00      	add	r7, sp, #0
 8001f6c:	6078      	str	r0, [r7, #4]
 8001f6e:	460b      	mov	r3, r1
 8001f70:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	68db      	ldr	r3, [r3, #12]
 8001f76:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001f78:	887a      	ldrh	r2, [r7, #2]
 8001f7a:	68fb      	ldr	r3, [r7, #12]
 8001f7c:	4013      	ands	r3, r2
 8001f7e:	041a      	lsls	r2, r3, #16
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	43d9      	mvns	r1, r3
 8001f84:	887b      	ldrh	r3, [r7, #2]
 8001f86:	400b      	ands	r3, r1
 8001f88:	431a      	orrs	r2, r3
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	611a      	str	r2, [r3, #16]
}
 8001f8e:	bf00      	nop
 8001f90:	3714      	adds	r7, #20
 8001f92:	46bd      	mov	sp, r7
 8001f94:	bc80      	pop	{r7}
 8001f96:	4770      	bx	lr

08001f98 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001f98:	b580      	push	{r7, lr}
 8001f9a:	b086      	sub	sp, #24
 8001f9c:	af00      	add	r7, sp, #0
 8001f9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d101      	bne.n	8001faa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001fa6:	2301      	movs	r3, #1
 8001fa8:	e272      	b.n	8002490 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	f003 0301 	and.w	r3, r3, #1
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	f000 8087 	beq.w	80020c6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001fb8:	4b92      	ldr	r3, [pc, #584]	; (8002204 <HAL_RCC_OscConfig+0x26c>)
 8001fba:	685b      	ldr	r3, [r3, #4]
 8001fbc:	f003 030c 	and.w	r3, r3, #12
 8001fc0:	2b04      	cmp	r3, #4
 8001fc2:	d00c      	beq.n	8001fde <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001fc4:	4b8f      	ldr	r3, [pc, #572]	; (8002204 <HAL_RCC_OscConfig+0x26c>)
 8001fc6:	685b      	ldr	r3, [r3, #4]
 8001fc8:	f003 030c 	and.w	r3, r3, #12
 8001fcc:	2b08      	cmp	r3, #8
 8001fce:	d112      	bne.n	8001ff6 <HAL_RCC_OscConfig+0x5e>
 8001fd0:	4b8c      	ldr	r3, [pc, #560]	; (8002204 <HAL_RCC_OscConfig+0x26c>)
 8001fd2:	685b      	ldr	r3, [r3, #4]
 8001fd4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001fd8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001fdc:	d10b      	bne.n	8001ff6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001fde:	4b89      	ldr	r3, [pc, #548]	; (8002204 <HAL_RCC_OscConfig+0x26c>)
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d06c      	beq.n	80020c4 <HAL_RCC_OscConfig+0x12c>
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	685b      	ldr	r3, [r3, #4]
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d168      	bne.n	80020c4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001ff2:	2301      	movs	r3, #1
 8001ff4:	e24c      	b.n	8002490 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	685b      	ldr	r3, [r3, #4]
 8001ffa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001ffe:	d106      	bne.n	800200e <HAL_RCC_OscConfig+0x76>
 8002000:	4b80      	ldr	r3, [pc, #512]	; (8002204 <HAL_RCC_OscConfig+0x26c>)
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	4a7f      	ldr	r2, [pc, #508]	; (8002204 <HAL_RCC_OscConfig+0x26c>)
 8002006:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800200a:	6013      	str	r3, [r2, #0]
 800200c:	e02e      	b.n	800206c <HAL_RCC_OscConfig+0xd4>
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	685b      	ldr	r3, [r3, #4]
 8002012:	2b00      	cmp	r3, #0
 8002014:	d10c      	bne.n	8002030 <HAL_RCC_OscConfig+0x98>
 8002016:	4b7b      	ldr	r3, [pc, #492]	; (8002204 <HAL_RCC_OscConfig+0x26c>)
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	4a7a      	ldr	r2, [pc, #488]	; (8002204 <HAL_RCC_OscConfig+0x26c>)
 800201c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002020:	6013      	str	r3, [r2, #0]
 8002022:	4b78      	ldr	r3, [pc, #480]	; (8002204 <HAL_RCC_OscConfig+0x26c>)
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	4a77      	ldr	r2, [pc, #476]	; (8002204 <HAL_RCC_OscConfig+0x26c>)
 8002028:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800202c:	6013      	str	r3, [r2, #0]
 800202e:	e01d      	b.n	800206c <HAL_RCC_OscConfig+0xd4>
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	685b      	ldr	r3, [r3, #4]
 8002034:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002038:	d10c      	bne.n	8002054 <HAL_RCC_OscConfig+0xbc>
 800203a:	4b72      	ldr	r3, [pc, #456]	; (8002204 <HAL_RCC_OscConfig+0x26c>)
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	4a71      	ldr	r2, [pc, #452]	; (8002204 <HAL_RCC_OscConfig+0x26c>)
 8002040:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002044:	6013      	str	r3, [r2, #0]
 8002046:	4b6f      	ldr	r3, [pc, #444]	; (8002204 <HAL_RCC_OscConfig+0x26c>)
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	4a6e      	ldr	r2, [pc, #440]	; (8002204 <HAL_RCC_OscConfig+0x26c>)
 800204c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002050:	6013      	str	r3, [r2, #0]
 8002052:	e00b      	b.n	800206c <HAL_RCC_OscConfig+0xd4>
 8002054:	4b6b      	ldr	r3, [pc, #428]	; (8002204 <HAL_RCC_OscConfig+0x26c>)
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	4a6a      	ldr	r2, [pc, #424]	; (8002204 <HAL_RCC_OscConfig+0x26c>)
 800205a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800205e:	6013      	str	r3, [r2, #0]
 8002060:	4b68      	ldr	r3, [pc, #416]	; (8002204 <HAL_RCC_OscConfig+0x26c>)
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	4a67      	ldr	r2, [pc, #412]	; (8002204 <HAL_RCC_OscConfig+0x26c>)
 8002066:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800206a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	685b      	ldr	r3, [r3, #4]
 8002070:	2b00      	cmp	r3, #0
 8002072:	d013      	beq.n	800209c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002074:	f7ff fcb4 	bl	80019e0 <HAL_GetTick>
 8002078:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800207a:	e008      	b.n	800208e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800207c:	f7ff fcb0 	bl	80019e0 <HAL_GetTick>
 8002080:	4602      	mov	r2, r0
 8002082:	693b      	ldr	r3, [r7, #16]
 8002084:	1ad3      	subs	r3, r2, r3
 8002086:	2b64      	cmp	r3, #100	; 0x64
 8002088:	d901      	bls.n	800208e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800208a:	2303      	movs	r3, #3
 800208c:	e200      	b.n	8002490 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800208e:	4b5d      	ldr	r3, [pc, #372]	; (8002204 <HAL_RCC_OscConfig+0x26c>)
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002096:	2b00      	cmp	r3, #0
 8002098:	d0f0      	beq.n	800207c <HAL_RCC_OscConfig+0xe4>
 800209a:	e014      	b.n	80020c6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800209c:	f7ff fca0 	bl	80019e0 <HAL_GetTick>
 80020a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80020a2:	e008      	b.n	80020b6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80020a4:	f7ff fc9c 	bl	80019e0 <HAL_GetTick>
 80020a8:	4602      	mov	r2, r0
 80020aa:	693b      	ldr	r3, [r7, #16]
 80020ac:	1ad3      	subs	r3, r2, r3
 80020ae:	2b64      	cmp	r3, #100	; 0x64
 80020b0:	d901      	bls.n	80020b6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80020b2:	2303      	movs	r3, #3
 80020b4:	e1ec      	b.n	8002490 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80020b6:	4b53      	ldr	r3, [pc, #332]	; (8002204 <HAL_RCC_OscConfig+0x26c>)
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d1f0      	bne.n	80020a4 <HAL_RCC_OscConfig+0x10c>
 80020c2:	e000      	b.n	80020c6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80020c4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	f003 0302 	and.w	r3, r3, #2
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d063      	beq.n	800219a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80020d2:	4b4c      	ldr	r3, [pc, #304]	; (8002204 <HAL_RCC_OscConfig+0x26c>)
 80020d4:	685b      	ldr	r3, [r3, #4]
 80020d6:	f003 030c 	and.w	r3, r3, #12
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d00b      	beq.n	80020f6 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80020de:	4b49      	ldr	r3, [pc, #292]	; (8002204 <HAL_RCC_OscConfig+0x26c>)
 80020e0:	685b      	ldr	r3, [r3, #4]
 80020e2:	f003 030c 	and.w	r3, r3, #12
 80020e6:	2b08      	cmp	r3, #8
 80020e8:	d11c      	bne.n	8002124 <HAL_RCC_OscConfig+0x18c>
 80020ea:	4b46      	ldr	r3, [pc, #280]	; (8002204 <HAL_RCC_OscConfig+0x26c>)
 80020ec:	685b      	ldr	r3, [r3, #4]
 80020ee:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d116      	bne.n	8002124 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80020f6:	4b43      	ldr	r3, [pc, #268]	; (8002204 <HAL_RCC_OscConfig+0x26c>)
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	f003 0302 	and.w	r3, r3, #2
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d005      	beq.n	800210e <HAL_RCC_OscConfig+0x176>
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	691b      	ldr	r3, [r3, #16]
 8002106:	2b01      	cmp	r3, #1
 8002108:	d001      	beq.n	800210e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800210a:	2301      	movs	r3, #1
 800210c:	e1c0      	b.n	8002490 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800210e:	4b3d      	ldr	r3, [pc, #244]	; (8002204 <HAL_RCC_OscConfig+0x26c>)
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	695b      	ldr	r3, [r3, #20]
 800211a:	00db      	lsls	r3, r3, #3
 800211c:	4939      	ldr	r1, [pc, #228]	; (8002204 <HAL_RCC_OscConfig+0x26c>)
 800211e:	4313      	orrs	r3, r2
 8002120:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002122:	e03a      	b.n	800219a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	691b      	ldr	r3, [r3, #16]
 8002128:	2b00      	cmp	r3, #0
 800212a:	d020      	beq.n	800216e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800212c:	4b36      	ldr	r3, [pc, #216]	; (8002208 <HAL_RCC_OscConfig+0x270>)
 800212e:	2201      	movs	r2, #1
 8002130:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002132:	f7ff fc55 	bl	80019e0 <HAL_GetTick>
 8002136:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002138:	e008      	b.n	800214c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800213a:	f7ff fc51 	bl	80019e0 <HAL_GetTick>
 800213e:	4602      	mov	r2, r0
 8002140:	693b      	ldr	r3, [r7, #16]
 8002142:	1ad3      	subs	r3, r2, r3
 8002144:	2b02      	cmp	r3, #2
 8002146:	d901      	bls.n	800214c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002148:	2303      	movs	r3, #3
 800214a:	e1a1      	b.n	8002490 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800214c:	4b2d      	ldr	r3, [pc, #180]	; (8002204 <HAL_RCC_OscConfig+0x26c>)
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	f003 0302 	and.w	r3, r3, #2
 8002154:	2b00      	cmp	r3, #0
 8002156:	d0f0      	beq.n	800213a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002158:	4b2a      	ldr	r3, [pc, #168]	; (8002204 <HAL_RCC_OscConfig+0x26c>)
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	695b      	ldr	r3, [r3, #20]
 8002164:	00db      	lsls	r3, r3, #3
 8002166:	4927      	ldr	r1, [pc, #156]	; (8002204 <HAL_RCC_OscConfig+0x26c>)
 8002168:	4313      	orrs	r3, r2
 800216a:	600b      	str	r3, [r1, #0]
 800216c:	e015      	b.n	800219a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800216e:	4b26      	ldr	r3, [pc, #152]	; (8002208 <HAL_RCC_OscConfig+0x270>)
 8002170:	2200      	movs	r2, #0
 8002172:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002174:	f7ff fc34 	bl	80019e0 <HAL_GetTick>
 8002178:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800217a:	e008      	b.n	800218e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800217c:	f7ff fc30 	bl	80019e0 <HAL_GetTick>
 8002180:	4602      	mov	r2, r0
 8002182:	693b      	ldr	r3, [r7, #16]
 8002184:	1ad3      	subs	r3, r2, r3
 8002186:	2b02      	cmp	r3, #2
 8002188:	d901      	bls.n	800218e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800218a:	2303      	movs	r3, #3
 800218c:	e180      	b.n	8002490 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800218e:	4b1d      	ldr	r3, [pc, #116]	; (8002204 <HAL_RCC_OscConfig+0x26c>)
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	f003 0302 	and.w	r3, r3, #2
 8002196:	2b00      	cmp	r3, #0
 8002198:	d1f0      	bne.n	800217c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	f003 0308 	and.w	r3, r3, #8
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d03a      	beq.n	800221c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	699b      	ldr	r3, [r3, #24]
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d019      	beq.n	80021e2 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80021ae:	4b17      	ldr	r3, [pc, #92]	; (800220c <HAL_RCC_OscConfig+0x274>)
 80021b0:	2201      	movs	r2, #1
 80021b2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80021b4:	f7ff fc14 	bl	80019e0 <HAL_GetTick>
 80021b8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80021ba:	e008      	b.n	80021ce <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80021bc:	f7ff fc10 	bl	80019e0 <HAL_GetTick>
 80021c0:	4602      	mov	r2, r0
 80021c2:	693b      	ldr	r3, [r7, #16]
 80021c4:	1ad3      	subs	r3, r2, r3
 80021c6:	2b02      	cmp	r3, #2
 80021c8:	d901      	bls.n	80021ce <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80021ca:	2303      	movs	r3, #3
 80021cc:	e160      	b.n	8002490 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80021ce:	4b0d      	ldr	r3, [pc, #52]	; (8002204 <HAL_RCC_OscConfig+0x26c>)
 80021d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021d2:	f003 0302 	and.w	r3, r3, #2
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d0f0      	beq.n	80021bc <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80021da:	2001      	movs	r0, #1
 80021dc:	f000 faa6 	bl	800272c <RCC_Delay>
 80021e0:	e01c      	b.n	800221c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80021e2:	4b0a      	ldr	r3, [pc, #40]	; (800220c <HAL_RCC_OscConfig+0x274>)
 80021e4:	2200      	movs	r2, #0
 80021e6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80021e8:	f7ff fbfa 	bl	80019e0 <HAL_GetTick>
 80021ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80021ee:	e00f      	b.n	8002210 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80021f0:	f7ff fbf6 	bl	80019e0 <HAL_GetTick>
 80021f4:	4602      	mov	r2, r0
 80021f6:	693b      	ldr	r3, [r7, #16]
 80021f8:	1ad3      	subs	r3, r2, r3
 80021fa:	2b02      	cmp	r3, #2
 80021fc:	d908      	bls.n	8002210 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80021fe:	2303      	movs	r3, #3
 8002200:	e146      	b.n	8002490 <HAL_RCC_OscConfig+0x4f8>
 8002202:	bf00      	nop
 8002204:	40021000 	.word	0x40021000
 8002208:	42420000 	.word	0x42420000
 800220c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002210:	4b92      	ldr	r3, [pc, #584]	; (800245c <HAL_RCC_OscConfig+0x4c4>)
 8002212:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002214:	f003 0302 	and.w	r3, r3, #2
 8002218:	2b00      	cmp	r3, #0
 800221a:	d1e9      	bne.n	80021f0 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	f003 0304 	and.w	r3, r3, #4
 8002224:	2b00      	cmp	r3, #0
 8002226:	f000 80a6 	beq.w	8002376 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800222a:	2300      	movs	r3, #0
 800222c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800222e:	4b8b      	ldr	r3, [pc, #556]	; (800245c <HAL_RCC_OscConfig+0x4c4>)
 8002230:	69db      	ldr	r3, [r3, #28]
 8002232:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002236:	2b00      	cmp	r3, #0
 8002238:	d10d      	bne.n	8002256 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800223a:	4b88      	ldr	r3, [pc, #544]	; (800245c <HAL_RCC_OscConfig+0x4c4>)
 800223c:	69db      	ldr	r3, [r3, #28]
 800223e:	4a87      	ldr	r2, [pc, #540]	; (800245c <HAL_RCC_OscConfig+0x4c4>)
 8002240:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002244:	61d3      	str	r3, [r2, #28]
 8002246:	4b85      	ldr	r3, [pc, #532]	; (800245c <HAL_RCC_OscConfig+0x4c4>)
 8002248:	69db      	ldr	r3, [r3, #28]
 800224a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800224e:	60bb      	str	r3, [r7, #8]
 8002250:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002252:	2301      	movs	r3, #1
 8002254:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002256:	4b82      	ldr	r3, [pc, #520]	; (8002460 <HAL_RCC_OscConfig+0x4c8>)
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800225e:	2b00      	cmp	r3, #0
 8002260:	d118      	bne.n	8002294 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002262:	4b7f      	ldr	r3, [pc, #508]	; (8002460 <HAL_RCC_OscConfig+0x4c8>)
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	4a7e      	ldr	r2, [pc, #504]	; (8002460 <HAL_RCC_OscConfig+0x4c8>)
 8002268:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800226c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800226e:	f7ff fbb7 	bl	80019e0 <HAL_GetTick>
 8002272:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002274:	e008      	b.n	8002288 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002276:	f7ff fbb3 	bl	80019e0 <HAL_GetTick>
 800227a:	4602      	mov	r2, r0
 800227c:	693b      	ldr	r3, [r7, #16]
 800227e:	1ad3      	subs	r3, r2, r3
 8002280:	2b64      	cmp	r3, #100	; 0x64
 8002282:	d901      	bls.n	8002288 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002284:	2303      	movs	r3, #3
 8002286:	e103      	b.n	8002490 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002288:	4b75      	ldr	r3, [pc, #468]	; (8002460 <HAL_RCC_OscConfig+0x4c8>)
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002290:	2b00      	cmp	r3, #0
 8002292:	d0f0      	beq.n	8002276 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	68db      	ldr	r3, [r3, #12]
 8002298:	2b01      	cmp	r3, #1
 800229a:	d106      	bne.n	80022aa <HAL_RCC_OscConfig+0x312>
 800229c:	4b6f      	ldr	r3, [pc, #444]	; (800245c <HAL_RCC_OscConfig+0x4c4>)
 800229e:	6a1b      	ldr	r3, [r3, #32]
 80022a0:	4a6e      	ldr	r2, [pc, #440]	; (800245c <HAL_RCC_OscConfig+0x4c4>)
 80022a2:	f043 0301 	orr.w	r3, r3, #1
 80022a6:	6213      	str	r3, [r2, #32]
 80022a8:	e02d      	b.n	8002306 <HAL_RCC_OscConfig+0x36e>
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	68db      	ldr	r3, [r3, #12]
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d10c      	bne.n	80022cc <HAL_RCC_OscConfig+0x334>
 80022b2:	4b6a      	ldr	r3, [pc, #424]	; (800245c <HAL_RCC_OscConfig+0x4c4>)
 80022b4:	6a1b      	ldr	r3, [r3, #32]
 80022b6:	4a69      	ldr	r2, [pc, #420]	; (800245c <HAL_RCC_OscConfig+0x4c4>)
 80022b8:	f023 0301 	bic.w	r3, r3, #1
 80022bc:	6213      	str	r3, [r2, #32]
 80022be:	4b67      	ldr	r3, [pc, #412]	; (800245c <HAL_RCC_OscConfig+0x4c4>)
 80022c0:	6a1b      	ldr	r3, [r3, #32]
 80022c2:	4a66      	ldr	r2, [pc, #408]	; (800245c <HAL_RCC_OscConfig+0x4c4>)
 80022c4:	f023 0304 	bic.w	r3, r3, #4
 80022c8:	6213      	str	r3, [r2, #32]
 80022ca:	e01c      	b.n	8002306 <HAL_RCC_OscConfig+0x36e>
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	68db      	ldr	r3, [r3, #12]
 80022d0:	2b05      	cmp	r3, #5
 80022d2:	d10c      	bne.n	80022ee <HAL_RCC_OscConfig+0x356>
 80022d4:	4b61      	ldr	r3, [pc, #388]	; (800245c <HAL_RCC_OscConfig+0x4c4>)
 80022d6:	6a1b      	ldr	r3, [r3, #32]
 80022d8:	4a60      	ldr	r2, [pc, #384]	; (800245c <HAL_RCC_OscConfig+0x4c4>)
 80022da:	f043 0304 	orr.w	r3, r3, #4
 80022de:	6213      	str	r3, [r2, #32]
 80022e0:	4b5e      	ldr	r3, [pc, #376]	; (800245c <HAL_RCC_OscConfig+0x4c4>)
 80022e2:	6a1b      	ldr	r3, [r3, #32]
 80022e4:	4a5d      	ldr	r2, [pc, #372]	; (800245c <HAL_RCC_OscConfig+0x4c4>)
 80022e6:	f043 0301 	orr.w	r3, r3, #1
 80022ea:	6213      	str	r3, [r2, #32]
 80022ec:	e00b      	b.n	8002306 <HAL_RCC_OscConfig+0x36e>
 80022ee:	4b5b      	ldr	r3, [pc, #364]	; (800245c <HAL_RCC_OscConfig+0x4c4>)
 80022f0:	6a1b      	ldr	r3, [r3, #32]
 80022f2:	4a5a      	ldr	r2, [pc, #360]	; (800245c <HAL_RCC_OscConfig+0x4c4>)
 80022f4:	f023 0301 	bic.w	r3, r3, #1
 80022f8:	6213      	str	r3, [r2, #32]
 80022fa:	4b58      	ldr	r3, [pc, #352]	; (800245c <HAL_RCC_OscConfig+0x4c4>)
 80022fc:	6a1b      	ldr	r3, [r3, #32]
 80022fe:	4a57      	ldr	r2, [pc, #348]	; (800245c <HAL_RCC_OscConfig+0x4c4>)
 8002300:	f023 0304 	bic.w	r3, r3, #4
 8002304:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	68db      	ldr	r3, [r3, #12]
 800230a:	2b00      	cmp	r3, #0
 800230c:	d015      	beq.n	800233a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800230e:	f7ff fb67 	bl	80019e0 <HAL_GetTick>
 8002312:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002314:	e00a      	b.n	800232c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002316:	f7ff fb63 	bl	80019e0 <HAL_GetTick>
 800231a:	4602      	mov	r2, r0
 800231c:	693b      	ldr	r3, [r7, #16]
 800231e:	1ad3      	subs	r3, r2, r3
 8002320:	f241 3288 	movw	r2, #5000	; 0x1388
 8002324:	4293      	cmp	r3, r2
 8002326:	d901      	bls.n	800232c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002328:	2303      	movs	r3, #3
 800232a:	e0b1      	b.n	8002490 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800232c:	4b4b      	ldr	r3, [pc, #300]	; (800245c <HAL_RCC_OscConfig+0x4c4>)
 800232e:	6a1b      	ldr	r3, [r3, #32]
 8002330:	f003 0302 	and.w	r3, r3, #2
 8002334:	2b00      	cmp	r3, #0
 8002336:	d0ee      	beq.n	8002316 <HAL_RCC_OscConfig+0x37e>
 8002338:	e014      	b.n	8002364 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800233a:	f7ff fb51 	bl	80019e0 <HAL_GetTick>
 800233e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002340:	e00a      	b.n	8002358 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002342:	f7ff fb4d 	bl	80019e0 <HAL_GetTick>
 8002346:	4602      	mov	r2, r0
 8002348:	693b      	ldr	r3, [r7, #16]
 800234a:	1ad3      	subs	r3, r2, r3
 800234c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002350:	4293      	cmp	r3, r2
 8002352:	d901      	bls.n	8002358 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002354:	2303      	movs	r3, #3
 8002356:	e09b      	b.n	8002490 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002358:	4b40      	ldr	r3, [pc, #256]	; (800245c <HAL_RCC_OscConfig+0x4c4>)
 800235a:	6a1b      	ldr	r3, [r3, #32]
 800235c:	f003 0302 	and.w	r3, r3, #2
 8002360:	2b00      	cmp	r3, #0
 8002362:	d1ee      	bne.n	8002342 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002364:	7dfb      	ldrb	r3, [r7, #23]
 8002366:	2b01      	cmp	r3, #1
 8002368:	d105      	bne.n	8002376 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800236a:	4b3c      	ldr	r3, [pc, #240]	; (800245c <HAL_RCC_OscConfig+0x4c4>)
 800236c:	69db      	ldr	r3, [r3, #28]
 800236e:	4a3b      	ldr	r2, [pc, #236]	; (800245c <HAL_RCC_OscConfig+0x4c4>)
 8002370:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002374:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	69db      	ldr	r3, [r3, #28]
 800237a:	2b00      	cmp	r3, #0
 800237c:	f000 8087 	beq.w	800248e <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002380:	4b36      	ldr	r3, [pc, #216]	; (800245c <HAL_RCC_OscConfig+0x4c4>)
 8002382:	685b      	ldr	r3, [r3, #4]
 8002384:	f003 030c 	and.w	r3, r3, #12
 8002388:	2b08      	cmp	r3, #8
 800238a:	d061      	beq.n	8002450 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	69db      	ldr	r3, [r3, #28]
 8002390:	2b02      	cmp	r3, #2
 8002392:	d146      	bne.n	8002422 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002394:	4b33      	ldr	r3, [pc, #204]	; (8002464 <HAL_RCC_OscConfig+0x4cc>)
 8002396:	2200      	movs	r2, #0
 8002398:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800239a:	f7ff fb21 	bl	80019e0 <HAL_GetTick>
 800239e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80023a0:	e008      	b.n	80023b4 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80023a2:	f7ff fb1d 	bl	80019e0 <HAL_GetTick>
 80023a6:	4602      	mov	r2, r0
 80023a8:	693b      	ldr	r3, [r7, #16]
 80023aa:	1ad3      	subs	r3, r2, r3
 80023ac:	2b02      	cmp	r3, #2
 80023ae:	d901      	bls.n	80023b4 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80023b0:	2303      	movs	r3, #3
 80023b2:	e06d      	b.n	8002490 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80023b4:	4b29      	ldr	r3, [pc, #164]	; (800245c <HAL_RCC_OscConfig+0x4c4>)
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d1f0      	bne.n	80023a2 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	6a1b      	ldr	r3, [r3, #32]
 80023c4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80023c8:	d108      	bne.n	80023dc <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80023ca:	4b24      	ldr	r3, [pc, #144]	; (800245c <HAL_RCC_OscConfig+0x4c4>)
 80023cc:	685b      	ldr	r3, [r3, #4]
 80023ce:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	689b      	ldr	r3, [r3, #8]
 80023d6:	4921      	ldr	r1, [pc, #132]	; (800245c <HAL_RCC_OscConfig+0x4c4>)
 80023d8:	4313      	orrs	r3, r2
 80023da:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80023dc:	4b1f      	ldr	r3, [pc, #124]	; (800245c <HAL_RCC_OscConfig+0x4c4>)
 80023de:	685b      	ldr	r3, [r3, #4]
 80023e0:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	6a19      	ldr	r1, [r3, #32]
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023ec:	430b      	orrs	r3, r1
 80023ee:	491b      	ldr	r1, [pc, #108]	; (800245c <HAL_RCC_OscConfig+0x4c4>)
 80023f0:	4313      	orrs	r3, r2
 80023f2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80023f4:	4b1b      	ldr	r3, [pc, #108]	; (8002464 <HAL_RCC_OscConfig+0x4cc>)
 80023f6:	2201      	movs	r2, #1
 80023f8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023fa:	f7ff faf1 	bl	80019e0 <HAL_GetTick>
 80023fe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002400:	e008      	b.n	8002414 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002402:	f7ff faed 	bl	80019e0 <HAL_GetTick>
 8002406:	4602      	mov	r2, r0
 8002408:	693b      	ldr	r3, [r7, #16]
 800240a:	1ad3      	subs	r3, r2, r3
 800240c:	2b02      	cmp	r3, #2
 800240e:	d901      	bls.n	8002414 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002410:	2303      	movs	r3, #3
 8002412:	e03d      	b.n	8002490 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002414:	4b11      	ldr	r3, [pc, #68]	; (800245c <HAL_RCC_OscConfig+0x4c4>)
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800241c:	2b00      	cmp	r3, #0
 800241e:	d0f0      	beq.n	8002402 <HAL_RCC_OscConfig+0x46a>
 8002420:	e035      	b.n	800248e <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002422:	4b10      	ldr	r3, [pc, #64]	; (8002464 <HAL_RCC_OscConfig+0x4cc>)
 8002424:	2200      	movs	r2, #0
 8002426:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002428:	f7ff fada 	bl	80019e0 <HAL_GetTick>
 800242c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800242e:	e008      	b.n	8002442 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002430:	f7ff fad6 	bl	80019e0 <HAL_GetTick>
 8002434:	4602      	mov	r2, r0
 8002436:	693b      	ldr	r3, [r7, #16]
 8002438:	1ad3      	subs	r3, r2, r3
 800243a:	2b02      	cmp	r3, #2
 800243c:	d901      	bls.n	8002442 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800243e:	2303      	movs	r3, #3
 8002440:	e026      	b.n	8002490 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002442:	4b06      	ldr	r3, [pc, #24]	; (800245c <HAL_RCC_OscConfig+0x4c4>)
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800244a:	2b00      	cmp	r3, #0
 800244c:	d1f0      	bne.n	8002430 <HAL_RCC_OscConfig+0x498>
 800244e:	e01e      	b.n	800248e <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	69db      	ldr	r3, [r3, #28]
 8002454:	2b01      	cmp	r3, #1
 8002456:	d107      	bne.n	8002468 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002458:	2301      	movs	r3, #1
 800245a:	e019      	b.n	8002490 <HAL_RCC_OscConfig+0x4f8>
 800245c:	40021000 	.word	0x40021000
 8002460:	40007000 	.word	0x40007000
 8002464:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002468:	4b0b      	ldr	r3, [pc, #44]	; (8002498 <HAL_RCC_OscConfig+0x500>)
 800246a:	685b      	ldr	r3, [r3, #4]
 800246c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	6a1b      	ldr	r3, [r3, #32]
 8002478:	429a      	cmp	r2, r3
 800247a:	d106      	bne.n	800248a <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002486:	429a      	cmp	r2, r3
 8002488:	d001      	beq.n	800248e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800248a:	2301      	movs	r3, #1
 800248c:	e000      	b.n	8002490 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800248e:	2300      	movs	r3, #0
}
 8002490:	4618      	mov	r0, r3
 8002492:	3718      	adds	r7, #24
 8002494:	46bd      	mov	sp, r7
 8002496:	bd80      	pop	{r7, pc}
 8002498:	40021000 	.word	0x40021000

0800249c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800249c:	b580      	push	{r7, lr}
 800249e:	b084      	sub	sp, #16
 80024a0:	af00      	add	r7, sp, #0
 80024a2:	6078      	str	r0, [r7, #4]
 80024a4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d101      	bne.n	80024b0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80024ac:	2301      	movs	r3, #1
 80024ae:	e0d0      	b.n	8002652 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80024b0:	4b6a      	ldr	r3, [pc, #424]	; (800265c <HAL_RCC_ClockConfig+0x1c0>)
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	f003 0307 	and.w	r3, r3, #7
 80024b8:	683a      	ldr	r2, [r7, #0]
 80024ba:	429a      	cmp	r2, r3
 80024bc:	d910      	bls.n	80024e0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80024be:	4b67      	ldr	r3, [pc, #412]	; (800265c <HAL_RCC_ClockConfig+0x1c0>)
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	f023 0207 	bic.w	r2, r3, #7
 80024c6:	4965      	ldr	r1, [pc, #404]	; (800265c <HAL_RCC_ClockConfig+0x1c0>)
 80024c8:	683b      	ldr	r3, [r7, #0]
 80024ca:	4313      	orrs	r3, r2
 80024cc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80024ce:	4b63      	ldr	r3, [pc, #396]	; (800265c <HAL_RCC_ClockConfig+0x1c0>)
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	f003 0307 	and.w	r3, r3, #7
 80024d6:	683a      	ldr	r2, [r7, #0]
 80024d8:	429a      	cmp	r2, r3
 80024da:	d001      	beq.n	80024e0 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80024dc:	2301      	movs	r3, #1
 80024de:	e0b8      	b.n	8002652 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	f003 0302 	and.w	r3, r3, #2
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d020      	beq.n	800252e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	f003 0304 	and.w	r3, r3, #4
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d005      	beq.n	8002504 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80024f8:	4b59      	ldr	r3, [pc, #356]	; (8002660 <HAL_RCC_ClockConfig+0x1c4>)
 80024fa:	685b      	ldr	r3, [r3, #4]
 80024fc:	4a58      	ldr	r2, [pc, #352]	; (8002660 <HAL_RCC_ClockConfig+0x1c4>)
 80024fe:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002502:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	f003 0308 	and.w	r3, r3, #8
 800250c:	2b00      	cmp	r3, #0
 800250e:	d005      	beq.n	800251c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002510:	4b53      	ldr	r3, [pc, #332]	; (8002660 <HAL_RCC_ClockConfig+0x1c4>)
 8002512:	685b      	ldr	r3, [r3, #4]
 8002514:	4a52      	ldr	r2, [pc, #328]	; (8002660 <HAL_RCC_ClockConfig+0x1c4>)
 8002516:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800251a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800251c:	4b50      	ldr	r3, [pc, #320]	; (8002660 <HAL_RCC_ClockConfig+0x1c4>)
 800251e:	685b      	ldr	r3, [r3, #4]
 8002520:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	689b      	ldr	r3, [r3, #8]
 8002528:	494d      	ldr	r1, [pc, #308]	; (8002660 <HAL_RCC_ClockConfig+0x1c4>)
 800252a:	4313      	orrs	r3, r2
 800252c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	f003 0301 	and.w	r3, r3, #1
 8002536:	2b00      	cmp	r3, #0
 8002538:	d040      	beq.n	80025bc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	685b      	ldr	r3, [r3, #4]
 800253e:	2b01      	cmp	r3, #1
 8002540:	d107      	bne.n	8002552 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002542:	4b47      	ldr	r3, [pc, #284]	; (8002660 <HAL_RCC_ClockConfig+0x1c4>)
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800254a:	2b00      	cmp	r3, #0
 800254c:	d115      	bne.n	800257a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800254e:	2301      	movs	r3, #1
 8002550:	e07f      	b.n	8002652 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	685b      	ldr	r3, [r3, #4]
 8002556:	2b02      	cmp	r3, #2
 8002558:	d107      	bne.n	800256a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800255a:	4b41      	ldr	r3, [pc, #260]	; (8002660 <HAL_RCC_ClockConfig+0x1c4>)
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002562:	2b00      	cmp	r3, #0
 8002564:	d109      	bne.n	800257a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002566:	2301      	movs	r3, #1
 8002568:	e073      	b.n	8002652 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800256a:	4b3d      	ldr	r3, [pc, #244]	; (8002660 <HAL_RCC_ClockConfig+0x1c4>)
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	f003 0302 	and.w	r3, r3, #2
 8002572:	2b00      	cmp	r3, #0
 8002574:	d101      	bne.n	800257a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002576:	2301      	movs	r3, #1
 8002578:	e06b      	b.n	8002652 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800257a:	4b39      	ldr	r3, [pc, #228]	; (8002660 <HAL_RCC_ClockConfig+0x1c4>)
 800257c:	685b      	ldr	r3, [r3, #4]
 800257e:	f023 0203 	bic.w	r2, r3, #3
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	685b      	ldr	r3, [r3, #4]
 8002586:	4936      	ldr	r1, [pc, #216]	; (8002660 <HAL_RCC_ClockConfig+0x1c4>)
 8002588:	4313      	orrs	r3, r2
 800258a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800258c:	f7ff fa28 	bl	80019e0 <HAL_GetTick>
 8002590:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002592:	e00a      	b.n	80025aa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002594:	f7ff fa24 	bl	80019e0 <HAL_GetTick>
 8002598:	4602      	mov	r2, r0
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	1ad3      	subs	r3, r2, r3
 800259e:	f241 3288 	movw	r2, #5000	; 0x1388
 80025a2:	4293      	cmp	r3, r2
 80025a4:	d901      	bls.n	80025aa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80025a6:	2303      	movs	r3, #3
 80025a8:	e053      	b.n	8002652 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80025aa:	4b2d      	ldr	r3, [pc, #180]	; (8002660 <HAL_RCC_ClockConfig+0x1c4>)
 80025ac:	685b      	ldr	r3, [r3, #4]
 80025ae:	f003 020c 	and.w	r2, r3, #12
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	685b      	ldr	r3, [r3, #4]
 80025b6:	009b      	lsls	r3, r3, #2
 80025b8:	429a      	cmp	r2, r3
 80025ba:	d1eb      	bne.n	8002594 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80025bc:	4b27      	ldr	r3, [pc, #156]	; (800265c <HAL_RCC_ClockConfig+0x1c0>)
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	f003 0307 	and.w	r3, r3, #7
 80025c4:	683a      	ldr	r2, [r7, #0]
 80025c6:	429a      	cmp	r2, r3
 80025c8:	d210      	bcs.n	80025ec <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80025ca:	4b24      	ldr	r3, [pc, #144]	; (800265c <HAL_RCC_ClockConfig+0x1c0>)
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	f023 0207 	bic.w	r2, r3, #7
 80025d2:	4922      	ldr	r1, [pc, #136]	; (800265c <HAL_RCC_ClockConfig+0x1c0>)
 80025d4:	683b      	ldr	r3, [r7, #0]
 80025d6:	4313      	orrs	r3, r2
 80025d8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80025da:	4b20      	ldr	r3, [pc, #128]	; (800265c <HAL_RCC_ClockConfig+0x1c0>)
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	f003 0307 	and.w	r3, r3, #7
 80025e2:	683a      	ldr	r2, [r7, #0]
 80025e4:	429a      	cmp	r2, r3
 80025e6:	d001      	beq.n	80025ec <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80025e8:	2301      	movs	r3, #1
 80025ea:	e032      	b.n	8002652 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	f003 0304 	and.w	r3, r3, #4
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d008      	beq.n	800260a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80025f8:	4b19      	ldr	r3, [pc, #100]	; (8002660 <HAL_RCC_ClockConfig+0x1c4>)
 80025fa:	685b      	ldr	r3, [r3, #4]
 80025fc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	68db      	ldr	r3, [r3, #12]
 8002604:	4916      	ldr	r1, [pc, #88]	; (8002660 <HAL_RCC_ClockConfig+0x1c4>)
 8002606:	4313      	orrs	r3, r2
 8002608:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	f003 0308 	and.w	r3, r3, #8
 8002612:	2b00      	cmp	r3, #0
 8002614:	d009      	beq.n	800262a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002616:	4b12      	ldr	r3, [pc, #72]	; (8002660 <HAL_RCC_ClockConfig+0x1c4>)
 8002618:	685b      	ldr	r3, [r3, #4]
 800261a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	691b      	ldr	r3, [r3, #16]
 8002622:	00db      	lsls	r3, r3, #3
 8002624:	490e      	ldr	r1, [pc, #56]	; (8002660 <HAL_RCC_ClockConfig+0x1c4>)
 8002626:	4313      	orrs	r3, r2
 8002628:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800262a:	f000 f821 	bl	8002670 <HAL_RCC_GetSysClockFreq>
 800262e:	4602      	mov	r2, r0
 8002630:	4b0b      	ldr	r3, [pc, #44]	; (8002660 <HAL_RCC_ClockConfig+0x1c4>)
 8002632:	685b      	ldr	r3, [r3, #4]
 8002634:	091b      	lsrs	r3, r3, #4
 8002636:	f003 030f 	and.w	r3, r3, #15
 800263a:	490a      	ldr	r1, [pc, #40]	; (8002664 <HAL_RCC_ClockConfig+0x1c8>)
 800263c:	5ccb      	ldrb	r3, [r1, r3]
 800263e:	fa22 f303 	lsr.w	r3, r2, r3
 8002642:	4a09      	ldr	r2, [pc, #36]	; (8002668 <HAL_RCC_ClockConfig+0x1cc>)
 8002644:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002646:	4b09      	ldr	r3, [pc, #36]	; (800266c <HAL_RCC_ClockConfig+0x1d0>)
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	4618      	mov	r0, r3
 800264c:	f7ff f986 	bl	800195c <HAL_InitTick>

  return HAL_OK;
 8002650:	2300      	movs	r3, #0
}
 8002652:	4618      	mov	r0, r3
 8002654:	3710      	adds	r7, #16
 8002656:	46bd      	mov	sp, r7
 8002658:	bd80      	pop	{r7, pc}
 800265a:	bf00      	nop
 800265c:	40022000 	.word	0x40022000
 8002660:	40021000 	.word	0x40021000
 8002664:	08002fb0 	.word	0x08002fb0
 8002668:	20000084 	.word	0x20000084
 800266c:	20000088 	.word	0x20000088

08002670 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002670:	b490      	push	{r4, r7}
 8002672:	b08a      	sub	sp, #40	; 0x28
 8002674:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002676:	4b29      	ldr	r3, [pc, #164]	; (800271c <HAL_RCC_GetSysClockFreq+0xac>)
 8002678:	1d3c      	adds	r4, r7, #4
 800267a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800267c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002680:	f240 2301 	movw	r3, #513	; 0x201
 8002684:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002686:	2300      	movs	r3, #0
 8002688:	61fb      	str	r3, [r7, #28]
 800268a:	2300      	movs	r3, #0
 800268c:	61bb      	str	r3, [r7, #24]
 800268e:	2300      	movs	r3, #0
 8002690:	627b      	str	r3, [r7, #36]	; 0x24
 8002692:	2300      	movs	r3, #0
 8002694:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002696:	2300      	movs	r3, #0
 8002698:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800269a:	4b21      	ldr	r3, [pc, #132]	; (8002720 <HAL_RCC_GetSysClockFreq+0xb0>)
 800269c:	685b      	ldr	r3, [r3, #4]
 800269e:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80026a0:	69fb      	ldr	r3, [r7, #28]
 80026a2:	f003 030c 	and.w	r3, r3, #12
 80026a6:	2b04      	cmp	r3, #4
 80026a8:	d002      	beq.n	80026b0 <HAL_RCC_GetSysClockFreq+0x40>
 80026aa:	2b08      	cmp	r3, #8
 80026ac:	d003      	beq.n	80026b6 <HAL_RCC_GetSysClockFreq+0x46>
 80026ae:	e02b      	b.n	8002708 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80026b0:	4b1c      	ldr	r3, [pc, #112]	; (8002724 <HAL_RCC_GetSysClockFreq+0xb4>)
 80026b2:	623b      	str	r3, [r7, #32]
      break;
 80026b4:	e02b      	b.n	800270e <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80026b6:	69fb      	ldr	r3, [r7, #28]
 80026b8:	0c9b      	lsrs	r3, r3, #18
 80026ba:	f003 030f 	and.w	r3, r3, #15
 80026be:	3328      	adds	r3, #40	; 0x28
 80026c0:	443b      	add	r3, r7
 80026c2:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80026c6:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80026c8:	69fb      	ldr	r3, [r7, #28]
 80026ca:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d012      	beq.n	80026f8 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80026d2:	4b13      	ldr	r3, [pc, #76]	; (8002720 <HAL_RCC_GetSysClockFreq+0xb0>)
 80026d4:	685b      	ldr	r3, [r3, #4]
 80026d6:	0c5b      	lsrs	r3, r3, #17
 80026d8:	f003 0301 	and.w	r3, r3, #1
 80026dc:	3328      	adds	r3, #40	; 0x28
 80026de:	443b      	add	r3, r7
 80026e0:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80026e4:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80026e6:	697b      	ldr	r3, [r7, #20]
 80026e8:	4a0e      	ldr	r2, [pc, #56]	; (8002724 <HAL_RCC_GetSysClockFreq+0xb4>)
 80026ea:	fb03 f202 	mul.w	r2, r3, r2
 80026ee:	69bb      	ldr	r3, [r7, #24]
 80026f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80026f4:	627b      	str	r3, [r7, #36]	; 0x24
 80026f6:	e004      	b.n	8002702 <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80026f8:	697b      	ldr	r3, [r7, #20]
 80026fa:	4a0b      	ldr	r2, [pc, #44]	; (8002728 <HAL_RCC_GetSysClockFreq+0xb8>)
 80026fc:	fb02 f303 	mul.w	r3, r2, r3
 8002700:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8002702:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002704:	623b      	str	r3, [r7, #32]
      break;
 8002706:	e002      	b.n	800270e <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002708:	4b06      	ldr	r3, [pc, #24]	; (8002724 <HAL_RCC_GetSysClockFreq+0xb4>)
 800270a:	623b      	str	r3, [r7, #32]
      break;
 800270c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800270e:	6a3b      	ldr	r3, [r7, #32]
}
 8002710:	4618      	mov	r0, r3
 8002712:	3728      	adds	r7, #40	; 0x28
 8002714:	46bd      	mov	sp, r7
 8002716:	bc90      	pop	{r4, r7}
 8002718:	4770      	bx	lr
 800271a:	bf00      	nop
 800271c:	08002fa0 	.word	0x08002fa0
 8002720:	40021000 	.word	0x40021000
 8002724:	007a1200 	.word	0x007a1200
 8002728:	003d0900 	.word	0x003d0900

0800272c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800272c:	b480      	push	{r7}
 800272e:	b085      	sub	sp, #20
 8002730:	af00      	add	r7, sp, #0
 8002732:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002734:	4b0a      	ldr	r3, [pc, #40]	; (8002760 <RCC_Delay+0x34>)
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	4a0a      	ldr	r2, [pc, #40]	; (8002764 <RCC_Delay+0x38>)
 800273a:	fba2 2303 	umull	r2, r3, r2, r3
 800273e:	0a5b      	lsrs	r3, r3, #9
 8002740:	687a      	ldr	r2, [r7, #4]
 8002742:	fb02 f303 	mul.w	r3, r2, r3
 8002746:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002748:	bf00      	nop
  }
  while (Delay --);
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	1e5a      	subs	r2, r3, #1
 800274e:	60fa      	str	r2, [r7, #12]
 8002750:	2b00      	cmp	r3, #0
 8002752:	d1f9      	bne.n	8002748 <RCC_Delay+0x1c>
}
 8002754:	bf00      	nop
 8002756:	bf00      	nop
 8002758:	3714      	adds	r7, #20
 800275a:	46bd      	mov	sp, r7
 800275c:	bc80      	pop	{r7}
 800275e:	4770      	bx	lr
 8002760:	20000084 	.word	0x20000084
 8002764:	10624dd3 	.word	0x10624dd3

08002768 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002768:	b580      	push	{r7, lr}
 800276a:	b082      	sub	sp, #8
 800276c:	af00      	add	r7, sp, #0
 800276e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	2b00      	cmp	r3, #0
 8002774:	d101      	bne.n	800277a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002776:	2301      	movs	r3, #1
 8002778:	e041      	b.n	80027fe <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002780:	b2db      	uxtb	r3, r3
 8002782:	2b00      	cmp	r3, #0
 8002784:	d106      	bne.n	8002794 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	2200      	movs	r2, #0
 800278a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800278e:	6878      	ldr	r0, [r7, #4]
 8002790:	f7ff f84c 	bl	800182c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	2202      	movs	r2, #2
 8002798:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681a      	ldr	r2, [r3, #0]
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	3304      	adds	r3, #4
 80027a4:	4619      	mov	r1, r3
 80027a6:	4610      	mov	r0, r2
 80027a8:	f000 fa6a 	bl	8002c80 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	2201      	movs	r2, #1
 80027b0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	2201      	movs	r2, #1
 80027b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	2201      	movs	r2, #1
 80027c0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	2201      	movs	r2, #1
 80027c8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	2201      	movs	r2, #1
 80027d0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	2201      	movs	r2, #1
 80027d8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	2201      	movs	r2, #1
 80027e0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	2201      	movs	r2, #1
 80027e8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	2201      	movs	r2, #1
 80027f0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	2201      	movs	r2, #1
 80027f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80027fc:	2300      	movs	r3, #0
}
 80027fe:	4618      	mov	r0, r3
 8002800:	3708      	adds	r7, #8
 8002802:	46bd      	mov	sp, r7
 8002804:	bd80      	pop	{r7, pc}
	...

08002808 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002808:	b480      	push	{r7}
 800280a:	b085      	sub	sp, #20
 800280c:	af00      	add	r7, sp, #0
 800280e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002816:	b2db      	uxtb	r3, r3
 8002818:	2b01      	cmp	r3, #1
 800281a:	d001      	beq.n	8002820 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800281c:	2301      	movs	r3, #1
 800281e:	e035      	b.n	800288c <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	2202      	movs	r2, #2
 8002824:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	68da      	ldr	r2, [r3, #12]
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	f042 0201 	orr.w	r2, r2, #1
 8002836:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	4a16      	ldr	r2, [pc, #88]	; (8002898 <HAL_TIM_Base_Start_IT+0x90>)
 800283e:	4293      	cmp	r3, r2
 8002840:	d009      	beq.n	8002856 <HAL_TIM_Base_Start_IT+0x4e>
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800284a:	d004      	beq.n	8002856 <HAL_TIM_Base_Start_IT+0x4e>
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	4a12      	ldr	r2, [pc, #72]	; (800289c <HAL_TIM_Base_Start_IT+0x94>)
 8002852:	4293      	cmp	r3, r2
 8002854:	d111      	bne.n	800287a <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	689b      	ldr	r3, [r3, #8]
 800285c:	f003 0307 	and.w	r3, r3, #7
 8002860:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	2b06      	cmp	r3, #6
 8002866:	d010      	beq.n	800288a <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	681a      	ldr	r2, [r3, #0]
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	f042 0201 	orr.w	r2, r2, #1
 8002876:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002878:	e007      	b.n	800288a <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	681a      	ldr	r2, [r3, #0]
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	f042 0201 	orr.w	r2, r2, #1
 8002888:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800288a:	2300      	movs	r3, #0
}
 800288c:	4618      	mov	r0, r3
 800288e:	3714      	adds	r7, #20
 8002890:	46bd      	mov	sp, r7
 8002892:	bc80      	pop	{r7}
 8002894:	4770      	bx	lr
 8002896:	bf00      	nop
 8002898:	40012c00 	.word	0x40012c00
 800289c:	40000400 	.word	0x40000400

080028a0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80028a0:	b580      	push	{r7, lr}
 80028a2:	b082      	sub	sp, #8
 80028a4:	af00      	add	r7, sp, #0
 80028a6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	691b      	ldr	r3, [r3, #16]
 80028ae:	f003 0302 	and.w	r3, r3, #2
 80028b2:	2b02      	cmp	r3, #2
 80028b4:	d122      	bne.n	80028fc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	68db      	ldr	r3, [r3, #12]
 80028bc:	f003 0302 	and.w	r3, r3, #2
 80028c0:	2b02      	cmp	r3, #2
 80028c2:	d11b      	bne.n	80028fc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	f06f 0202 	mvn.w	r2, #2
 80028cc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	2201      	movs	r2, #1
 80028d2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	699b      	ldr	r3, [r3, #24]
 80028da:	f003 0303 	and.w	r3, r3, #3
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d003      	beq.n	80028ea <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80028e2:	6878      	ldr	r0, [r7, #4]
 80028e4:	f000 f9b1 	bl	8002c4a <HAL_TIM_IC_CaptureCallback>
 80028e8:	e005      	b.n	80028f6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80028ea:	6878      	ldr	r0, [r7, #4]
 80028ec:	f000 f9a4 	bl	8002c38 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80028f0:	6878      	ldr	r0, [r7, #4]
 80028f2:	f000 f9b3 	bl	8002c5c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	2200      	movs	r2, #0
 80028fa:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	691b      	ldr	r3, [r3, #16]
 8002902:	f003 0304 	and.w	r3, r3, #4
 8002906:	2b04      	cmp	r3, #4
 8002908:	d122      	bne.n	8002950 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	68db      	ldr	r3, [r3, #12]
 8002910:	f003 0304 	and.w	r3, r3, #4
 8002914:	2b04      	cmp	r3, #4
 8002916:	d11b      	bne.n	8002950 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	f06f 0204 	mvn.w	r2, #4
 8002920:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	2202      	movs	r2, #2
 8002926:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	699b      	ldr	r3, [r3, #24]
 800292e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002932:	2b00      	cmp	r3, #0
 8002934:	d003      	beq.n	800293e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002936:	6878      	ldr	r0, [r7, #4]
 8002938:	f000 f987 	bl	8002c4a <HAL_TIM_IC_CaptureCallback>
 800293c:	e005      	b.n	800294a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800293e:	6878      	ldr	r0, [r7, #4]
 8002940:	f000 f97a 	bl	8002c38 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002944:	6878      	ldr	r0, [r7, #4]
 8002946:	f000 f989 	bl	8002c5c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	2200      	movs	r2, #0
 800294e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	691b      	ldr	r3, [r3, #16]
 8002956:	f003 0308 	and.w	r3, r3, #8
 800295a:	2b08      	cmp	r3, #8
 800295c:	d122      	bne.n	80029a4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	68db      	ldr	r3, [r3, #12]
 8002964:	f003 0308 	and.w	r3, r3, #8
 8002968:	2b08      	cmp	r3, #8
 800296a:	d11b      	bne.n	80029a4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	f06f 0208 	mvn.w	r2, #8
 8002974:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	2204      	movs	r2, #4
 800297a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	69db      	ldr	r3, [r3, #28]
 8002982:	f003 0303 	and.w	r3, r3, #3
 8002986:	2b00      	cmp	r3, #0
 8002988:	d003      	beq.n	8002992 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800298a:	6878      	ldr	r0, [r7, #4]
 800298c:	f000 f95d 	bl	8002c4a <HAL_TIM_IC_CaptureCallback>
 8002990:	e005      	b.n	800299e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002992:	6878      	ldr	r0, [r7, #4]
 8002994:	f000 f950 	bl	8002c38 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002998:	6878      	ldr	r0, [r7, #4]
 800299a:	f000 f95f 	bl	8002c5c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	2200      	movs	r2, #0
 80029a2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	691b      	ldr	r3, [r3, #16]
 80029aa:	f003 0310 	and.w	r3, r3, #16
 80029ae:	2b10      	cmp	r3, #16
 80029b0:	d122      	bne.n	80029f8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	68db      	ldr	r3, [r3, #12]
 80029b8:	f003 0310 	and.w	r3, r3, #16
 80029bc:	2b10      	cmp	r3, #16
 80029be:	d11b      	bne.n	80029f8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	f06f 0210 	mvn.w	r2, #16
 80029c8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	2208      	movs	r2, #8
 80029ce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	69db      	ldr	r3, [r3, #28]
 80029d6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d003      	beq.n	80029e6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80029de:	6878      	ldr	r0, [r7, #4]
 80029e0:	f000 f933 	bl	8002c4a <HAL_TIM_IC_CaptureCallback>
 80029e4:	e005      	b.n	80029f2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80029e6:	6878      	ldr	r0, [r7, #4]
 80029e8:	f000 f926 	bl	8002c38 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80029ec:	6878      	ldr	r0, [r7, #4]
 80029ee:	f000 f935 	bl	8002c5c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	2200      	movs	r2, #0
 80029f6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	691b      	ldr	r3, [r3, #16]
 80029fe:	f003 0301 	and.w	r3, r3, #1
 8002a02:	2b01      	cmp	r3, #1
 8002a04:	d10e      	bne.n	8002a24 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	68db      	ldr	r3, [r3, #12]
 8002a0c:	f003 0301 	and.w	r3, r3, #1
 8002a10:	2b01      	cmp	r3, #1
 8002a12:	d107      	bne.n	8002a24 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	f06f 0201 	mvn.w	r2, #1
 8002a1c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002a1e:	6878      	ldr	r0, [r7, #4]
 8002a20:	f7fe fecc 	bl	80017bc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	691b      	ldr	r3, [r3, #16]
 8002a2a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a2e:	2b80      	cmp	r3, #128	; 0x80
 8002a30:	d10e      	bne.n	8002a50 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	68db      	ldr	r3, [r3, #12]
 8002a38:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a3c:	2b80      	cmp	r3, #128	; 0x80
 8002a3e:	d107      	bne.n	8002a50 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002a48:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002a4a:	6878      	ldr	r0, [r7, #4]
 8002a4c:	f000 fa67 	bl	8002f1e <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	691b      	ldr	r3, [r3, #16]
 8002a56:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a5a:	2b40      	cmp	r3, #64	; 0x40
 8002a5c:	d10e      	bne.n	8002a7c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	68db      	ldr	r3, [r3, #12]
 8002a64:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a68:	2b40      	cmp	r3, #64	; 0x40
 8002a6a:	d107      	bne.n	8002a7c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002a74:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002a76:	6878      	ldr	r0, [r7, #4]
 8002a78:	f000 f8f9 	bl	8002c6e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	691b      	ldr	r3, [r3, #16]
 8002a82:	f003 0320 	and.w	r3, r3, #32
 8002a86:	2b20      	cmp	r3, #32
 8002a88:	d10e      	bne.n	8002aa8 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	68db      	ldr	r3, [r3, #12]
 8002a90:	f003 0320 	and.w	r3, r3, #32
 8002a94:	2b20      	cmp	r3, #32
 8002a96:	d107      	bne.n	8002aa8 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	f06f 0220 	mvn.w	r2, #32
 8002aa0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002aa2:	6878      	ldr	r0, [r7, #4]
 8002aa4:	f000 fa32 	bl	8002f0c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002aa8:	bf00      	nop
 8002aaa:	3708      	adds	r7, #8
 8002aac:	46bd      	mov	sp, r7
 8002aae:	bd80      	pop	{r7, pc}

08002ab0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002ab0:	b580      	push	{r7, lr}
 8002ab2:	b084      	sub	sp, #16
 8002ab4:	af00      	add	r7, sp, #0
 8002ab6:	6078      	str	r0, [r7, #4]
 8002ab8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002ac0:	2b01      	cmp	r3, #1
 8002ac2:	d101      	bne.n	8002ac8 <HAL_TIM_ConfigClockSource+0x18>
 8002ac4:	2302      	movs	r3, #2
 8002ac6:	e0b3      	b.n	8002c30 <HAL_TIM_ConfigClockSource+0x180>
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	2201      	movs	r2, #1
 8002acc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	2202      	movs	r2, #2
 8002ad4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	689b      	ldr	r3, [r3, #8]
 8002ade:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002ae6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002aee:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	68fa      	ldr	r2, [r7, #12]
 8002af6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002af8:	683b      	ldr	r3, [r7, #0]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002b00:	d03e      	beq.n	8002b80 <HAL_TIM_ConfigClockSource+0xd0>
 8002b02:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002b06:	f200 8087 	bhi.w	8002c18 <HAL_TIM_ConfigClockSource+0x168>
 8002b0a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002b0e:	f000 8085 	beq.w	8002c1c <HAL_TIM_ConfigClockSource+0x16c>
 8002b12:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002b16:	d87f      	bhi.n	8002c18 <HAL_TIM_ConfigClockSource+0x168>
 8002b18:	2b70      	cmp	r3, #112	; 0x70
 8002b1a:	d01a      	beq.n	8002b52 <HAL_TIM_ConfigClockSource+0xa2>
 8002b1c:	2b70      	cmp	r3, #112	; 0x70
 8002b1e:	d87b      	bhi.n	8002c18 <HAL_TIM_ConfigClockSource+0x168>
 8002b20:	2b60      	cmp	r3, #96	; 0x60
 8002b22:	d050      	beq.n	8002bc6 <HAL_TIM_ConfigClockSource+0x116>
 8002b24:	2b60      	cmp	r3, #96	; 0x60
 8002b26:	d877      	bhi.n	8002c18 <HAL_TIM_ConfigClockSource+0x168>
 8002b28:	2b50      	cmp	r3, #80	; 0x50
 8002b2a:	d03c      	beq.n	8002ba6 <HAL_TIM_ConfigClockSource+0xf6>
 8002b2c:	2b50      	cmp	r3, #80	; 0x50
 8002b2e:	d873      	bhi.n	8002c18 <HAL_TIM_ConfigClockSource+0x168>
 8002b30:	2b40      	cmp	r3, #64	; 0x40
 8002b32:	d058      	beq.n	8002be6 <HAL_TIM_ConfigClockSource+0x136>
 8002b34:	2b40      	cmp	r3, #64	; 0x40
 8002b36:	d86f      	bhi.n	8002c18 <HAL_TIM_ConfigClockSource+0x168>
 8002b38:	2b30      	cmp	r3, #48	; 0x30
 8002b3a:	d064      	beq.n	8002c06 <HAL_TIM_ConfigClockSource+0x156>
 8002b3c:	2b30      	cmp	r3, #48	; 0x30
 8002b3e:	d86b      	bhi.n	8002c18 <HAL_TIM_ConfigClockSource+0x168>
 8002b40:	2b20      	cmp	r3, #32
 8002b42:	d060      	beq.n	8002c06 <HAL_TIM_ConfigClockSource+0x156>
 8002b44:	2b20      	cmp	r3, #32
 8002b46:	d867      	bhi.n	8002c18 <HAL_TIM_ConfigClockSource+0x168>
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d05c      	beq.n	8002c06 <HAL_TIM_ConfigClockSource+0x156>
 8002b4c:	2b10      	cmp	r3, #16
 8002b4e:	d05a      	beq.n	8002c06 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8002b50:	e062      	b.n	8002c18 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	6818      	ldr	r0, [r3, #0]
 8002b56:	683b      	ldr	r3, [r7, #0]
 8002b58:	6899      	ldr	r1, [r3, #8]
 8002b5a:	683b      	ldr	r3, [r7, #0]
 8002b5c:	685a      	ldr	r2, [r3, #4]
 8002b5e:	683b      	ldr	r3, [r7, #0]
 8002b60:	68db      	ldr	r3, [r3, #12]
 8002b62:	f000 f95c 	bl	8002e1e <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	689b      	ldr	r3, [r3, #8]
 8002b6c:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002b74:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	68fa      	ldr	r2, [r7, #12]
 8002b7c:	609a      	str	r2, [r3, #8]
      break;
 8002b7e:	e04e      	b.n	8002c1e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	6818      	ldr	r0, [r3, #0]
 8002b84:	683b      	ldr	r3, [r7, #0]
 8002b86:	6899      	ldr	r1, [r3, #8]
 8002b88:	683b      	ldr	r3, [r7, #0]
 8002b8a:	685a      	ldr	r2, [r3, #4]
 8002b8c:	683b      	ldr	r3, [r7, #0]
 8002b8e:	68db      	ldr	r3, [r3, #12]
 8002b90:	f000 f945 	bl	8002e1e <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	689a      	ldr	r2, [r3, #8]
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002ba2:	609a      	str	r2, [r3, #8]
      break;
 8002ba4:	e03b      	b.n	8002c1e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	6818      	ldr	r0, [r3, #0]
 8002baa:	683b      	ldr	r3, [r7, #0]
 8002bac:	6859      	ldr	r1, [r3, #4]
 8002bae:	683b      	ldr	r3, [r7, #0]
 8002bb0:	68db      	ldr	r3, [r3, #12]
 8002bb2:	461a      	mov	r2, r3
 8002bb4:	f000 f8bc 	bl	8002d30 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	2150      	movs	r1, #80	; 0x50
 8002bbe:	4618      	mov	r0, r3
 8002bc0:	f000 f913 	bl	8002dea <TIM_ITRx_SetConfig>
      break;
 8002bc4:	e02b      	b.n	8002c1e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	6818      	ldr	r0, [r3, #0]
 8002bca:	683b      	ldr	r3, [r7, #0]
 8002bcc:	6859      	ldr	r1, [r3, #4]
 8002bce:	683b      	ldr	r3, [r7, #0]
 8002bd0:	68db      	ldr	r3, [r3, #12]
 8002bd2:	461a      	mov	r2, r3
 8002bd4:	f000 f8da 	bl	8002d8c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	2160      	movs	r1, #96	; 0x60
 8002bde:	4618      	mov	r0, r3
 8002be0:	f000 f903 	bl	8002dea <TIM_ITRx_SetConfig>
      break;
 8002be4:	e01b      	b.n	8002c1e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	6818      	ldr	r0, [r3, #0]
 8002bea:	683b      	ldr	r3, [r7, #0]
 8002bec:	6859      	ldr	r1, [r3, #4]
 8002bee:	683b      	ldr	r3, [r7, #0]
 8002bf0:	68db      	ldr	r3, [r3, #12]
 8002bf2:	461a      	mov	r2, r3
 8002bf4:	f000 f89c 	bl	8002d30 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	2140      	movs	r1, #64	; 0x40
 8002bfe:	4618      	mov	r0, r3
 8002c00:	f000 f8f3 	bl	8002dea <TIM_ITRx_SetConfig>
      break;
 8002c04:	e00b      	b.n	8002c1e <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681a      	ldr	r2, [r3, #0]
 8002c0a:	683b      	ldr	r3, [r7, #0]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	4619      	mov	r1, r3
 8002c10:	4610      	mov	r0, r2
 8002c12:	f000 f8ea 	bl	8002dea <TIM_ITRx_SetConfig>
        break;
 8002c16:	e002      	b.n	8002c1e <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8002c18:	bf00      	nop
 8002c1a:	e000      	b.n	8002c1e <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8002c1c:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	2201      	movs	r2, #1
 8002c22:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	2200      	movs	r2, #0
 8002c2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002c2e:	2300      	movs	r3, #0
}
 8002c30:	4618      	mov	r0, r3
 8002c32:	3710      	adds	r7, #16
 8002c34:	46bd      	mov	sp, r7
 8002c36:	bd80      	pop	{r7, pc}

08002c38 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002c38:	b480      	push	{r7}
 8002c3a:	b083      	sub	sp, #12
 8002c3c:	af00      	add	r7, sp, #0
 8002c3e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002c40:	bf00      	nop
 8002c42:	370c      	adds	r7, #12
 8002c44:	46bd      	mov	sp, r7
 8002c46:	bc80      	pop	{r7}
 8002c48:	4770      	bx	lr

08002c4a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002c4a:	b480      	push	{r7}
 8002c4c:	b083      	sub	sp, #12
 8002c4e:	af00      	add	r7, sp, #0
 8002c50:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002c52:	bf00      	nop
 8002c54:	370c      	adds	r7, #12
 8002c56:	46bd      	mov	sp, r7
 8002c58:	bc80      	pop	{r7}
 8002c5a:	4770      	bx	lr

08002c5c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002c5c:	b480      	push	{r7}
 8002c5e:	b083      	sub	sp, #12
 8002c60:	af00      	add	r7, sp, #0
 8002c62:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002c64:	bf00      	nop
 8002c66:	370c      	adds	r7, #12
 8002c68:	46bd      	mov	sp, r7
 8002c6a:	bc80      	pop	{r7}
 8002c6c:	4770      	bx	lr

08002c6e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002c6e:	b480      	push	{r7}
 8002c70:	b083      	sub	sp, #12
 8002c72:	af00      	add	r7, sp, #0
 8002c74:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002c76:	bf00      	nop
 8002c78:	370c      	adds	r7, #12
 8002c7a:	46bd      	mov	sp, r7
 8002c7c:	bc80      	pop	{r7}
 8002c7e:	4770      	bx	lr

08002c80 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002c80:	b480      	push	{r7}
 8002c82:	b085      	sub	sp, #20
 8002c84:	af00      	add	r7, sp, #0
 8002c86:	6078      	str	r0, [r7, #4]
 8002c88:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	4a25      	ldr	r2, [pc, #148]	; (8002d28 <TIM_Base_SetConfig+0xa8>)
 8002c94:	4293      	cmp	r3, r2
 8002c96:	d007      	beq.n	8002ca8 <TIM_Base_SetConfig+0x28>
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002c9e:	d003      	beq.n	8002ca8 <TIM_Base_SetConfig+0x28>
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	4a22      	ldr	r2, [pc, #136]	; (8002d2c <TIM_Base_SetConfig+0xac>)
 8002ca4:	4293      	cmp	r3, r2
 8002ca6:	d108      	bne.n	8002cba <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002cae:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002cb0:	683b      	ldr	r3, [r7, #0]
 8002cb2:	685b      	ldr	r3, [r3, #4]
 8002cb4:	68fa      	ldr	r2, [r7, #12]
 8002cb6:	4313      	orrs	r3, r2
 8002cb8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	4a1a      	ldr	r2, [pc, #104]	; (8002d28 <TIM_Base_SetConfig+0xa8>)
 8002cbe:	4293      	cmp	r3, r2
 8002cc0:	d007      	beq.n	8002cd2 <TIM_Base_SetConfig+0x52>
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002cc8:	d003      	beq.n	8002cd2 <TIM_Base_SetConfig+0x52>
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	4a17      	ldr	r2, [pc, #92]	; (8002d2c <TIM_Base_SetConfig+0xac>)
 8002cce:	4293      	cmp	r3, r2
 8002cd0:	d108      	bne.n	8002ce4 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002cd8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002cda:	683b      	ldr	r3, [r7, #0]
 8002cdc:	68db      	ldr	r3, [r3, #12]
 8002cde:	68fa      	ldr	r2, [r7, #12]
 8002ce0:	4313      	orrs	r3, r2
 8002ce2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002cea:	683b      	ldr	r3, [r7, #0]
 8002cec:	695b      	ldr	r3, [r3, #20]
 8002cee:	4313      	orrs	r3, r2
 8002cf0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	68fa      	ldr	r2, [r7, #12]
 8002cf6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002cf8:	683b      	ldr	r3, [r7, #0]
 8002cfa:	689a      	ldr	r2, [r3, #8]
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002d00:	683b      	ldr	r3, [r7, #0]
 8002d02:	681a      	ldr	r2, [r3, #0]
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	4a07      	ldr	r2, [pc, #28]	; (8002d28 <TIM_Base_SetConfig+0xa8>)
 8002d0c:	4293      	cmp	r3, r2
 8002d0e:	d103      	bne.n	8002d18 <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002d10:	683b      	ldr	r3, [r7, #0]
 8002d12:	691a      	ldr	r2, [r3, #16]
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	2201      	movs	r2, #1
 8002d1c:	615a      	str	r2, [r3, #20]
}
 8002d1e:	bf00      	nop
 8002d20:	3714      	adds	r7, #20
 8002d22:	46bd      	mov	sp, r7
 8002d24:	bc80      	pop	{r7}
 8002d26:	4770      	bx	lr
 8002d28:	40012c00 	.word	0x40012c00
 8002d2c:	40000400 	.word	0x40000400

08002d30 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002d30:	b480      	push	{r7}
 8002d32:	b087      	sub	sp, #28
 8002d34:	af00      	add	r7, sp, #0
 8002d36:	60f8      	str	r0, [r7, #12]
 8002d38:	60b9      	str	r1, [r7, #8]
 8002d3a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	6a1b      	ldr	r3, [r3, #32]
 8002d40:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	6a1b      	ldr	r3, [r3, #32]
 8002d46:	f023 0201 	bic.w	r2, r3, #1
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	699b      	ldr	r3, [r3, #24]
 8002d52:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002d54:	693b      	ldr	r3, [r7, #16]
 8002d56:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002d5a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	011b      	lsls	r3, r3, #4
 8002d60:	693a      	ldr	r2, [r7, #16]
 8002d62:	4313      	orrs	r3, r2
 8002d64:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002d66:	697b      	ldr	r3, [r7, #20]
 8002d68:	f023 030a 	bic.w	r3, r3, #10
 8002d6c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002d6e:	697a      	ldr	r2, [r7, #20]
 8002d70:	68bb      	ldr	r3, [r7, #8]
 8002d72:	4313      	orrs	r3, r2
 8002d74:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	693a      	ldr	r2, [r7, #16]
 8002d7a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	697a      	ldr	r2, [r7, #20]
 8002d80:	621a      	str	r2, [r3, #32]
}
 8002d82:	bf00      	nop
 8002d84:	371c      	adds	r7, #28
 8002d86:	46bd      	mov	sp, r7
 8002d88:	bc80      	pop	{r7}
 8002d8a:	4770      	bx	lr

08002d8c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002d8c:	b480      	push	{r7}
 8002d8e:	b087      	sub	sp, #28
 8002d90:	af00      	add	r7, sp, #0
 8002d92:	60f8      	str	r0, [r7, #12]
 8002d94:	60b9      	str	r1, [r7, #8]
 8002d96:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	6a1b      	ldr	r3, [r3, #32]
 8002d9c:	f023 0210 	bic.w	r2, r3, #16
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	699b      	ldr	r3, [r3, #24]
 8002da8:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	6a1b      	ldr	r3, [r3, #32]
 8002dae:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002db0:	697b      	ldr	r3, [r7, #20]
 8002db2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002db6:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	031b      	lsls	r3, r3, #12
 8002dbc:	697a      	ldr	r2, [r7, #20]
 8002dbe:	4313      	orrs	r3, r2
 8002dc0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002dc2:	693b      	ldr	r3, [r7, #16]
 8002dc4:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002dc8:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002dca:	68bb      	ldr	r3, [r7, #8]
 8002dcc:	011b      	lsls	r3, r3, #4
 8002dce:	693a      	ldr	r2, [r7, #16]
 8002dd0:	4313      	orrs	r3, r2
 8002dd2:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	697a      	ldr	r2, [r7, #20]
 8002dd8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	693a      	ldr	r2, [r7, #16]
 8002dde:	621a      	str	r2, [r3, #32]
}
 8002de0:	bf00      	nop
 8002de2:	371c      	adds	r7, #28
 8002de4:	46bd      	mov	sp, r7
 8002de6:	bc80      	pop	{r7}
 8002de8:	4770      	bx	lr

08002dea <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002dea:	b480      	push	{r7}
 8002dec:	b085      	sub	sp, #20
 8002dee:	af00      	add	r7, sp, #0
 8002df0:	6078      	str	r0, [r7, #4]
 8002df2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	689b      	ldr	r3, [r3, #8]
 8002df8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002e00:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002e02:	683a      	ldr	r2, [r7, #0]
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	4313      	orrs	r3, r2
 8002e08:	f043 0307 	orr.w	r3, r3, #7
 8002e0c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	68fa      	ldr	r2, [r7, #12]
 8002e12:	609a      	str	r2, [r3, #8]
}
 8002e14:	bf00      	nop
 8002e16:	3714      	adds	r7, #20
 8002e18:	46bd      	mov	sp, r7
 8002e1a:	bc80      	pop	{r7}
 8002e1c:	4770      	bx	lr

08002e1e <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002e1e:	b480      	push	{r7}
 8002e20:	b087      	sub	sp, #28
 8002e22:	af00      	add	r7, sp, #0
 8002e24:	60f8      	str	r0, [r7, #12]
 8002e26:	60b9      	str	r1, [r7, #8]
 8002e28:	607a      	str	r2, [r7, #4]
 8002e2a:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	689b      	ldr	r3, [r3, #8]
 8002e30:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002e32:	697b      	ldr	r3, [r7, #20]
 8002e34:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002e38:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002e3a:	683b      	ldr	r3, [r7, #0]
 8002e3c:	021a      	lsls	r2, r3, #8
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	431a      	orrs	r2, r3
 8002e42:	68bb      	ldr	r3, [r7, #8]
 8002e44:	4313      	orrs	r3, r2
 8002e46:	697a      	ldr	r2, [r7, #20]
 8002e48:	4313      	orrs	r3, r2
 8002e4a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	697a      	ldr	r2, [r7, #20]
 8002e50:	609a      	str	r2, [r3, #8]
}
 8002e52:	bf00      	nop
 8002e54:	371c      	adds	r7, #28
 8002e56:	46bd      	mov	sp, r7
 8002e58:	bc80      	pop	{r7}
 8002e5a:	4770      	bx	lr

08002e5c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002e5c:	b480      	push	{r7}
 8002e5e:	b085      	sub	sp, #20
 8002e60:	af00      	add	r7, sp, #0
 8002e62:	6078      	str	r0, [r7, #4]
 8002e64:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002e6c:	2b01      	cmp	r3, #1
 8002e6e:	d101      	bne.n	8002e74 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002e70:	2302      	movs	r3, #2
 8002e72:	e041      	b.n	8002ef8 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	2201      	movs	r2, #1
 8002e78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	2202      	movs	r2, #2
 8002e80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	685b      	ldr	r3, [r3, #4]
 8002e8a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	689b      	ldr	r3, [r3, #8]
 8002e92:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002e9a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002e9c:	683b      	ldr	r3, [r7, #0]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	68fa      	ldr	r2, [r7, #12]
 8002ea2:	4313      	orrs	r3, r2
 8002ea4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	68fa      	ldr	r2, [r7, #12]
 8002eac:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	4a14      	ldr	r2, [pc, #80]	; (8002f04 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8002eb4:	4293      	cmp	r3, r2
 8002eb6:	d009      	beq.n	8002ecc <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002ec0:	d004      	beq.n	8002ecc <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	4a10      	ldr	r2, [pc, #64]	; (8002f08 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8002ec8:	4293      	cmp	r3, r2
 8002eca:	d10c      	bne.n	8002ee6 <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002ecc:	68bb      	ldr	r3, [r7, #8]
 8002ece:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002ed2:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002ed4:	683b      	ldr	r3, [r7, #0]
 8002ed6:	685b      	ldr	r3, [r3, #4]
 8002ed8:	68ba      	ldr	r2, [r7, #8]
 8002eda:	4313      	orrs	r3, r2
 8002edc:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	68ba      	ldr	r2, [r7, #8]
 8002ee4:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	2201      	movs	r2, #1
 8002eea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	2200      	movs	r2, #0
 8002ef2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002ef6:	2300      	movs	r3, #0
}
 8002ef8:	4618      	mov	r0, r3
 8002efa:	3714      	adds	r7, #20
 8002efc:	46bd      	mov	sp, r7
 8002efe:	bc80      	pop	{r7}
 8002f00:	4770      	bx	lr
 8002f02:	bf00      	nop
 8002f04:	40012c00 	.word	0x40012c00
 8002f08:	40000400 	.word	0x40000400

08002f0c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002f0c:	b480      	push	{r7}
 8002f0e:	b083      	sub	sp, #12
 8002f10:	af00      	add	r7, sp, #0
 8002f12:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002f14:	bf00      	nop
 8002f16:	370c      	adds	r7, #12
 8002f18:	46bd      	mov	sp, r7
 8002f1a:	bc80      	pop	{r7}
 8002f1c:	4770      	bx	lr

08002f1e <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002f1e:	b480      	push	{r7}
 8002f20:	b083      	sub	sp, #12
 8002f22:	af00      	add	r7, sp, #0
 8002f24:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002f26:	bf00      	nop
 8002f28:	370c      	adds	r7, #12
 8002f2a:	46bd      	mov	sp, r7
 8002f2c:	bc80      	pop	{r7}
 8002f2e:	4770      	bx	lr

08002f30 <__libc_init_array>:
 8002f30:	b570      	push	{r4, r5, r6, lr}
 8002f32:	2600      	movs	r6, #0
 8002f34:	4d0c      	ldr	r5, [pc, #48]	; (8002f68 <__libc_init_array+0x38>)
 8002f36:	4c0d      	ldr	r4, [pc, #52]	; (8002f6c <__libc_init_array+0x3c>)
 8002f38:	1b64      	subs	r4, r4, r5
 8002f3a:	10a4      	asrs	r4, r4, #2
 8002f3c:	42a6      	cmp	r6, r4
 8002f3e:	d109      	bne.n	8002f54 <__libc_init_array+0x24>
 8002f40:	f000 f822 	bl	8002f88 <_init>
 8002f44:	2600      	movs	r6, #0
 8002f46:	4d0a      	ldr	r5, [pc, #40]	; (8002f70 <__libc_init_array+0x40>)
 8002f48:	4c0a      	ldr	r4, [pc, #40]	; (8002f74 <__libc_init_array+0x44>)
 8002f4a:	1b64      	subs	r4, r4, r5
 8002f4c:	10a4      	asrs	r4, r4, #2
 8002f4e:	42a6      	cmp	r6, r4
 8002f50:	d105      	bne.n	8002f5e <__libc_init_array+0x2e>
 8002f52:	bd70      	pop	{r4, r5, r6, pc}
 8002f54:	f855 3b04 	ldr.w	r3, [r5], #4
 8002f58:	4798      	blx	r3
 8002f5a:	3601      	adds	r6, #1
 8002f5c:	e7ee      	b.n	8002f3c <__libc_init_array+0xc>
 8002f5e:	f855 3b04 	ldr.w	r3, [r5], #4
 8002f62:	4798      	blx	r3
 8002f64:	3601      	adds	r6, #1
 8002f66:	e7f2      	b.n	8002f4e <__libc_init_array+0x1e>
 8002f68:	08002fc0 	.word	0x08002fc0
 8002f6c:	08002fc0 	.word	0x08002fc0
 8002f70:	08002fc0 	.word	0x08002fc0
 8002f74:	08002fc4 	.word	0x08002fc4

08002f78 <memset>:
 8002f78:	4603      	mov	r3, r0
 8002f7a:	4402      	add	r2, r0
 8002f7c:	4293      	cmp	r3, r2
 8002f7e:	d100      	bne.n	8002f82 <memset+0xa>
 8002f80:	4770      	bx	lr
 8002f82:	f803 1b01 	strb.w	r1, [r3], #1
 8002f86:	e7f9      	b.n	8002f7c <memset+0x4>

08002f88 <_init>:
 8002f88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002f8a:	bf00      	nop
 8002f8c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002f8e:	bc08      	pop	{r3}
 8002f90:	469e      	mov	lr, r3
 8002f92:	4770      	bx	lr

08002f94 <_fini>:
 8002f94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002f96:	bf00      	nop
 8002f98:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002f9a:	bc08      	pop	{r3}
 8002f9c:	469e      	mov	lr, r3
 8002f9e:	4770      	bx	lr
